/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  readonly "/": {
    /** Get Hypermedia links to resources accessible in GitHub's REST API */
    readonly get: operations["meta/root"];
  };
  readonly "/app": {
    /**
     * Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)" endpoint.
     *
     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    readonly get: operations["apps/get-authenticated"];
  };
  readonly "/app-manifests/{code}/conversions": {
    /** Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`. */
    readonly post: operations["apps/create-from-manifest"];
  };
  readonly "/app/hook/config": {
    /**
     * Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
     *
     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    readonly get: operations["apps/get-webhook-config-for-app"];
    /**
     * Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
     *
     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    readonly patch: operations["apps/update-webhook-config-for-app"];
  };
  readonly "/app/installations": {
    /**
     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     *
     * The permissions the installation has are included under the `permissions` key.
     */
    readonly get: operations["apps/list-installations"];
  };
  readonly "/app/installations/{installation_id}": {
    /**
     * Enables an authenticated GitHub App to find an installation's information using the installation id. The installation's account type (`target_type`) will be either an organization or a user account, depending which account the repository belongs to.
     *
     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    readonly get: operations["apps/get-installation"];
    /**
     * Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/rest/reference/apps/#suspend-an-app-installation)" endpoint.
     *
     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    readonly delete: operations["apps/delete-installation"];
  };
  readonly "/app/installations/{installation_id}/access_tokens": {
    /**
     * Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
     *
     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    readonly post: operations["apps/create-installation-access-token"];
  };
  readonly "/app/installations/{installation_id}/suspended": {
    /**
     * Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.
     *
     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    readonly put: operations["apps/suspend-installation"];
    /**
     * Removes a GitHub App installation suspension.
     *
     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    readonly delete: operations["apps/unsuspend-installation"];
  };
  readonly "/applications/grants": {
    /**
     * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * You can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://docs.github.com/rest/reference/oauth-authorizations#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The `scopes` returned are the union of scopes authorized for the application. For example, if an application has one token with `repo` scope and another token with `user` scope, the grant will return `["repo", "user"]`.
     */
    readonly get: operations["oauth-authorizations/list-grants"];
  };
  readonly "/applications/grants/{grant_id}": {
    /** **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). */
    readonly get: operations["oauth-authorizations/get-grant"];
    /**
     * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
     */
    readonly delete: operations["oauth-authorizations/delete-grant"];
  };
  readonly "/applications/{client_id}/grant": {
    /**
     * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
     * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
     */
    readonly delete: operations["apps/delete-authorization"];
  };
  readonly "/applications/{client_id}/grants/{access_token}": {
    /**
     * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
     *
     * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid token as `:access_token` and the grant for the token's owner will be deleted.
     *
     * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the Applications settings page under "Authorized OAuth Apps" on GitHub](https://github.com/settings/applications#authorized).
     */
    readonly delete: operations["apps/revoke-grant-for-application"];
  };
  readonly "/applications/{client_id}/token": {
    /** OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`. */
    readonly post: operations["apps/check-token"];
    /** OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. */
    readonly delete: operations["apps/delete-token"];
    /** OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`. */
    readonly patch: operations["apps/reset-token"];
  };
  readonly "/applications/{client_id}/token/scoped": {
    /** Exchanges a non-repository scoped user-to-server OAuth access token for a repository scoped user-to-server OAuth access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`. */
    readonly post: operations["apps/scope-token"];
  };
  readonly "/applications/{client_id}/tokens/{access_token}": {
    /**
     * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
     *
     * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
     */
    readonly get: operations["apps/check-authorization"];
    /**
     * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
     *
     * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
     */
    readonly post: operations["apps/reset-authorization"];
    /**
     * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
     *
     * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
     */
    readonly delete: operations["apps/revoke-authorization-for-application"];
  };
  readonly "/apps/{app_slug}": {
    /**
     * **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
     *
     * If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     */
    readonly get: operations["apps/get-by-slug"];
  };
  readonly "/authorizations": {
    /** **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). */
    readonly get: operations["oauth-authorizations/list-authorizations"];
    /**
     * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
     *
     * Creates OAuth tokens using [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication). If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
     *
     * To create tokens for a particular OAuth application using this endpoint, you must authenticate as the user you want to create an authorization for and provide the app's client ID and secret, found on your OAuth application's settings page. If your OAuth application intends to create multiple tokens for one user, use `fingerprint` to differentiate between them.
     *
     * You can also create tokens on GitHub from the [personal access tokens settings](https://github.com/settings/tokens) page. Read more about these tokens in [the GitHub Help documentation](https://help.github.com/articles/creating-an-access-token-for-command-line-use).
     *
     * Organizations that enforce SAML SSO require personal access tokens to be allowed. Read more about allowing tokens in [the GitHub Help documentation](https://help.github.com/articles/about-identity-and-access-management-with-saml-single-sign-on).
     */
    readonly post: operations["oauth-authorizations/create-authorization"];
  };
  readonly "/authorizations/clients/{client_id}": {
    /**
     * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
     *
     * Creates a new authorization for the specified OAuth application, only if an authorization for that application doesn't already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
     *
     * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
     *
     * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     */
    readonly put: operations["oauth-authorizations/get-or-create-authorization-for-app"];
  };
  readonly "/authorizations/clients/{client_id}/{fingerprint}": {
    /**
     * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
     *
     * This method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. `fingerprint` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
     *
     * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
     */
    readonly put: operations["oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint"];
  };
  readonly "/authorizations/{authorization_id}": {
    /** **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). */
    readonly get: operations["oauth-authorizations/get-authorization"];
    /** **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). */
    readonly delete: operations["oauth-authorizations/delete-authorization"];
    /**
     * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
     *
     * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
     *
     * You can only send one of these scope keys at a time.
     */
    readonly patch: operations["oauth-authorizations/update-authorization"];
  };
  readonly "/codes_of_conduct": {
    readonly get: operations["codes-of-conduct/get-all-codes-of-conduct"];
  };
  readonly "/codes_of_conduct/{key}": {
    readonly get: operations["codes-of-conduct/get-conduct-code"];
  };
  readonly "/content_references/{content_reference_id}/attachments": {
    /**
     * Creates an attachment under a content reference URL in the body or comment of an issue or pull request. Use the `id` of the content reference from the [`content_reference` event](https://docs.github.com/webhooks/event-payloads/#content_reference) to create an attachment.
     *
     * The app must create a content attachment within six hours of the content reference URL being posted. See "[Using content attachments](https://docs.github.com/apps/using-content-attachments/)" for details about content attachments.
     *
     * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     */
    readonly post: operations["apps/create-content-attachment"];
  };
  readonly "/emojis": {
    /** Lists all the emojis available to use on GitHub. */
    readonly get: operations["emojis/get"];
  };
  readonly "/enterprises/{enterprise}/actions/permissions": {
    /**
     * Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly get: operations["enterprise-admin/get-github-actions-permissions-enterprise"];
    /**
     * Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly put: operations["enterprise-admin/set-github-actions-permissions-enterprise"];
  };
  readonly "/enterprises/{enterprise}/actions/permissions/organizations": {
    /**
     * Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly get: operations["enterprise-admin/list-selected-organizations-enabled-github-actions-enterprise"];
    /**
     * Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly put: operations["enterprise-admin/set-selected-organizations-enabled-github-actions-enterprise"];
  };
  readonly "/enterprises/{enterprise}/actions/permissions/organizations/{org_id}": {
    /**
     * Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly put: operations["enterprise-admin/enable-selected-organization-github-actions-enterprise"];
    /**
     * Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly delete: operations["enterprise-admin/disable-selected-organization-github-actions-enterprise"];
  };
  readonly "/enterprises/{enterprise}/actions/permissions/selected-actions": {
    /**
     * Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly get: operations["enterprise-admin/get-allowed-actions-enterprise"];
    /**
     * Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly put: operations["enterprise-admin/set-allowed-actions-enterprise"];
  };
  readonly "/enterprises/{enterprise}/actions/runner-groups": {
    /**
     * Lists all self-hosted runner groups for an enterprise.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly get: operations["enterprise-admin/list-self-hosted-runner-groups-for-enterprise"];
    /**
     * Creates a new self-hosted runner group for an enterprise.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly post: operations["enterprise-admin/create-self-hosted-runner-group-for-enterprise"];
  };
  readonly "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}": {
    /**
     * Gets a specific self-hosted runner group for an enterprise.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly get: operations["enterprise-admin/get-self-hosted-runner-group-for-enterprise"];
    /**
     * Deletes a self-hosted runner group for an enterprise.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly delete: operations["enterprise-admin/delete-self-hosted-runner-group-from-enterprise"];
    /**
     * Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly patch: operations["enterprise-admin/update-self-hosted-runner-group-for-enterprise"];
  };
  readonly "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations": {
    /**
     * Lists the organizations with access to a self-hosted runner group.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly get: operations["enterprise-admin/list-org-access-to-self-hosted-runner-group-in-enterprise"];
    /**
     * Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly put: operations["enterprise-admin/set-org-access-to-self-hosted-runner-group-in-enterprise"];
  };
  readonly "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}": {
    /**
     * Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly put: operations["enterprise-admin/add-org-access-to-self-hosted-runner-group-in-enterprise"];
    /**
     * Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly delete: operations["enterprise-admin/remove-org-access-to-self-hosted-runner-group-in-enterprise"];
  };
  readonly "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners": {
    /**
     * Lists the self-hosted runners that are in a specific enterprise group.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly get: operations["enterprise-admin/list-self-hosted-runners-in-group-for-enterprise"];
    /**
     * Replaces the list of self-hosted runners that are part of an enterprise runner group.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly put: operations["enterprise-admin/set-self-hosted-runners-in-group-for-enterprise"];
  };
  readonly "/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}": {
    /**
     * Adds a self-hosted runner to a runner group configured in an enterprise.
     *
     * You must authenticate using an access token with the `admin:enterprise`
     * scope to use this endpoint.
     */
    readonly put: operations["enterprise-admin/add-self-hosted-runner-to-group-for-enterprise"];
    /**
     * Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly delete: operations["enterprise-admin/remove-self-hosted-runner-from-group-for-enterprise"];
  };
  readonly "/enterprises/{enterprise}/actions/runners": {
    /**
     * Lists all self-hosted runners configured for an enterprise.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly get: operations["enterprise-admin/list-self-hosted-runners-for-enterprise"];
  };
  readonly "/enterprises/{enterprise}/actions/runners/downloads": {
    /**
     * Lists binaries for the runner application that you can download and run.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly get: operations["enterprise-admin/list-runner-applications-for-enterprise"];
  };
  readonly "/enterprises/{enterprise}/actions/runners/registration-token": {
    /**
     * Returns a token that you can pass to the `config` script. The token expires after one hour.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     *
     * #### Example using registration token
     *
     * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
     *
     * ```
     * ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN
     * ```
     */
    readonly post: operations["enterprise-admin/create-registration-token-for-enterprise"];
  };
  readonly "/enterprises/{enterprise}/actions/runners/remove-token": {
    /**
     * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     *
     * #### Example using remove token
     *
     * To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this
     * endpoint.
     *
     * ```
     * ./config.sh remove --token TOKEN
     * ```
     */
    readonly post: operations["enterprise-admin/create-remove-token-for-enterprise"];
  };
  readonly "/enterprises/{enterprise}/actions/runners/{runner_id}": {
    /**
     * Gets a specific self-hosted runner configured in an enterprise.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly get: operations["enterprise-admin/get-self-hosted-runner-for-enterprise"];
    /**
     * Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
     *
     * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
     */
    readonly delete: operations["enterprise-admin/delete-self-hosted-runner-from-enterprise"];
  };
  readonly "/enterprises/{enterprise}/audit-log": {
    /**
     * **Note:** The audit log REST API is currently in beta and is subject to change.
     *
     * Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `admin:enterprise` scope.
     */
    readonly get: operations["audit-log/get-audit-log"];
  };
  readonly "/enterprises/{enterprise}/settings/billing/actions": {
    /**
     * Gets the summary of the free and paid GitHub Actions minutes used.
     *
     * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
     *
     * The authenticated user must be an enterprise admin.
     */
    readonly get: operations["billing/get-github-actions-billing-ghe"];
  };
  readonly "/enterprises/{enterprise}/settings/billing/packages": {
    /**
     * Gets the free and paid storage used for GitHub Packages in gigabytes.
     *
     * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
     *
     * The authenticated user must be an enterprise admin.
     */
    readonly get: operations["billing/get-github-packages-billing-ghe"];
  };
  readonly "/enterprises/{enterprise}/settings/billing/shared-storage": {
    /**
     * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
     *
     * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
     *
     * The authenticated user must be an enterprise admin.
     */
    readonly get: operations["billing/get-shared-storage-billing-ghe"];
  };
  readonly "/events": {
    /** We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago. */
    readonly get: operations["activity/list-public-events"];
  };
  readonly "/feeds": {
    /**
     * GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:
     *
     * *   **Timeline**: The GitHub global public timeline
     * *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia)
     * *   **Current user public**: The public timeline for the authenticated user
     * *   **Current user**: The private timeline for the authenticated user
     * *   **Current user actor**: The private timeline for activity created by the authenticated user
     * *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
     * *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.
     *
     * **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
     */
    readonly get: operations["activity/get-feeds"];
  };
  readonly "/gists": {
    /** Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists: */
    readonly get: operations["gists/list"];
    /**
     * Allows you to add a new gist with one or more files.
     *
     * **Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
     */
    readonly post: operations["gists/create"];
  };
  readonly "/gists/public": {
    /**
     * List public gists sorted by most recently updated to least recently updated.
     *
     * Note: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
     */
    readonly get: operations["gists/list-public"];
  };
  readonly "/gists/starred": {
    /** List the authenticated user's starred gists: */
    readonly get: operations["gists/list-starred"];
  };
  readonly "/gists/{gist_id}": {
    readonly get: operations["gists/get"];
    readonly delete: operations["gists/delete"];
    /** Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged. */
    readonly patch: operations["gists/update"];
  };
  readonly "/gists/{gist_id}/comments": {
    readonly get: operations["gists/list-comments"];
    readonly post: operations["gists/create-comment"];
  };
  readonly "/gists/{gist_id}/comments/{comment_id}": {
    readonly get: operations["gists/get-comment"];
    readonly delete: operations["gists/delete-comment"];
    readonly patch: operations["gists/update-comment"];
  };
  readonly "/gists/{gist_id}/commits": {
    readonly get: operations["gists/list-commits"];
  };
  readonly "/gists/{gist_id}/forks": {
    readonly get: operations["gists/list-forks"];
    /** **Note**: This was previously `/gists/:gist_id/fork`. */
    readonly post: operations["gists/fork"];
  };
  readonly "/gists/{gist_id}/star": {
    readonly get: operations["gists/check-is-starred"];
    /** Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)." */
    readonly put: operations["gists/star"];
    readonly delete: operations["gists/unstar"];
  };
  readonly "/gists/{gist_id}/{sha}": {
    readonly get: operations["gists/get-revision"];
  };
  readonly "/gitignore/templates": {
    /** List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user). */
    readonly get: operations["gitignore/get-all-templates"];
  };
  readonly "/gitignore/templates/{name}": {
    /**
     * The API also allows fetching the source of a single template.
     * Use the raw [media type](https://docs.github.com/rest/overview/media-types/) to get the raw contents.
     */
    readonly get: operations["gitignore/get-template"];
  };
  readonly "/installation/repositories": {
    /**
     * List repositories that an app installation can access.
     *
     * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     */
    readonly get: operations["apps/list-repos-accessible-to-installation"];
  };
  readonly "/installation/token": {
    /**
     * Revokes the installation token you're using to authenticate as an installation and access this endpoint.
     *
     * Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/rest/reference/apps#create-an-installation-access-token-for-an-app)" endpoint.
     *
     * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
     */
    readonly delete: operations["apps/revoke-installation-access-token"];
  };
  readonly "/issues": {
    /**
     * List issues assigned to the authenticated user across all visible repositories including owned repositories, member
     * repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
     * necessarily assigned to you.
     *
     *
     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
     * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
     * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
     * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
     */
    readonly get: operations["issues/list"];
  };
  readonly "/licenses": {
    readonly get: operations["licenses/get-all-commonly-used"];
  };
  readonly "/licenses/{license}": {
    readonly get: operations["licenses/get"];
  };
  readonly "/markdown": {
    readonly post: operations["markdown/render"];
  };
  readonly "/markdown/raw": {
    /** You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less. */
    readonly post: operations["markdown/render-raw"];
  };
  readonly "/marketplace_listing/accounts/{account_id}": {
    /**
     * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
     *
     * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
     */
    readonly get: operations["apps/get-subscription-plan-for-account"];
  };
  readonly "/marketplace_listing/plans": {
    /**
     * Lists all plans that are part of your GitHub Marketplace listing.
     *
     * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
     */
    readonly get: operations["apps/list-plans"];
  };
  readonly "/marketplace_listing/plans/{plan_id}/accounts": {
    /**
     * Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
     *
     * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
     */
    readonly get: operations["apps/list-accounts-for-plan"];
  };
  readonly "/marketplace_listing/stubbed/accounts/{account_id}": {
    /**
     * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
     *
     * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
     */
    readonly get: operations["apps/get-subscription-plan-for-account-stubbed"];
  };
  readonly "/marketplace_listing/stubbed/plans": {
    /**
     * Lists all plans that are part of your GitHub Marketplace listing.
     *
     * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
     */
    readonly get: operations["apps/list-plans-stubbed"];
  };
  readonly "/marketplace_listing/stubbed/plans/{plan_id}/accounts": {
    /**
     * Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
     *
     * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
     */
    readonly get: operations["apps/list-accounts-for-plan-stubbed"];
  };
  readonly "/meta": {
    /**
     * Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://help.github.com/articles/about-github-s-ip-addresses/)."
     *
     * **Note:** The IP addresses shown in the documentation's response are only example values. You must always query the API directly to get the latest list of IP addresses.
     */
    readonly get: operations["meta/get"];
  };
  readonly "/networks/{owner}/{repo}/events": {
    readonly get: operations["activity/list-public-events-for-repo-network"];
  };
  readonly "/notifications": {
    /** List all notifications for the current user, sorted by most recently updated. */
    readonly get: operations["activity/list-notifications-for-authenticated-user"];
    /** Marks all notifications as "read" removes it from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`. */
    readonly put: operations["activity/mark-notifications-as-read"];
  };
  readonly "/notifications/threads/{thread_id}": {
    readonly get: operations["activity/get-thread"];
    readonly patch: operations["activity/mark-thread-as-read"];
  };
  readonly "/notifications/threads/{thread_id}/subscription": {
    /**
     * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/reference/activity#get-a-repository-subscription).
     *
     * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
     */
    readonly get: operations["activity/get-thread-subscription-for-authenticated-user"];
    /**
     * If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
     *
     * You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
     *
     * Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/reference/activity#delete-a-thread-subscription) endpoint.
     */
    readonly put: operations["activity/set-thread-subscription"];
    /** Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/reference/activity#set-a-thread-subscription) endpoint and set `ignore` to `true`. */
    readonly delete: operations["activity/delete-thread-subscription"];
  };
  readonly "/octocat": {
    /** Get the octocat as ASCII art */
    readonly get: operations["meta/get-octocat"];
  };
  readonly "/organizations": {
    /**
     * Lists all organizations, in the order that they were created on GitHub.
     *
     * **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.
     */
    readonly get: operations["orgs/list"];
  };
  readonly "/orgs/{org}": {
    /**
     * To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
     *
     * GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub plan information' below."
     */
    readonly get: operations["orgs/get"];
    /**
     * **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
     *
     * Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.
     */
    readonly patch: operations["orgs/update"];
  };
  readonly "/orgs/{org}/actions/permissions": {
    /**
     * Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     */
    readonly get: operations["actions/get-github-actions-permissions-organization"];
    /**
     * Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
     *
     * If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as `allowed_actions` to `selected` actions, then you cannot override them for the organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     */
    readonly put: operations["actions/set-github-actions-permissions-organization"];
  };
  readonly "/orgs/{org}/actions/permissions/repositories": {
    /**
     * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     */
    readonly get: operations["actions/list-selected-repositories-enabled-github-actions-organization"];
    /**
     * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     */
    readonly put: operations["actions/set-selected-repositories-enabled-github-actions-organization"];
  };
  readonly "/orgs/{org}/actions/permissions/repositories/{repository_id}": {
    /**
     * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     */
    readonly put: operations["actions/enable-selected-repository-github-actions-organization"];
    /**
     * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     */
    readonly delete: operations["actions/disable-selected-repository-github-actions-organization"];
  };
  readonly "/orgs/{org}/actions/permissions/selected-actions": {
    /**
     * Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).""
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     */
    readonly get: operations["actions/get-allowed-actions-organization"];
    /**
     * Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
     *
     * If the organization belongs to an enterprise that has `selected` actions set at the enterprise level, then you cannot override any of the enterprise's allowed actions settings.
     *
     * To use the `patterns_allowed` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories in the organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
     */
    readonly put: operations["actions/set-allowed-actions-organization"];
  };
  readonly "/orgs/{org}/actions/runner-groups": {
    /**
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
     *
     * Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly get: operations["actions/list-self-hosted-runner-groups-for-org"];
    /**
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
     *
     * Creates a new self-hosted runner group for an organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly post: operations["actions/create-self-hosted-runner-group-for-org"];
  };
  readonly "/orgs/{org}/actions/runner-groups/{runner_group_id}": {
    /**
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
     *
     * Gets a specific self-hosted runner group for an organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly get: operations["actions/get-self-hosted-runner-group-for-org"];
    /**
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
     *
     * Deletes a self-hosted runner group for an organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly delete: operations["actions/delete-self-hosted-runner-group-from-org"];
    /**
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
     *
     * Updates the `name` and `visibility` of a self-hosted runner group in an organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly patch: operations["actions/update-self-hosted-runner-group-for-org"];
  };
  readonly "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories": {
    /**
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
     *
     * Lists the repositories with access to a self-hosted runner group configured in an organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly get: operations["actions/list-repo-access-to-self-hosted-runner-group-in-org"];
    /**
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
     *
     * Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly put: operations["actions/set-repo-access-to-self-hosted-runner-group-in-org"];
  };
  readonly "/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}": {
    /**
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
     *
     *
     * Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
     *
     * You must authenticate using an access token with the `admin:org`
     * scope to use this endpoint.
     */
    readonly put: operations["actions/add-repo-access-to-self-hosted-runner-group-in-org"];
    /**
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
     *
     *
     * Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly delete: operations["actions/remove-repo-access-to-self-hosted-runner-group-in-org"];
  };
  readonly "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners": {
    /**
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
     *
     * Lists self-hosted runners that are in a specific organization group.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly get: operations["actions/list-self-hosted-runners-in-group-for-org"];
    /**
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
     *
     * Replaces the list of self-hosted runners that are part of an organization runner group.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly put: operations["actions/set-self-hosted-runners-in-group-for-org"];
  };
  readonly "/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}": {
    /**
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
     *
     *
     * Adds a self-hosted runner to a runner group configured in an organization.
     *
     * You must authenticate using an access token with the `admin:org`
     * scope to use this endpoint.
     */
    readonly put: operations["actions/add-self-hosted-runner-to-group-for-org"];
    /**
     * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
     *
     *
     * Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly delete: operations["actions/remove-self-hosted-runner-from-group-for-org"];
  };
  readonly "/orgs/{org}/actions/runners": {
    /**
     * Lists all self-hosted runners configured in an organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly get: operations["actions/list-self-hosted-runners-for-org"];
  };
  readonly "/orgs/{org}/actions/runners/downloads": {
    /**
     * Lists binaries for the runner application that you can download and run.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly get: operations["actions/list-runner-applications-for-org"];
  };
  readonly "/orgs/{org}/actions/runners/registration-token": {
    /**
     * Returns a token that you can pass to the `config` script. The token expires after one hour.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     *
     * #### Example using registration token
     *
     * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
     *
     * ```
     * ./config.sh --url https://github.com/octo-org --token TOKEN
     * ```
     */
    readonly post: operations["actions/create-registration-token-for-org"];
  };
  readonly "/orgs/{org}/actions/runners/remove-token": {
    /**
     * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     *
     * #### Example using remove token
     *
     * To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this
     * endpoint.
     *
     * ```
     * ./config.sh remove --token TOKEN
     * ```
     */
    readonly post: operations["actions/create-remove-token-for-org"];
  };
  readonly "/orgs/{org}/actions/runners/{runner_id}": {
    /**
     * Gets a specific self-hosted runner configured in an organization.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly get: operations["actions/get-self-hosted-runner-for-org"];
    /**
     * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
     *
     * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
     */
    readonly delete: operations["actions/delete-self-hosted-runner-from-org"];
  };
  readonly "/orgs/{org}/actions/secrets": {
    /** Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
    readonly get: operations["actions/list-org-secrets"];
  };
  readonly "/orgs/{org}/actions/secrets/public-key": {
    /** Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
    readonly get: operations["actions/get-org-public-key"];
  };
  readonly "/orgs/{org}/actions/secrets/{secret_name}": {
    /** Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
    readonly get: operations["actions/get-org-secret"];
    /**
     * Creates or updates an organization secret with an encrypted value. Encrypt your secret using
     * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
     * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to
     * use this endpoint.
     *
     * #### Example encrypting a secret using Node.js
     *
     * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
     *
     * ```
     * const sodium = require('tweetsodium');
     *
     * const key = "base64-encoded-public-key";
     * const value = "plain-text-secret";
     *
     * // Convert the message and key to Uint8Array's (Buffer implements that interface)
     * const messageBytes = Buffer.from(value);
     * const keyBytes = Buffer.from(key, 'base64');
     *
     * // Encrypt using LibSodium.
     * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
     *
     * // Base64 the encrypted secret
     * const encrypted = Buffer.from(encryptedBytes).toString('base64');
     *
     * console.log(encrypted);
     * ```
     *
     *
     * #### Example encrypting a secret using Python
     *
     * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.
     *
     * ```
     * from base64 import b64encode
     * from nacl import encoding, public
     *
     * def encrypt(public_key: str, secret_value: str) -> str:
     *   """Encrypt a Unicode string using the public key."""
     *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
     *   sealed_box = public.SealedBox(public_key)
     *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
     *   return b64encode(encrypted).decode("utf-8")
     * ```
     *
     * #### Example encrypting a secret using C#
     *
     * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
     *
     * ```
     * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
     * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
     *
     * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
     *
     * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
     * ```
     *
     * #### Example encrypting a secret using Ruby
     *
     * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
     *
     * ```ruby
     * require "rbnacl"
     * require "base64"
     *
     * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
     * public_key = RbNaCl::PublicKey.new(key)
     *
     * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
     * encrypted_secret = box.encrypt("my_secret")
     *
     * # Print the base64 encoded secret
     * puts Base64.strict_encode64(encrypted_secret)
     * ```
     */
    readonly put: operations["actions/create-or-update-org-secret"];
    /** Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
    readonly delete: operations["actions/delete-org-secret"];
  };
  readonly "/orgs/{org}/actions/secrets/{secret_name}/repositories": {
    /** Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
    readonly get: operations["actions/list-selected-repos-for-org-secret"];
    /** Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
    readonly put: operations["actions/set-selected-repos-for-org-secret"];
  };
  readonly "/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}": {
    /** Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
    readonly put: operations["actions/add-selected-repo-to-org-secret"];
    /** Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
    readonly delete: operations["actions/remove-selected-repo-from-org-secret"];
  };
  readonly "/orgs/{org}/audit-log": {
    /**
     * **Note:** The audit log REST API is currently in beta and is subject to change.
     *
     * Gets the audit log for an organization. For more information, see "[Reviewing the audit log for your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization)."
     *
     * To use this endpoint, you must be an organization owner, and you must use an access token with the `admin:org` scope. GitHub Apps must have the `organization_administration` read permission to use this endpoint.
     */
    readonly get: operations["orgs/get-audit-log"];
  };
  readonly "/orgs/{org}/blocks": {
    /** List the users blocked by an organization. */
    readonly get: operations["orgs/list-blocked-users"];
  };
  readonly "/orgs/{org}/blocks/{username}": {
    readonly get: operations["orgs/check-blocked-user"];
    readonly put: operations["orgs/block-user"];
    readonly delete: operations["orgs/unblock-user"];
  };
  readonly "/orgs/{org}/credential-authorizations": {
    /**
     * Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).
     *
     * An authenticated organization owner with the `read:org` scope can list all credential authorizations for an organization that uses SAML single sign-on (SSO). The credentials are either personal access tokens or SSH keys that organization members have authorized for the organization. For more information, see [About authentication with SAML single sign-on](https://help.github.com/en/articles/about-authentication-with-saml-single-sign-on).
     */
    readonly get: operations["orgs/list-saml-sso-authorizations"];
  };
  readonly "/orgs/{org}/credential-authorizations/{credential_id}": {
    /**
     * Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).
     *
     * An authenticated organization owner with the `admin:org` scope can remove a credential authorization for an organization that uses SAML SSO. Once you remove someone's credential authorization, they will need to create a new personal access token or SSH key and authorize it for the organization they want to access.
     */
    readonly delete: operations["orgs/remove-saml-sso-authorization"];
  };
  readonly "/orgs/{org}/events": {
    readonly get: operations["activity/list-public-org-events"];
  };
  readonly "/orgs/{org}/failed_invitations": {
    /** The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure. */
    readonly get: operations["orgs/list-failed-invitations"];
  };
  readonly "/orgs/{org}/hooks": {
    readonly get: operations["orgs/list-webhooks"];
    /** Here's how you can create a hook that posts payloads in JSON format: */
    readonly post: operations["orgs/create-webhook"];
  };
  readonly "/orgs/{org}/hooks/{hook_id}": {
    /** Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)." */
    readonly get: operations["orgs/get-webhook"];
    readonly delete: operations["orgs/delete-webhook"];
    /** Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization)." */
    readonly patch: operations["orgs/update-webhook"];
  };
  readonly "/orgs/{org}/hooks/{hook_id}/config": {
    /**
     * Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook)."
     *
     * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.
     */
    readonly get: operations["orgs/get-webhook-config-for-org"];
    /**
     * Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook)."
     *
     * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.
     */
    readonly patch: operations["orgs/update-webhook-config-for-org"];
  };
  readonly "/orgs/{org}/hooks/{hook_id}/pings": {
    /** This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook. */
    readonly post: operations["orgs/ping-webhook"];
  };
  readonly "/orgs/{org}/installation": {
    /**
     * Enables an authenticated GitHub App to find the organization's installation information.
     *
     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    readonly get: operations["apps/get-org-installation"];
  };
  readonly "/orgs/{org}/installations": {
    /** Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint. */
    readonly get: operations["orgs/list-app-installations"];
  };
  readonly "/orgs/{org}/interaction-limits": {
    /** Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response. */
    readonly get: operations["interactions/get-restrictions-for-org"];
    /** Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization. */
    readonly put: operations["interactions/set-restrictions-for-org"];
    /** Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions. */
    readonly delete: operations["interactions/remove-restrictions-for-org"];
  };
  readonly "/orgs/{org}/invitations": {
    /** The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`. */
    readonly get: operations["orgs/list-pending-invitations"];
    /**
     * Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.
     *
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
     */
    readonly post: operations["orgs/create-invitation"];
  };
  readonly "/orgs/{org}/invitations/{invitation_id}": {
    /**
     * Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.
     *
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications).
     */
    readonly delete: operations["orgs/cancel-invitation"];
  };
  readonly "/orgs/{org}/invitations/{invitation_id}/teams": {
    /** List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner. */
    readonly get: operations["orgs/list-invitation-teams"];
  };
  readonly "/orgs/{org}/issues": {
    /**
     * List issues in an organization assigned to the authenticated user.
     *
     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
     * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
     * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
     * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
     */
    readonly get: operations["issues/list-for-org"];
  };
  readonly "/orgs/{org}/members": {
    /** List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned. */
    readonly get: operations["orgs/list-members"];
  };
  readonly "/orgs/{org}/members/{username}": {
    /** Check if a user is, publicly or privately, a member of the organization. */
    readonly get: operations["orgs/check-membership-for-user"];
    /** Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories. */
    readonly delete: operations["orgs/remove-member"];
  };
  readonly "/orgs/{org}/memberships/{username}": {
    /** In order to get a user's membership with an organization, the authenticated user must be an organization member. */
    readonly get: operations["orgs/get-membership-for-user"];
    /**
     * Only authenticated organization owners can add a member to the organization or update the member's role.
     *
     * *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
     *
     * *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.
     *
     * **Rate limits**
     *
     * To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
     */
    readonly put: operations["orgs/set-membership-for-user"];
    /**
     * In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
     *
     * If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
     */
    readonly delete: operations["orgs/remove-membership-for-user"];
  };
  readonly "/orgs/{org}/migrations": {
    /** Lists the most recent migrations. */
    readonly get: operations["migrations/list-for-org"];
    /** Initiates the generation of a migration archive. */
    readonly post: operations["migrations/start-for-org"];
  };
  readonly "/orgs/{org}/migrations/{migration_id}": {
    /**
     * Fetches the status of a migration.
     *
     * The `state` of a migration can be one of the following values:
     *
     * *   `pending`, which means the migration hasn't started yet.
     * *   `exporting`, which means the migration is in progress.
     * *   `exported`, which means the migration finished successfully.
     * *   `failed`, which means the migration failed.
     */
    readonly get: operations["migrations/get-status-for-org"];
  };
  readonly "/orgs/{org}/migrations/{migration_id}/archive": {
    /** Fetches the URL to a migration archive. */
    readonly get: operations["migrations/download-archive-for-org"];
    /** Deletes a previous migration archive. Migration archives are automatically deleted after seven days. */
    readonly delete: operations["migrations/delete-archive-for-org"];
  };
  readonly "/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock": {
    /** Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/reference/repos#delete-a-repository) when the migration is complete and you no longer need the source data. */
    readonly delete: operations["migrations/unlock-repo-for-org"];
  };
  readonly "/orgs/{org}/migrations/{migration_id}/repositories": {
    /** List all the repositories for this organization migration. */
    readonly get: operations["migrations/list-repos-for-org"];
  };
  readonly "/orgs/{org}/outside_collaborators": {
    /** List all users who are outside collaborators of an organization. */
    readonly get: operations["orgs/list-outside-collaborators"];
  };
  readonly "/orgs/{org}/outside_collaborators/{username}": {
    /** When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)". */
    readonly put: operations["orgs/convert-member-to-outside-collaborator"];
    /** Removing a user from this list will remove them from all the organization's repositories. */
    readonly delete: operations["orgs/remove-outside-collaborator"];
  };
  readonly "/orgs/{org}/packages/{package_type}/{package_name}": {
    /**
     * Gets a specific package in an organization.
     *
     * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
     * If `package_type` is not `container`, your token must also include the `repo` scope.
     */
    readonly get: operations["packages/get-package-for-organization"];
    /**
     * Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 25 downloads. In this scenario, contact GitHub support for further assistance.
     *
     * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` scope. In addition:
     * - If `package_type` is not `container`, your token must also include the `repo` scope.
     * - If `package_type` is `container`, you must also have admin permissions to the container you want to delete.
     */
    readonly delete: operations["packages/delete-package-for-org"];
  };
  readonly "/orgs/{org}/packages/{package_type}/{package_name}/restore": {
    /**
     * Restores an entire package in an organization.
     *
     * You can restore a deleted package under the following conditions:
     *   - The package was deleted within the last 30 days.
     *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
     *
     * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:write` scope. In addition:
     * - If `package_type` is not `container`, your token must also include the `repo` scope.
     * - If `package_type` is `container`, you must also have admin permissions to the container that you want to restore.
     */
    readonly post: operations["packages/restore-package-for-org"];
  };
  readonly "/orgs/{org}/packages/{package_type}/{package_name}/versions": {
    /**
     * Returns all package versions for a package owned by an organization.
     *
     * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
     * If `package_type` is not `container`, your token must also include the `repo` scope.
     */
    readonly get: operations["packages/get-all-package-versions-for-a-package-owned-by-an-org"];
  };
  readonly "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}": {
    /**
     * Gets a specific package version in an organization.
     *
     * You must authenticate using an access token with the `packages:read` scope.
     * If `package_type` is not `container`, your token must also include the `repo` scope.
     */
    readonly get: operations["packages/get-package-version-for-organization"];
    /**
     * Deletes a specific package version in an organization. If the package is public and the package version has more than 25 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
     *
     * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` scope. In addition:
     * - If `package_type` is not `container`, your token must also include the `repo` scope.
     * - If `package_type` is `container`, you must also have admin permissions to the container you want to delete.
     */
    readonly delete: operations["packages/delete-package-version-for-org"];
  };
  readonly "/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore": {
    /**
     * Restores a specific package version in an organization.
     *
     * You can restore a deleted package under the following conditions:
     *   - The package was deleted within the last 30 days.
     *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
     *
     * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:write` scope. In addition:
     * - If `package_type` is not `container`, your token must also include the `repo` scope.
     * - If `package_type` is `container`, you must also have admin permissions to the container that you want to restore.
     */
    readonly post: operations["packages/restore-package-version-for-org"];
  };
  readonly "/orgs/{org}/projects": {
    /** Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
    readonly get: operations["projects/list-for-org"];
    /** Creates an organization project board. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
    readonly post: operations["projects/create-for-org"];
  };
  readonly "/orgs/{org}/public_members": {
    /** Members of an organization can choose to have their membership publicized or not. */
    readonly get: operations["orgs/list-public-members"];
  };
  readonly "/orgs/{org}/public_members/{username}": {
    readonly get: operations["orgs/check-public-membership-for-user"];
    /**
     * The user can publicize their own membership. (A user cannot publicize the membership for another user.)
     *
     * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
     */
    readonly put: operations["orgs/set-public-membership-for-authenticated-user"];
    readonly delete: operations["orgs/remove-public-membership-for-authenticated-user"];
  };
  readonly "/orgs/{org}/repos": {
    /** Lists repositories for the specified organization. */
    readonly get: operations["repos/list-for-org"];
    /**
     * Creates a new repository in the specified organization. The authenticated user must be a member of the organization.
     *
     * **OAuth scope requirements**
     *
     * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
     *
     * *   `public_repo` scope or `repo` scope to create a public repository
     * *   `repo` scope to create a private repository
     */
    readonly post: operations["repos/create-in-org"];
  };
  readonly "/orgs/{org}/settings/billing/actions": {
    /**
     * Gets the summary of the free and paid GitHub Actions minutes used.
     *
     * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
     *
     * Access tokens must have the `repo` or `admin:org` scope.
     */
    readonly get: operations["billing/get-github-actions-billing-org"];
  };
  readonly "/orgs/{org}/settings/billing/packages": {
    /**
     * Gets the free and paid storage usued for GitHub Packages in gigabytes.
     *
     * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
     *
     * Access tokens must have the `repo` or `admin:org` scope.
     */
    readonly get: operations["billing/get-github-packages-billing-org"];
  };
  readonly "/orgs/{org}/settings/billing/shared-storage": {
    /**
     * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
     *
     * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
     *
     * Access tokens must have the `repo` or `admin:org` scope.
     */
    readonly get: operations["billing/get-shared-storage-billing-org"];
  };
  readonly "/orgs/{org}/team-sync/groups": {
    /**
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * List IdP groups available in an organization. You can limit your page results using the `per_page` parameter. GitHub generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see "[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89)."
     *
     * The `per_page` parameter provides pagination for a list of IdP groups the authenticated user can access in an organization. For example, if the user `octocat` wants to see two groups per page in `octo-org` via cURL, it would look like this:
     */
    readonly get: operations["teams/list-idp-groups-for-org"];
  };
  readonly "/orgs/{org}/teams": {
    /** Lists all teams in an organization that are visible to the authenticated user. */
    readonly get: operations["teams/list"];
    /**
     * To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://help.github.com/en/articles/setting-team-creation-permissions-in-your-organization)."
     *
     * When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)".
     */
    readonly post: operations["teams/create"];
  };
  readonly "/orgs/{org}/teams/{team_slug}": {
    /**
     * Gets a team using the team's `slug`. GitHub generates the `slug` from the team `name`.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
     */
    readonly get: operations["teams/get-by-name"];
    /**
     * To delete a team, the authenticated user must be an organization owner or team maintainer.
     *
     * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
     */
    readonly delete: operations["teams/delete-in-org"];
    /**
     * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
     */
    readonly patch: operations["teams/update-in-org"];
  };
  readonly "/orgs/{org}/teams/{team_slug}/discussions": {
    /**
     * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
     */
    readonly get: operations["teams/list-discussions-in-org"];
    /**
     * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
     */
    readonly post: operations["teams/create-discussion-in-org"];
  };
  readonly "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}": {
    /**
     * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
     */
    readonly get: operations["teams/get-discussion-in-org"];
    /**
     * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
     */
    readonly delete: operations["teams/delete-discussion-in-org"];
    /**
     * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
     */
    readonly patch: operations["teams/update-discussion-in-org"];
  };
  readonly "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments": {
    /**
     * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
     */
    readonly get: operations["teams/list-discussion-comments-in-org"];
    /**
     * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
     */
    readonly post: operations["teams/create-discussion-comment-in-org"];
  };
  readonly "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}": {
    /**
     * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
     */
    readonly get: operations["teams/get-discussion-comment-in-org"];
    /**
     * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
     */
    readonly delete: operations["teams/delete-discussion-comment-in-org"];
    /**
     * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
     */
    readonly patch: operations["teams/update-discussion-comment-in-org"];
  };
  readonly "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions": {
    /**
     * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
     */
    readonly get: operations["reactions/list-for-team-discussion-comment-in-org"];
    /**
     * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
     */
    readonly post: operations["reactions/create-for-team-discussion-comment-in-org"];
  };
  readonly "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}": {
    /**
     * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
     *
     * Delete a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    readonly delete: operations["reactions/delete-for-team-discussion-comment"];
  };
  readonly "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions": {
    /**
     * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
     */
    readonly get: operations["reactions/list-for-team-discussion-in-org"];
    /**
     * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
     */
    readonly post: operations["reactions/create-for-team-discussion-in-org"];
  };
  readonly "/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}": {
    /**
     * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
     *
     * Delete a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    readonly delete: operations["reactions/delete-for-team-discussion"];
  };
  readonly "/orgs/{org}/teams/{team_slug}/invitations": {
    /**
     * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
     */
    readonly get: operations["teams/list-pending-invitations-in-org"];
  };
  readonly "/orgs/{org}/teams/{team_slug}/members": {
    /**
     * Team members will include the members of child teams.
     *
     * To list members in a team, the team must be visible to the authenticated user.
     */
    readonly get: operations["teams/list-members-in-org"];
  };
  readonly "/orgs/{org}/teams/{team_slug}/memberships/{username}": {
    /**
     * Team members will include the members of child teams.
     *
     * To get a user's membership with a team, the team must be visible to the authenticated user.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.
     *
     * **Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
     */
    readonly get: operations["teams/get-membership-for-user-in-org"];
    /**
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.
     *
     * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     *
     * An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.
     *
     * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
     */
    readonly put: operations["teams/add-or-update-membership-for-user-in-org"];
    /**
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
     *
     * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
     */
    readonly delete: operations["teams/remove-membership-for-user-in-org"];
  };
  readonly "/orgs/{org}/teams/{team_slug}/projects": {
    /**
     * Lists the organization projects for a team.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
     */
    readonly get: operations["teams/list-projects-in-org"];
  };
  readonly "/orgs/{org}/teams/{team_slug}/projects/{project_id}": {
    /**
     * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
     */
    readonly get: operations["teams/check-permissions-for-project-in-org"];
    /**
     * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
     */
    readonly put: operations["teams/add-or-update-project-permissions-in-org"];
    /**
     * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
     */
    readonly delete: operations["teams/remove-project-in-org"];
  };
  readonly "/orgs/{org}/teams/{team_slug}/repos": {
    /**
     * Lists a team's repositories visible to the authenticated user.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
     */
    readonly get: operations["teams/list-repos-in-org"];
  };
  readonly "/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}": {
    /**
     * Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
     *
     * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.
     *
     * If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
     */
    readonly get: operations["teams/check-permissions-for-repo-in-org"];
    /**
     * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
     *
     * For more information about the permission levels, see "[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
     */
    readonly put: operations["teams/add-or-update-repo-permissions-in-org"];
    /**
     * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
     */
    readonly delete: operations["teams/remove-repo-in-org"];
  };
  readonly "/orgs/{org}/teams/{team_slug}/team-sync/group-mappings": {
    /**
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * List IdP groups connected to a team on GitHub.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
     */
    readonly get: operations["teams/list-idp-groups-in-org"];
    /**
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
     */
    readonly patch: operations["teams/create-or-update-idp-group-connections-in-org"];
  };
  readonly "/orgs/{org}/teams/{team_slug}/teams": {
    /**
     * Lists the child teams of the team specified by `{team_slug}`.
     *
     * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
     */
    readonly get: operations["teams/list-child-in-org"];
  };
  readonly "/projects/columns/cards/{card_id}": {
    readonly get: operations["projects/get-card"];
    readonly delete: operations["projects/delete-card"];
    readonly patch: operations["projects/update-card"];
  };
  readonly "/projects/columns/cards/{card_id}/moves": {
    readonly post: operations["projects/move-card"];
  };
  readonly "/projects/columns/{column_id}": {
    readonly get: operations["projects/get-column"];
    readonly delete: operations["projects/delete-column"];
    readonly patch: operations["projects/update-column"];
  };
  readonly "/projects/columns/{column_id}/cards": {
    readonly get: operations["projects/list-cards"];
    /**
     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.
     *
     * Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
     */
    readonly post: operations["projects/create-card"];
  };
  readonly "/projects/columns/{column_id}/moves": {
    readonly post: operations["projects/move-column"];
  };
  readonly "/projects/{project_id}": {
    /** Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
    readonly get: operations["projects/get"];
    /** Deletes a project board. Returns a `404 Not Found` status if projects are disabled. */
    readonly delete: operations["projects/delete"];
    /** Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
    readonly patch: operations["projects/update"];
  };
  readonly "/projects/{project_id}/collaborators": {
    /** Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators. */
    readonly get: operations["projects/list-collaborators"];
  };
  readonly "/projects/{project_id}/collaborators/{username}": {
    /** Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator. */
    readonly put: operations["projects/add-collaborator"];
    /** Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator. */
    readonly delete: operations["projects/remove-collaborator"];
  };
  readonly "/projects/{project_id}/collaborators/{username}/permission": {
    /** Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level. */
    readonly get: operations["projects/get-permission-for-user"];
  };
  readonly "/projects/{project_id}/columns": {
    readonly get: operations["projects/list-columns"];
    readonly post: operations["projects/create-column"];
  };
  readonly "/rate_limit": {
    /**
     * **Note:** Accessing this endpoint does not count against your REST API rate limit.
     *
     * **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
     */
    readonly get: operations["rate-limit/get"];
  };
  readonly "/reactions/{reaction_id}": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/).
     *
     * OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments).
     */
    readonly delete: operations["reactions/delete-legacy"];
  };
  readonly "/repos/{owner}/{repo}": {
    /**
     * When you pass the `scarlet-witch-preview` media type, requests to get a repository will also return the repository's code of conduct if it can be detected from the repository's code of conduct file.
     *
     * The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
     */
    readonly get: operations["repos/get"];
    /**
     * Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.
     *
     * If an organization owner has configured the organization to prevent members from deleting organization-owned
     * repositories, you will get a `403 Forbidden` response.
     */
    readonly delete: operations["repos/delete"];
    /** **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/reference/repos#replace-all-repository-topics) endpoint. */
    readonly patch: operations["repos/update"];
  };
  readonly "/repos/{owner}/{repo}/actions/artifacts": {
    /** Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
    readonly get: operations["actions/list-artifacts-for-repo"];
  };
  readonly "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}": {
    /** Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
    readonly get: operations["actions/get-artifact"];
    /** Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */
    readonly delete: operations["actions/delete-artifact"];
  };
  readonly "/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}": {
    /**
     * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
     * the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to
     * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
     * GitHub Apps must have the `actions:read` permission to use this endpoint.
     */
    readonly get: operations["actions/download-artifact"];
  };
  readonly "/repos/{owner}/{repo}/actions/jobs/{job_id}": {
    /** Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
    readonly get: operations["actions/get-job-for-workflow-run"];
  };
  readonly "/repos/{owner}/{repo}/actions/jobs/{job_id}/logs": {
    /**
     * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
     * for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can
     * use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must
     * have the `actions:read` permission to use this endpoint.
     */
    readonly get: operations["actions/download-job-logs-for-workflow-run"];
  };
  readonly "/repos/{owner}/{repo}/actions/permissions": {
    /**
     * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.
     *
     * You must authenticate using an access token with the `repo` scope to use this
     * endpoint. GitHub Apps must have the `administration` repository permission to use this API.
     */
    readonly get: operations["actions/get-github-actions-permissions-repository"];
    /**
     * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository.
     *
     * If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as `allowed_actions` to `selected` actions, then you cannot override them for the repository.
     *
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
     */
    readonly put: operations["actions/set-github-actions-permissions-repository"];
  };
  readonly "/repos/{owner}/{repo}/actions/permissions/selected-actions": {
    /**
     * Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
     *
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
     */
    readonly get: operations["actions/get-allowed-actions-repository"];
    /**
     * Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
     *
     * If the repository belongs to an organization or enterprise that has `selected` actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.
     *
     * To use the `patterns_allowed` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories.
     *
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
     */
    readonly put: operations["actions/set-allowed-actions-repository"];
  };
  readonly "/repos/{owner}/{repo}/actions/runners": {
    /** Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint. */
    readonly get: operations["actions/list-self-hosted-runners-for-repo"];
  };
  readonly "/repos/{owner}/{repo}/actions/runners/downloads": {
    /**
     * Lists binaries for the runner application that you can download and run.
     *
     * You must authenticate using an access token with the `repo` scope to use this endpoint.
     */
    readonly get: operations["actions/list-runner-applications-for-repo"];
  };
  readonly "/repos/{owner}/{repo}/actions/runners/registration-token": {
    /**
     * Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate
     * using an access token with the `repo` scope to use this endpoint.
     *
     * #### Example using registration token
     *
     * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
     *
     * ```
     * ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN
     * ```
     */
    readonly post: operations["actions/create-registration-token-for-repo"];
  };
  readonly "/repos/{owner}/{repo}/actions/runners/remove-token": {
    /**
     * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.
     * You must authenticate using an access token with the `repo` scope to use this endpoint.
     *
     * #### Example using remove token
     *
     * To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.
     *
     * ```
     * ./config.sh remove --token TOKEN
     * ```
     */
    readonly post: operations["actions/create-remove-token-for-repo"];
  };
  readonly "/repos/{owner}/{repo}/actions/runners/{runner_id}": {
    /**
     * Gets a specific self-hosted runner configured in a repository.
     *
     * You must authenticate using an access token with the `repo` scope to use this
     * endpoint.
     */
    readonly get: operations["actions/get-self-hosted-runner-for-repo"];
    /**
     * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
     *
     * You must authenticate using an access token with the `repo`
     * scope to use this endpoint.
     */
    readonly delete: operations["actions/delete-self-hosted-runner-from-repo"];
  };
  readonly "/repos/{owner}/{repo}/actions/runs": {
    /**
     * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
     *
     * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     */
    readonly get: operations["actions/list-workflow-runs-for-repo"];
  };
  readonly "/repos/{owner}/{repo}/actions/runs/{run_id}": {
    /** Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
    readonly get: operations["actions/get-workflow-run"];
    /**
     * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is
     * private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use
     * this endpoint.
     */
    readonly delete: operations["actions/delete-workflow-run"];
  };
  readonly "/repos/{owner}/{repo}/actions/runs/{run_id}/approvals": {
    /** Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
    readonly get: operations["actions/get-reviews-for-run"];
  };
  readonly "/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts": {
    /** Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
    readonly get: operations["actions/list-workflow-run-artifacts"];
  };
  readonly "/repos/{owner}/{repo}/actions/runs/{run_id}/cancel": {
    /** Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */
    readonly post: operations["actions/cancel-workflow-run"];
  };
  readonly "/repos/{owner}/{repo}/actions/runs/{run_id}/jobs": {
    /** Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters). */
    readonly get: operations["actions/list-jobs-for-workflow-run"];
  };
  readonly "/repos/{owner}/{repo}/actions/runs/{run_id}/logs": {
    /**
     * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
     * `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use
     * this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have
     * the `actions:read` permission to use this endpoint.
     */
    readonly get: operations["actions/download-workflow-run-logs"];
    /** Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */
    readonly delete: operations["actions/delete-workflow-run-logs"];
  };
  readonly "/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments": {
    /**
     * Get all deployment environments for a workflow run that are waiting for protection rules to pass.
     *
     * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     */
    readonly get: operations["actions/get-pending-deployments-for-run"];
    /**
     * Approve or reject pending deployments that are waiting on approval by a required reviewer.
     *
     * Anyone with read access to the repository contents and deployments can use this endpoint.
     */
    readonly post: operations["actions/review-pending-deployments-for-run"];
  };
  readonly "/repos/{owner}/{repo}/actions/runs/{run_id}/rerun": {
    /** Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */
    readonly post: operations["actions/re-run-workflow"];
  };
  readonly "/repos/{owner}/{repo}/actions/runs/{run_id}/timing": {
    /**
     * Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
     *
     * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     */
    readonly get: operations["actions/get-workflow-run-usage"];
  };
  readonly "/repos/{owner}/{repo}/actions/secrets": {
    /** Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
    readonly get: operations["actions/list-repo-secrets"];
  };
  readonly "/repos/{owner}/{repo}/actions/secrets/public-key": {
    /** Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
    readonly get: operations["actions/get-repo-public-key"];
  };
  readonly "/repos/{owner}/{repo}/actions/secrets/{secret_name}": {
    /** Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
    readonly get: operations["actions/get-repo-secret"];
    /**
     * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
     * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
     * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
     * this endpoint.
     *
     * #### Example encrypting a secret using Node.js
     *
     * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
     *
     * ```
     * const sodium = require('tweetsodium');
     *
     * const key = "base64-encoded-public-key";
     * const value = "plain-text-secret";
     *
     * // Convert the message and key to Uint8Array's (Buffer implements that interface)
     * const messageBytes = Buffer.from(value);
     * const keyBytes = Buffer.from(key, 'base64');
     *
     * // Encrypt using LibSodium.
     * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
     *
     * // Base64 the encrypted secret
     * const encrypted = Buffer.from(encryptedBytes).toString('base64');
     *
     * console.log(encrypted);
     * ```
     *
     *
     * #### Example encrypting a secret using Python
     *
     * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.
     *
     * ```
     * from base64 import b64encode
     * from nacl import encoding, public
     *
     * def encrypt(public_key: str, secret_value: str) -> str:
     *   """Encrypt a Unicode string using the public key."""
     *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
     *   sealed_box = public.SealedBox(public_key)
     *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
     *   return b64encode(encrypted).decode("utf-8")
     * ```
     *
     * #### Example encrypting a secret using C#
     *
     * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
     *
     * ```
     * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
     * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
     *
     * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
     *
     * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
     * ```
     *
     * #### Example encrypting a secret using Ruby
     *
     * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
     *
     * ```ruby
     * require "rbnacl"
     * require "base64"
     *
     * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
     * public_key = RbNaCl::PublicKey.new(key)
     *
     * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
     * encrypted_secret = box.encrypt("my_secret")
     *
     * # Print the base64 encoded secret
     * puts Base64.strict_encode64(encrypted_secret)
     * ```
     */
    readonly put: operations["actions/create-or-update-repo-secret"];
    /** Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
    readonly delete: operations["actions/delete-repo-secret"];
  };
  readonly "/repos/{owner}/{repo}/actions/workflows": {
    /** Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
    readonly get: operations["actions/list-repo-workflows"];
  };
  readonly "/repos/{owner}/{repo}/actions/workflows/{workflow_id}": {
    /** Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
    readonly get: operations["actions/get-workflow"];
  };
  readonly "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable": {
    /**
     * Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
     *
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     */
    readonly put: operations["actions/disable-workflow"];
  };
  readonly "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches": {
    /**
     * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
     *
     * You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
     *
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see "[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)."
     */
    readonly post: operations["actions/create-workflow-dispatch"];
  };
  readonly "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable": {
    /**
     * Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
     *
     * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
     */
    readonly put: operations["actions/enable-workflow"];
  };
  readonly "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs": {
    /**
     * List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
     *
     * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
     */
    readonly get: operations["actions/list-workflow-runs"];
  };
  readonly "/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing": {
    /**
     * Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
     *
     * You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     */
    readonly get: operations["actions/get-workflow-usage"];
  };
  readonly "/repos/{owner}/{repo}/assignees": {
    /** Lists the [available assignees](https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository. */
    readonly get: operations["issues/list-assignees"];
  };
  readonly "/repos/{owner}/{repo}/assignees/{assignee}": {
    /**
     * Checks if a user has permission to be assigned to an issue in this repository.
     *
     * If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
     *
     * Otherwise a `404` status code is returned.
     */
    readonly get: operations["issues/check-user-can-be-assigned"];
  };
  readonly "/repos/{owner}/{repo}/automated-security-fixes": {
    /** Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)". */
    readonly put: operations["repos/enable-automated-security-fixes"];
    /** Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)". */
    readonly delete: operations["repos/disable-automated-security-fixes"];
  };
  readonly "/repos/{owner}/{repo}/branches": {
    readonly get: operations["repos/list-branches"];
  };
  readonly "/repos/{owner}/{repo}/branches/{branch}": {
    readonly get: operations["repos/get-branch"];
  };
  readonly "/repos/{owner}/{repo}/branches/{branch}/protection": {
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    readonly get: operations["repos/get-branch-protection"];
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Protecting a branch requires admin or owner permissions to the repository.
     *
     * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
     *
     * **Note**: The list of users, apps, and teams in total is limited to 100 items.
     */
    readonly put: operations["repos/update-branch-protection"];
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    readonly delete: operations["repos/delete-branch-protection"];
  };
  readonly "/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins": {
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    readonly get: operations["repos/get-admin-branch-protection"];
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
     */
    readonly post: operations["repos/set-admin-branch-protection"];
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
     */
    readonly delete: operations["repos/delete-admin-branch-protection"];
  };
  readonly "/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews": {
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    readonly get: operations["repos/get-pull-request-review-protection"];
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    readonly delete: operations["repos/delete-pull-request-review-protection"];
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
     *
     * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
     */
    readonly patch: operations["repos/update-pull-request-review-protection"];
  };
  readonly "/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures": {
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://help.github.com/articles/signing-commits-with-gpg) in GitHub Help.
     *
     * **Note**: You must enable branch protection to require signed commits.
     */
    readonly get: operations["repos/get-commit-signature-protection"];
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
     */
    readonly post: operations["repos/create-commit-signature-protection"];
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
     */
    readonly delete: operations["repos/delete-commit-signature-protection"];
  };
  readonly "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks": {
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    readonly get: operations["repos/get-status-checks-protection"];
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    readonly delete: operations["repos/remove-status-check-protection"];
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
     */
    readonly patch: operations["repos/update-status-check-protection"];
  };
  readonly "/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts": {
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    readonly get: operations["repos/get-all-status-check-contexts"];
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    readonly put: operations["repos/set-status-check-contexts"];
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    readonly post: operations["repos/add-status-check-contexts"];
    /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    readonly delete: operations["repos/remove-status-check-contexts"];
  };
  readonly "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions": {
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Lists who has access to this protected branch.
     *
     * **Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.
     */
    readonly get: operations["repos/get-access-restrictions"];
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Disables the ability to restrict who can push to this branch.
     */
    readonly delete: operations["repos/delete-access-restrictions"];
  };
  readonly "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps": {
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
     */
    readonly get: operations["repos/get-apps-with-access-to-protected-branch"];
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
     *
     * | Type    | Description                                                                                                                                                |
     * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     */
    readonly put: operations["repos/set-app-access-restrictions"];
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Grants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
     *
     * | Type    | Description                                                                                                                                                |
     * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     */
    readonly post: operations["repos/add-app-access-restrictions"];
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
     *
     * | Type    | Description                                                                                                                                                |
     * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     */
    readonly delete: operations["repos/remove-app-access-restrictions"];
  };
  readonly "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams": {
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Lists the teams who have push access to this branch. The list includes child teams.
     */
    readonly get: operations["repos/get-teams-with-access-to-protected-branch"];
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
     *
     * | Type    | Description                                                                                                                                |
     * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
     * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     */
    readonly put: operations["repos/set-team-access-restrictions"];
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Grants the specified teams push access for this branch. You can also give push access to child teams.
     *
     * | Type    | Description                                                                                                                                |
     * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
     * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     */
    readonly post: operations["repos/add-team-access-restrictions"];
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Removes the ability of a team to push to this branch. You can also remove push access for child teams.
     *
     * | Type    | Description                                                                                                                                         |
     * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     */
    readonly delete: operations["repos/remove-team-access-restrictions"];
  };
  readonly "/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users": {
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Lists the people who have push access to this branch.
     */
    readonly get: operations["repos/get-users-with-access-to-protected-branch"];
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
     *
     * | Type    | Description                                                                                                                   |
     * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
     * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     */
    readonly put: operations["repos/set-user-access-restrictions"];
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Grants the specified people push access for this branch.
     *
     * | Type    | Description                                                                                                                   |
     * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
     * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     */
    readonly post: operations["repos/add-user-access-restrictions"];
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Removes the ability of a user to push to this branch.
     *
     * | Type    | Description                                                                                                                                   |
     * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
     * | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
     */
    readonly delete: operations["repos/remove-user-access-restrictions"];
  };
  readonly "/repos/{owner}/{repo}/branches/{branch}/rename": {
    /**
     * Renames a branch in a repository.
     *
     * **Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)".
     *
     * The permissions required to use this endpoint depends on whether you are renaming the default branch.
     *
     * To rename a non-default branch:
     *
     * * Users must have push access.
     * * GitHub Apps must have the `contents:write` repository permission.
     *
     * To rename the default branch:
     *
     * * Users must have admin or owner permissions.
     * * GitHub Apps must have the `administration:write` repository permission.
     */
    readonly post: operations["repos/rename-branch"];
  };
  readonly "/repos/{owner}/{repo}/check-runs": {
    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
     *
     * Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.
     *
     * In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
     */
    readonly post: operations["checks/create"];
  };
  readonly "/repos/{owner}/{repo}/check-runs/{check_run_id}": {
    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
     *
     * Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
     */
    readonly get: operations["checks/get"];
    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
     *
     * Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.
     */
    readonly patch: operations["checks/update"];
  };
  readonly "/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations": {
    /** Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository. */
    readonly get: operations["checks/list-annotations"];
  };
  readonly "/repos/{owner}/{repo}/check-suites": {
    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
     *
     * By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites)". Your GitHub App must have the `checks:write` permission to create check suites.
     */
    readonly post: operations["checks/create-suite"];
  };
  readonly "/repos/{owner}/{repo}/check-suites/preferences": {
    /** Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites. */
    readonly patch: operations["checks/set-suites-preferences"];
  };
  readonly "/repos/{owner}/{repo}/check-suites/{check_suite_id}": {
    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
     *
     * Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
     */
    readonly get: operations["checks/get-suite"];
  };
  readonly "/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs": {
    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
     *
     * Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
     */
    readonly get: operations["checks/list-for-suite"];
  };
  readonly "/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest": {
    /**
     * Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
     *
     * To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
     */
    readonly post: operations["checks/rerequest-suite"];
  };
  readonly "/repos/{owner}/{repo}/code-scanning/alerts": {
    /**
     * Lists all open code scanning alerts for the default branch (usually `main`
     * or `master`). You must use an access token with the `security_events` scope to use
     * this endpoint. GitHub Apps must have the `security_events` read permission to use
     * this endpoint.
     *
     * The response includes a `most_recent_instance` object.
     * This provides details of the most recent instance of this alert
     * for the the default branch or for the specified Git reference
     * (if you used `ref` in the request).
     */
    readonly get: operations["code-scanning/list-alerts-for-repo"];
  };
  readonly "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}": {
    /**
     * Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
     *
     * **Deprecation notice**:
     * The instances field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The same information can now be retrieved via a GET request to the URL specified by `instances_url`.
     */
    readonly get: operations["code-scanning/get-alert"];
    /** Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint. */
    readonly patch: operations["code-scanning/update-alert"];
  };
  readonly "/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances": {
    /** Lists all instances of the specified code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint. */
    readonly get: operations["code-scanning/list-alerts-instances"];
  };
  readonly "/repos/{owner}/{repo}/code-scanning/analyses": {
    /**
     * Lists the details of all code scanning analyses for a repository,
     * starting with the most recent.
     * The response is paginated and you can use the `page` and `per_page` parameters
     * to list the analyses you're interested in.
     * By default 30 analyses are listed per page.
     *
     * The `rules_count` field in the response give the number of rules
     * that were run in the analysis.
     * For very old analyses this data is not available,
     * and `0` is returned in this field.
     *
     * You must use an access token with the `security_events` scope to use this endpoint.
     * GitHub Apps must have the `security_events` read permission to use this endpoint.
     *
     * **Deprecation notice**:
     * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
     */
    readonly get: operations["code-scanning/list-recent-analyses"];
  };
  readonly "/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}": {
    /**
     * Gets a specified code scanning analysis for a repository.
     * You must use an access token with the `security_events` scope to use this endpoint.
     * GitHub Apps must have the `security_events` read permission to use this endpoint.
     *
     * The default JSON response contains fields that describe the analysis.
     * This includes the Git reference and commit SHA to which the analysis relates,
     * the datetime of the analysis, the name of the code scanning tool,
     * and the number of alerts.
     *
     * The `rules_count` field in the default response give the number of rules
     * that were run in the analysis.
     * For very old analyses this data is not available,
     * and `0` is returned in this field.
     *
     * If you use the Accept header `application/sarif+json`,
     * the response contains the analysis data that was uploaded.
     * This is formatted as
     * [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).
     * For an example response, see "[Custom media type for code scanning](#custom-media-type-for-code-scanning)."
     *
     * **Deprecation notice**:
     * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
     */
    readonly get: operations["code-scanning/get-analysis"];
    /**
     * Deletes a specified code scanning analysis from a repository. For
     * private repositories, you must use an access token with the `repo` scope. For public repositories,
     * you must use an access token with `public_repo` and `repo:security_events` scopes.
     * GitHub Apps must have the `security_events` write permission to use this endpoint.
     *
     * You can delete one analysis at a time.
     * To delete a series of analyses, start with the most recent analysis and work backwards.
     * Conceptually, the process is similar to the undo function in a text editor.
     *
     * When you list the analyses for a repository,
     * one or more will be identified as deletable in the response:
     *
     * ```
     * "deletable": true
     * ```
     *
     * An analysis is deletable when it's the most recent in a set of analyses.
     * Typically, a repository will have multiple sets of analyses
     * for each enabled code scanning tool,
     * where a set is determined by a unique combination of analysis values:
     *
     * * `ref`
     * * `tool`
     * * `analysis_key`
     * * `environment`
     *
     * If you attempt to delete an analysis that is not the most recent in a set,
     * you'll get a 400 response with the message:
     *
     * ```
     * Analysis specified is not deletable.
     * ```
     *
     * The response from a successful `DELETE` operation provides you with
     * two alternative URLs for deleting the next analysis in the set
     * (see the example default response below).
     * Use the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis
     * in the set. This is a useful option if you want to preserve at least one analysis
     * for the specified tool in your repository.
     * Use the `confirm_delete_url` URL if you are content to remove all analyses for a tool.
     * When you delete the last analysis in a set the value of `next_analysis_url` and `confirm_delete_url`
     * in the 200 response is `null`.
     *
     * As an example of the deletion process,
     * let's imagine that you added a workflow that configured a particular code scanning tool
     * to analyze the code in a repository. This tool has added 15 analyses:
     * 10 on the default branch, and another 5 on a topic branch.
     * You therefore have two separate sets of analyses for this tool.
     * You've now decided that you want to remove all of the analyses for the tool.
     * To do this you must make 15 separate deletion requests.
     * To start, you must find the deletable analysis for one of the sets,
     * step through deleting the analyses in that set,
     * and then repeat the process for the second set.
     * The procedure therefore consists of a nested loop:
     *
     * **Outer loop**:
     * * List the analyses for the repository, filtered by tool.
     * * Parse this list to find a deletable analysis. If found:
     *
     *   **Inner loop**:
     *   * Delete the identified analysis.
     *   * Parse the response for the value of `next_analysis_url` and, if found, use this in the next iteration.
     *
     * The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `next_analysis_url` value. Alternatively, you could use the `confirm_delete_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.
     */
    readonly delete: operations["code-scanning/delete-analysis"];
  };
  readonly "/repos/{owner}/{repo}/code-scanning/sarifs": {
    /**
     * Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.
     *
     * You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:
     *
     * ```
     * gzip -c analysis-data.sarif | base64
     * ```
     *
     * SARIF upload supports a maximum of 1000 results per analysis run. Any results over this limit are ignored. Typically, but not necessarily, a SARIF file contains a single run of a single tool. If a code scanning tool generates too many results, you should update the analysis configuration to run only the most important rules or queries.
     *
     * The `202 Accepted`, response includes an `id` value.
     * You can use this ID to check the status of the upload by using this for the `/sarifs/{sarif_id}` endpoint.
     * For more information, see "[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload)."
     */
    readonly post: operations["code-scanning/upload-sarif"];
  };
  readonly "/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}": {
    /** Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository)." You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint. */
    readonly get: operations["code-scanning/get-sarif"];
  };
  readonly "/repos/{owner}/{repo}/collaborators": {
    /**
     * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
     *
     * Team members will include the members of child teams.
     */
    readonly get: operations["repos/list-collaborators"];
  };
  readonly "/repos/{owner}/{repo}/collaborators/{username}": {
    /**
     * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
     *
     * Team members will include the members of child teams.
     */
    readonly get: operations["repos/check-collaborator"];
    /**
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
     *
     * For more information the permission levels, see "[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
     *
     * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
     *
     * The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/rest/reference/repos#invitations).
     *
     * **Rate limits**
     *
     * To prevent abuse, you are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
     */
    readonly put: operations["repos/add-collaborator"];
    readonly delete: operations["repos/remove-collaborator"];
  };
  readonly "/repos/{owner}/{repo}/collaborators/{username}/permission": {
    /** Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`. */
    readonly get: operations["repos/get-collaborator-permission-level"];
  };
  readonly "/repos/{owner}/{repo}/comments": {
    /**
     * Commit Comments use [these custom media types](https://docs.github.com/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/rest/overview/media-types/).
     *
     * Comments are ordered by ascending ID.
     */
    readonly get: operations["repos/list-commit-comments-for-repo"];
  };
  readonly "/repos/{owner}/{repo}/comments/{comment_id}": {
    readonly get: operations["repos/get-commit-comment"];
    readonly delete: operations["repos/delete-commit-comment"];
    readonly patch: operations["repos/update-commit-comment"];
  };
  readonly "/repos/{owner}/{repo}/comments/{comment_id}/reactions": {
    /** List the reactions to a [commit comment](https://docs.github.com/rest/reference/repos#comments). */
    readonly get: operations["reactions/list-for-commit-comment"];
    /** Create a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this commit comment. */
    readonly post: operations["reactions/create-for-commit-comment"];
  };
  readonly "/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}": {
    /**
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.
     *
     * Delete a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
     */
    readonly delete: operations["reactions/delete-for-commit-comment"];
  };
  readonly "/repos/{owner}/{repo}/commits": {
    /**
     * **Signature verification object**
     *
     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
     *
     * | Name | Type | Description |
     * | ---- | ---- | ----------- |
     * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
     * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
     * | `signature` | `string` | The signature that was extracted from the commit. |
     * | `payload` | `string` | The value that was signed. |
     *
     * These are the possible values for `reason` in the `verification` object:
     *
     * | Value | Description |
     * | ----- | ----------- |
     * | `expired_key` | The key that made the signature is expired. |
     * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
     * | `gpgverify_error` | There was an error communicating with the signature verification service. |
     * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
     * | `unsigned` | The object does not include a signature. |
     * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
     * | `no_user` | No user was associated with the `committer` email address in the commit. |
     * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
     * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
     * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
     * | `malformed_signature` | There was an error parsing the signature. |
     * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
     * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     */
    readonly get: operations["repos/list-commits"];
  };
  readonly "/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head": {
    /**
     * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
     */
    readonly get: operations["repos/list-branches-for-head-commit"];
  };
  readonly "/repos/{owner}/{repo}/commits/{commit_sha}/comments": {
    /** Use the `:commit_sha` to specify the commit that will have its comments listed. */
    readonly get: operations["repos/list-comments-for-commit"];
    /**
     * Create a comment for a commit using its `:commit_sha`.
     *
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
     */
    readonly post: operations["repos/create-commit-comment"];
  };
  readonly "/repos/{owner}/{repo}/commits/{commit_sha}/pulls": {
    /** Lists all pull requests containing the provided commit SHA, which can be from any point in the commit history. The results will include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests) endpoint. */
    readonly get: operations["repos/list-pull-requests-associated-with-commit"];
  };
  readonly "/repos/{owner}/{repo}/commits/{ref}": {
    /**
     * Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
     *
     * **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
     *
     * You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.
     *
     * To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
     *
     * **Signature verification object**
     *
     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
     *
     * | Name | Type | Description |
     * | ---- | ---- | ----------- |
     * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
     * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
     * | `signature` | `string` | The signature that was extracted from the commit. |
     * | `payload` | `string` | The value that was signed. |
     *
     * These are the possible values for `reason` in the `verification` object:
     *
     * | Value | Description |
     * | ----- | ----------- |
     * | `expired_key` | The key that made the signature is expired. |
     * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
     * | `gpgverify_error` | There was an error communicating with the signature verification service. |
     * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
     * | `unsigned` | The object does not include a signature. |
     * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
     * | `no_user` | No user was associated with the `committer` email address in the commit. |
     * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
     * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
     * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
     * | `malformed_signature` | There was an error parsing the signature. |
     * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
     * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     */
    readonly get: operations["repos/get-commit"];
  };
  readonly "/repos/{owner}/{repo}/commits/{ref}/check-runs": {
    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
     *
     * Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
     */
    readonly get: operations["checks/list-for-ref"];
  };
  readonly "/repos/{owner}/{repo}/commits/{ref}/check-suites": {
    /**
     * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
     *
     * Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
     */
    readonly get: operations["checks/list-suites-for-ref"];
  };
  readonly "/repos/{owner}/{repo}/commits/{ref}/status": {
    /**
     * Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
     *
     * The most recent status for each context is returned, up to 100. This field [paginates](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination) if there are over 100 contexts.
     *
     * Additionally, a combined `state` is returned. The `state` is one of:
     *
     * *   **failure** if any of the contexts report as `error` or `failure`
     * *   **pending** if there are no statuses or a context is `pending`
     * *   **success** if the latest status for all contexts is `success`
     */
    readonly get: operations["repos/get-combined-status-for-ref"];
  };
  readonly "/repos/{owner}/{repo}/commits/{ref}/statuses": {
    /**
     * Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
     *
     * This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
     */
    readonly get: operations["repos/list-commit-statuses-for-ref"];
  };
  readonly "/repos/{owner}/{repo}/community/code_of_conduct": {
    /**
     * Returns the contents of the repository's code of conduct file, if one is detected.
     *
     * A code of conduct is detected if there is a file named `CODE_OF_CONDUCT` in the root directory of the repository. GitHub detects which code of conduct it is using fuzzy matching.
     */
    readonly get: operations["codes-of-conduct/get-for-repo"];
  };
  readonly "/repos/{owner}/{repo}/community/profile": {
    /**
     * This endpoint will return all community profile metrics, including an
     * overall health score, repository description, the presence of documentation, detected
     * code of conduct, detected license, and the presence of ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE,
     * README, and CONTRIBUTING files.
     *
     * The `health_percentage` score is defined as a percentage of how many of
     * these four documents are present: README, CONTRIBUTING, LICENSE, and
     * CODE_OF_CONDUCT. For example, if all four documents are present, then
     * the `health_percentage` is `100`. If only one is present, then the
     * `health_percentage` is `25`.
     *
     * `content_reports_enabled` is only returned for organization-owned repositories.
     */
    readonly get: operations["repos/get-community-profile-metrics"];
  };
  readonly "/repos/{owner}/{repo}/compare/{base}...{head}": {
    /**
     * Both `:base` and `:head` must be branch names in `:repo`. To compare branches across other repositories in the same network as `:repo`, use the format `<USERNAME>:branch`.
     *
     * The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
     *
     * The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
     *
     * **Working with large comparisons**
     *
     * The response will include a comparison of up to 250 commits. If you are working with a larger commit range, you can use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) to enumerate all commits in the range.
     *
     * For comparisons with extremely large diffs, you may receive an error response indicating that the diff took too long
     * to generate. You can typically resolve this error by using a smaller commit range.
     *
     * **Signature verification object**
     *
     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
     *
     * | Name | Type | Description |
     * | ---- | ---- | ----------- |
     * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
     * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
     * | `signature` | `string` | The signature that was extracted from the commit. |
     * | `payload` | `string` | The value that was signed. |
     *
     * These are the possible values for `reason` in the `verification` object:
     *
     * | Value | Description |
     * | ----- | ----------- |
     * | `expired_key` | The key that made the signature is expired. |
     * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
     * | `gpgverify_error` | There was an error communicating with the signature verification service. |
     * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
     * | `unsigned` | The object does not include a signature. |
     * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
     * | `no_user` | No user was associated with the `committer` email address in the commit. |
     * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
     * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
     * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
     * | `malformed_signature` | There was an error parsing the signature. |
     * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
     * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     */
    readonly get: operations["repos/compare-commits"];
  };
  readonly "/repos/{owner}/{repo}/contents/{path}": {
    /**
     * Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit
     * `:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories.
     *
     * Files and symlinks support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) for
     * retrieving the raw content or rendered HTML (when supported). All content types support [a custom media
     * type](https://docs.github.com/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent
     * object format.
     *
     * **Note**:
     * *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/reference/git#trees).
     * *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees
     * API](https://docs.github.com/rest/reference/git#get-a-tree).
     * *   This API supports files up to 1 megabyte in size.
     *
     * #### If the content is a directory
     * The response will be an array of objects, one object for each item in the directory.
     * When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value
     * _should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).
     * In the next major version of the API, the type will be returned as "submodule".
     *
     * #### If the content is a symlink
     * If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the
     * API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object
     * describing the symlink itself.
     *
     * #### If the content is a submodule
     * The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific
     * commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out
     * the submodule at that specific commit.
     *
     * If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the
     * github.com URLs (`html_url` and `_links["html"]`) will have null values.
     */
    readonly get: operations["repos/get-content"];
    /** Creates a new file or replaces an existing file in a repository. */
    readonly put: operations["repos/create-or-update-file-contents"];
    /**
     * Deletes a file in a repository.
     *
     * You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
     *
     * The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
     *
     * You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
     */
    readonly delete: operations["repos/delete-file"];
  };
  readonly "/repos/{owner}/{repo}/contributors": {
    /**
     * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.
     *
     * GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
     */
    readonly get: operations["repos/list-contributors"];
  };
  readonly "/repos/{owner}/{repo}/deployments": {
    /** Simple filtering of deployments is available via query parameters: */
    readonly get: operations["repos/list-deployments"];
    /**
     * Deployments offer a few configurable parameters with certain defaults.
     *
     * The `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them
     * before we merge a pull request.
     *
     * The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have
     * multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter
     * makes it easier to track which environments have requested deployments. The default environment is `production`.
     *
     * The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
     * the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
     * the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
     * return a failure response.
     *
     * By default, [commit statuses](https://docs.github.com/rest/reference/repos#statuses) for every submitted context must be in a `success`
     * state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to
     * specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
     * not require any contexts or create any commit statuses, the deployment will always succeed.
     *
     * The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text
     * field that will be passed on when a deployment event is dispatched.
     *
     * The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might
     * be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an
     * application with debugging enabled.
     *
     * Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref.
     *
     * #### Merged branch response
     * You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
     * a deployment. This auto-merge happens when:
     * *   Auto-merge option is enabled in the repository
     * *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
     * *   There are no merge conflicts
     *
     * If there are no new commits in the base branch, a new request to create a deployment should give a successful
     * response.
     *
     * #### Merge conflict response
     * This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't
     * be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.
     *
     * #### Failed commit status checks
     * This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`
     * status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.
     */
    readonly post: operations["repos/create-deployment"];
  };
  readonly "/repos/{owner}/{repo}/deployments/{deployment_id}": {
    readonly get: operations["repos/get-deployment"];
    /**
     * To ensure there can always be an active deployment, you can only delete an _inactive_ deployment. Anyone with `repo` or `repo_deployment` scopes can delete an inactive deployment.
     *
     * To set a deployment as inactive, you must:
     *
     * *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
     * *   Mark the active deployment as inactive by adding any non-successful deployment status.
     *
     * For more information, see "[Create a deployment](https://docs.github.com/rest/reference/repos/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/rest/reference/repos#create-a-deployment-status)."
     */
    readonly delete: operations["repos/delete-deployment"];
  };
  readonly "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses": {
    /** Users with pull access can view deployment statuses for a deployment: */
    readonly get: operations["repos/list-deployment-statuses"];
    /**
     * Users with `push` access can create deployment statuses for a given deployment.
     *
     * GitHub Apps require `read & write` access to "Deployments" and `read-only` access to "Repo contents" (for private repos). OAuth Apps require the `repo_deployment` scope.
     */
    readonly post: operations["repos/create-deployment-status"];
  };
  readonly "/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}": {
    /** Users with pull access can view a deployment status for a deployment: */
    readonly get: operations["repos/get-deployment-status"];
  };
  readonly "/repos/{owner}/{repo}/dispatches": {
    /**
     * You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch)."
     *
     * The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.
     *
     * This endpoint requires write access to the repository by providing either:
     *
     *   - Personal access tokens with `repo` scope. For more information, see "[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)" in the GitHub Help documentation.
     *   - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.
     *
     * This input example shows how you can use the `client_payload` as a test to debug your workflow.
     */
    readonly post: operations["repos/create-dispatch-event"];
  };
  readonly "/repos/{owner}/{repo}/environments": {
    /**
     * Get all environments for a repository.
     *
     * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
     */
    readonly get: operations["repos/get-all-environments"];
  };
  readonly "/repos/{owner}/{repo}/environments/{environment_name}": {
    /** Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
    readonly get: operations["repos/get-environment"];
    /**
     * Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)."
     *
     * **Note:** Although you can use this operation to specify that only branches that match specified name patterns can deploy to this environment, you must use the UI to set the name patterns. For more information, see "[Environments](/actions/reference/environments#deployment-branches)."
     *
     * **Note:** To create or update secrets for an environment, see "[Secrets](/rest/reference/actions#secrets)."
     *
     * You must authenticate using an access token with the repo scope to use this endpoint.
     */
    readonly put: operations["repos/create-or-update-environment"];
    /** You must authenticate using an access token with the repo scope to use this endpoint. */
    readonly delete: operations["repos/delete-an-environment"];
  };
  readonly "/repos/{owner}/{repo}/events": {
    readonly get: operations["activity/list-repo-events"];
  };
  readonly "/repos/{owner}/{repo}/forks": {
    readonly get: operations["repos/list-forks"];
    /**
     * Create a fork for the authenticated user.
     *
     * **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com).
     */
    readonly post: operations["repos/create-fork"];
  };
  readonly "/repos/{owner}/{repo}/git/blobs": {
    readonly post: operations["git/create-blob"];
  };
  readonly "/repos/{owner}/{repo}/git/blobs/{file_sha}": {
    /**
     * The `content` in the response will always be Base64 encoded.
     *
     * _Note_: This API supports blobs up to 100 megabytes in size.
     */
    readonly get: operations["git/get-blob"];
  };
  readonly "/repos/{owner}/{repo}/git/commits": {
    /**
     * Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
     *
     * **Signature verification object**
     *
     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
     *
     * | Name | Type | Description |
     * | ---- | ---- | ----------- |
     * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
     * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
     * | `signature` | `string` | The signature that was extracted from the commit. |
     * | `payload` | `string` | The value that was signed. |
     *
     * These are the possible values for `reason` in the `verification` object:
     *
     * | Value | Description |
     * | ----- | ----------- |
     * | `expired_key` | The key that made the signature is expired. |
     * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
     * | `gpgverify_error` | There was an error communicating with the signature verification service. |
     * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
     * | `unsigned` | The object does not include a signature. |
     * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
     * | `no_user` | No user was associated with the `committer` email address in the commit. |
     * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
     * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
     * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
     * | `malformed_signature` | There was an error parsing the signature. |
     * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
     * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     */
    readonly post: operations["git/create-commit"];
  };
  readonly "/repos/{owner}/{repo}/git/commits/{commit_sha}": {
    /**
     * Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
     *
     * **Signature verification object**
     *
     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
     *
     * | Name | Type | Description |
     * | ---- | ---- | ----------- |
     * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
     * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
     * | `signature` | `string` | The signature that was extracted from the commit. |
     * | `payload` | `string` | The value that was signed. |
     *
     * These are the possible values for `reason` in the `verification` object:
     *
     * | Value | Description |
     * | ----- | ----------- |
     * | `expired_key` | The key that made the signature is expired. |
     * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
     * | `gpgverify_error` | There was an error communicating with the signature verification service. |
     * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
     * | `unsigned` | The object does not include a signature. |
     * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
     * | `no_user` | No user was associated with the `committer` email address in the commit. |
     * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
     * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
     * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
     * | `malformed_signature` | There was an error parsing the signature. |
     * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
     * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     */
    readonly get: operations["git/get-commit"];
  };
  readonly "/repos/{owner}/{repo}/git/matching-refs/{ref}": {
    /**
     * Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.
     *
     * When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.
     *
     * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
     *
     * If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
     */
    readonly get: operations["git/list-matching-refs"];
  };
  readonly "/repos/{owner}/{repo}/git/ref/{ref}": {
    /**
     * Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.
     *
     * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
     */
    readonly get: operations["git/get-ref"];
  };
  readonly "/repos/{owner}/{repo}/git/refs": {
    /** Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches. */
    readonly post: operations["git/create-ref"];
  };
  readonly "/repos/{owner}/{repo}/git/refs/{ref}": {
    readonly delete: operations["git/delete-ref"];
    readonly patch: operations["git/update-ref"];
  };
  readonly "/repos/{owner}/{repo}/git/tags": {
    /**
     * Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/reference/git#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.
     *
     * **Signature verification object**
     *
     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
     *
     * | Name | Type | Description |
     * | ---- | ---- | ----------- |
     * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
     * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
     * | `signature` | `string` | The signature that was extracted from the commit. |
     * | `payload` | `string` | The value that was signed. |
     *
     * These are the possible values for `reason` in the `verification` object:
     *
     * | Value | Description |
     * | ----- | ----------- |
     * | `expired_key` | The key that made the signature is expired. |
     * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
     * | `gpgverify_error` | There was an error communicating with the signature verification service. |
     * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
     * | `unsigned` | The object does not include a signature. |
     * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
     * | `no_user` | No user was associated with the `committer` email address in the commit. |
     * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
     * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
     * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
     * | `malformed_signature` | There was an error parsing the signature. |
     * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
     * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     */
    readonly post: operations["git/create-tag"];
  };
  readonly "/repos/{owner}/{repo}/git/tags/{tag_sha}": {
    /**
     * **Signature verification object**
     *
     * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
     *
     * | Name | Type | Description |
     * | ---- | ---- | ----------- |
     * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
     * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
     * | `signature` | `string` | The signature that was extracted from the commit. |
     * | `payload` | `string` | The value that was signed. |
     *
     * These are the possible values for `reason` in the `verification` object:
     *
     * | Value | Description |
     * | ----- | ----------- |
     * | `expired_key` | The key that made the signature is expired. |
     * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
     * | `gpgverify_error` | There was an error communicating with the signature verification service. |
     * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
     * | `unsigned` | The object does not include a signature. |
     * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
     * | `no_user` | No user was associated with the `committer` email address in the commit. |
     * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
     * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
     * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
     * | `malformed_signature` | There was an error parsing the signature. |
     * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
     * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
     */
    readonly get: operations["git/get-tag"];
  };
  readonly "/repos/{owner}/{repo}/git/trees": {
    /**
     * The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.
     *
     * If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/rest/reference/git#create-a-commit)" and "[Update a reference](https://docs.github.com/rest/reference/git#update-a-reference)."
     */
    readonly post: operations["git/create-tree"];
  };
  readonly "/repos/{owner}/{repo}/git/trees/{tree_sha}": {
    /**
     * Returns a single tree using the SHA1 value for that tree.
     *
     * If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
     */
    readonly get: operations["git/get-tree"];
  };
  readonly "/repos/{owner}/{repo}/hooks": {
    readonly get: operations["repos/list-webhooks"];
    /**
     * Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
     * share the same `config` as long as those webhooks do not have any `events` that overlap.
     */
    readonly post: operations["repos/create-webhook"];
  };
  readonly "/repos/{owner}/{repo}/hooks/{hook_id}": {
    /** Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository)." */
    readonly get: operations["repos/get-webhook"];
    readonly delete: operations["repos/delete-webhook"];
    /** Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository)." */
    readonly patch: operations["repos/update-webhook"];
  };
  readonly "/repos/{owner}/{repo}/hooks/{hook_id}/config": {
    /**
     * Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook)."
     *
     * Access tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.
     */
    readonly get: operations["repos/get-webhook-config-for-repo"];
    /**
     * Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook)."
     *
     * Access tokens must have the `write:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:write` permission.
     */
    readonly patch: operations["repos/update-webhook-config-for-repo"];
  };
  readonly "/repos/{owner}/{repo}/hooks/{hook_id}/pings": {
    /** This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook. */
    readonly post: operations["repos/ping-webhook"];
  };
  readonly "/repos/{owner}/{repo}/hooks/{hook_id}/tests": {
    /**
     * This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.
     *
     * **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`
     */
    readonly post: operations["repos/test-push-webhook"];
  };
  readonly "/repos/{owner}/{repo}/import": {
    /**
     * View the progress of an import.
     *
     * **Import status**
     *
     * This section includes details about the possible values of the `status` field of the Import Progress response.
     *
     * An import that does not have errors will progress through these steps:
     *
     * *   `detecting` - the "detection" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.
     * *   `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).
     * *   `mapping` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.
     * *   `pushing` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is "Writing objects".
     * *   `complete` - the import is complete, and the repository is ready on GitHub.
     *
     * If there are problems, you will see one of these in the `status` field:
     *
     * *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
     * *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com) for more information.
     * *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
     * *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/reference/migrations#cancel-an-import) and [retry](https://docs.github.com/rest/reference/migrations#start-an-import) with the correct URL.
     * *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
     *
     * **The project_choices field**
     *
     * When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.
     *
     * **Git LFS related fields**
     *
     * This section includes details about Git LFS related fields that may be present in the Import Progress response.
     *
     * *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.
     * *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.
     * *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.
     * *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.
     */
    readonly get: operations["migrations/get-import-status"];
    /** Start a source import to a GitHub repository using GitHub Importer. */
    readonly put: operations["migrations/start-import"];
    /** Stop an import for a repository. */
    readonly delete: operations["migrations/cancel-import"];
    /**
     * An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API
     * request. If no parameters are provided, the import will be restarted.
     */
    readonly patch: operations["migrations/update-import"];
  };
  readonly "/repos/{owner}/{repo}/import/authors": {
    /**
     * Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.
     *
     * This endpoint and the [Map a commit author](https://docs.github.com/rest/reference/migrations#map-a-commit-author) endpoint allow you to provide correct Git author information.
     */
    readonly get: operations["migrations/get-commit-authors"];
  };
  readonly "/repos/{owner}/{repo}/import/authors/{author_id}": {
    /** Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository. */
    readonly patch: operations["migrations/map-commit-author"];
  };
  readonly "/repos/{owner}/{repo}/import/large_files": {
    /** List files larger than 100MB found during the import */
    readonly get: operations["migrations/get-large-files"];
  };
  readonly "/repos/{owner}/{repo}/import/lfs": {
    /** You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.github.com). You can learn more about our LFS feature and working with large files [on our help site](https://help.github.com/articles/versioning-large-files/). */
    readonly patch: operations["migrations/set-lfs-preference"];
  };
  readonly "/repos/{owner}/{repo}/installation": {
    /**
     * Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
     *
     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    readonly get: operations["apps/get-repo-installation"];
  };
  readonly "/repos/{owner}/{repo}/interaction-limits": {
    /** Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response. */
    readonly get: operations["interactions/get-restrictions-for-repo"];
    /** Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository. */
    readonly put: operations["interactions/set-restrictions-for-repo"];
    /** Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository. */
    readonly delete: operations["interactions/remove-restrictions-for-repo"];
  };
  readonly "/repos/{owner}/{repo}/invitations": {
    /** When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations. */
    readonly get: operations["repos/list-invitations"];
  };
  readonly "/repos/{owner}/{repo}/invitations/{invitation_id}": {
    readonly delete: operations["repos/delete-invitation"];
    readonly patch: operations["repos/update-invitation"];
  };
  readonly "/repos/{owner}/{repo}/issues": {
    /**
     * List issues in a repository.
     *
     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
     * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
     * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
     * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
     */
    readonly get: operations["issues/list-for-repo"];
    /**
     * Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://help.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
     *
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)" for details.
     */
    readonly post: operations["issues/create"];
  };
  readonly "/repos/{owner}/{repo}/issues/comments": {
    /** By default, Issue Comments are ordered by ascending ID. */
    readonly get: operations["issues/list-comments-for-repo"];
  };
  readonly "/repos/{owner}/{repo}/issues/comments/{comment_id}": {
    readonly get: operations["issues/get-comment"];
    readonly delete: operations["issues/delete-comment"];
    readonly patch: operations["issues/update-comment"];
  };
  readonly "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions": {
    /** List the reactions to an [issue comment](https://docs.github.com/rest/reference/issues#comments). */
    readonly get: operations["reactions/list-for-issue-comment"];
    /** Create a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this issue comment. */
    readonly post: operations["reactions/create-for-issue-comment"];
  };
  readonly "/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}": {
    /**
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.
     *
     * Delete a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
     */
    readonly delete: operations["reactions/delete-for-issue-comment"];
  };
  readonly "/repos/{owner}/{repo}/issues/events": {
    readonly get: operations["issues/list-events-for-repo"];
  };
  readonly "/repos/{owner}/{repo}/issues/events/{event_id}": {
    readonly get: operations["issues/get-event"];
  };
  readonly "/repos/{owner}/{repo}/issues/{issue_number}": {
    /**
     * The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
     * [transferred](https://help.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
     * the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
     * returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
     * access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
     * to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
     *
     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
     * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
     * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
     * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
     */
    readonly get: operations["issues/get"];
    /** Issue owners and users with push access can edit an issue. */
    readonly patch: operations["issues/update"];
  };
  readonly "/repos/{owner}/{repo}/issues/{issue_number}/assignees": {
    /** Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced. */
    readonly post: operations["issues/add-assignees"];
    /** Removes one or more assignees from an issue. */
    readonly delete: operations["issues/remove-assignees"];
  };
  readonly "/repos/{owner}/{repo}/issues/{issue_number}/comments": {
    /** Issue Comments are ordered by ascending ID. */
    readonly get: operations["issues/list-comments"];
    /** This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)" for details. */
    readonly post: operations["issues/create-comment"];
  };
  readonly "/repos/{owner}/{repo}/issues/{issue_number}/events": {
    readonly get: operations["issues/list-events"];
  };
  readonly "/repos/{owner}/{repo}/issues/{issue_number}/labels": {
    readonly get: operations["issues/list-labels-on-issue"];
    /** Removes any previous labels and sets the new labels for an issue. */
    readonly put: operations["issues/set-labels"];
    readonly post: operations["issues/add-labels"];
    readonly delete: operations["issues/remove-all-labels"];
  };
  readonly "/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}": {
    /** Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist. */
    readonly delete: operations["issues/remove-label"];
  };
  readonly "/repos/{owner}/{repo}/issues/{issue_number}/lock": {
    /**
     * Users with push access can lock an issue or pull request's conversation.
     *
     * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
     */
    readonly put: operations["issues/lock"];
    /** Users with push access can unlock an issue's conversation. */
    readonly delete: operations["issues/unlock"];
  };
  readonly "/repos/{owner}/{repo}/issues/{issue_number}/reactions": {
    /** List the reactions to an [issue](https://docs.github.com/rest/reference/issues). */
    readonly get: operations["reactions/list-for-issue"];
    /** Create a reaction to an [issue](https://docs.github.com/rest/reference/issues/). A response with a `Status: 200 OK` means that you already added the reaction type to this issue. */
    readonly post: operations["reactions/create-for-issue"];
  };
  readonly "/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}": {
    /**
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.
     *
     * Delete a reaction to an [issue](https://docs.github.com/rest/reference/issues/).
     */
    readonly delete: operations["reactions/delete-for-issue"];
  };
  readonly "/repos/{owner}/{repo}/issues/{issue_number}/timeline": {
    readonly get: operations["issues/list-events-for-timeline"];
  };
  readonly "/repos/{owner}/{repo}/keys": {
    readonly get: operations["repos/list-deploy-keys"];
    /** You can create a read-only deploy key. */
    readonly post: operations["repos/create-deploy-key"];
  };
  readonly "/repos/{owner}/{repo}/keys/{key_id}": {
    readonly get: operations["repos/get-deploy-key"];
    /** Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead. */
    readonly delete: operations["repos/delete-deploy-key"];
  };
  readonly "/repos/{owner}/{repo}/labels": {
    readonly get: operations["issues/list-labels-for-repo"];
    readonly post: operations["issues/create-label"];
  };
  readonly "/repos/{owner}/{repo}/labels/{name}": {
    readonly get: operations["issues/get-label"];
    readonly delete: operations["issues/delete-label"];
    readonly patch: operations["issues/update-label"];
  };
  readonly "/repos/{owner}/{repo}/languages": {
    /** Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language. */
    readonly get: operations["repos/list-languages"];
  };
  readonly "/repos/{owner}/{repo}/license": {
    /**
     * This method returns the contents of the repository's license file, if one is detected.
     *
     * Similar to [Get repository content](https://docs.github.com/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.
     */
    readonly get: operations["licenses/get-for-repo"];
  };
  readonly "/repos/{owner}/{repo}/merges": {
    readonly post: operations["repos/merge"];
  };
  readonly "/repos/{owner}/{repo}/milestones": {
    readonly get: operations["issues/list-milestones"];
    readonly post: operations["issues/create-milestone"];
  };
  readonly "/repos/{owner}/{repo}/milestones/{milestone_number}": {
    readonly get: operations["issues/get-milestone"];
    readonly delete: operations["issues/delete-milestone"];
    readonly patch: operations["issues/update-milestone"];
  };
  readonly "/repos/{owner}/{repo}/milestones/{milestone_number}/labels": {
    readonly get: operations["issues/list-labels-for-milestone"];
  };
  readonly "/repos/{owner}/{repo}/notifications": {
    /** List all notifications for the current user. */
    readonly get: operations["activity/list-repo-notifications-for-authenticated-user"];
    /** Marks all notifications in a repository as "read" removes them from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`. */
    readonly put: operations["activity/mark-repo-notifications-as-read"];
  };
  readonly "/repos/{owner}/{repo}/pages": {
    readonly get: operations["repos/get-pages"];
    /** Updates information for a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages). */
    readonly put: operations["repos/update-information-about-pages-site"];
    /** Configures a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)." */
    readonly post: operations["repos/create-pages-site"];
    readonly delete: operations["repos/delete-pages-site"];
  };
  readonly "/repos/{owner}/{repo}/pages/builds": {
    readonly get: operations["repos/list-pages-builds"];
    /**
     * You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
     *
     * Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
     */
    readonly post: operations["repos/request-pages-build"];
  };
  readonly "/repos/{owner}/{repo}/pages/builds/latest": {
    readonly get: operations["repos/get-latest-pages-build"];
  };
  readonly "/repos/{owner}/{repo}/pages/builds/{build_id}": {
    readonly get: operations["repos/get-pages-build"];
  };
  readonly "/repos/{owner}/{repo}/projects": {
    /** Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
    readonly get: operations["projects/list-for-repo"];
    /** Creates a repository project board. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
    readonly post: operations["projects/create-for-repo"];
  };
  readonly "/repos/{owner}/{repo}/pulls": {
    /** Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
    readonly get: operations["pulls/list"];
    /**
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
     *
     * You can create a new pull request.
     *
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
     */
    readonly post: operations["pulls/create"];
  };
  readonly "/repos/{owner}/{repo}/pulls/comments": {
    /** Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID. */
    readonly get: operations["pulls/list-review-comments-for-repo"];
  };
  readonly "/repos/{owner}/{repo}/pulls/comments/{comment_id}": {
    /** Provides details for a review comment. */
    readonly get: operations["pulls/get-review-comment"];
    /** Deletes a review comment. */
    readonly delete: operations["pulls/delete-review-comment"];
    /** Enables you to edit a review comment. */
    readonly patch: operations["pulls/update-review-comment"];
  };
  readonly "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions": {
    /** List the reactions to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments). */
    readonly get: operations["reactions/list-for-pull-request-review-comment"];
    /** Create a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this pull request review comment. */
    readonly post: operations["reactions/create-for-pull-request-review-comment"];
  };
  readonly "/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}": {
    /**
     * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`
     *
     * Delete a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
     */
    readonly delete: operations["reactions/delete-for-pull-request-comment"];
  };
  readonly "/repos/{owner}/{repo}/pulls/{pull_number}": {
    /**
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Lists details of a pull request by providing its number.
     *
     * When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
     *
     * The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
     *
     * The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
     *
     * *   If merged as a [merge commit](https://help.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
     * *   If merged via a [squash](https://help.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
     * *   If [rebased](https://help.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
     *
     * Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
     */
    readonly get: operations["pulls/get"];
    /**
     * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
     */
    readonly patch: operations["pulls/update"];
  };
  readonly "/repos/{owner}/{repo}/pulls/{pull_number}/comments": {
    /** Lists all review comments for a pull request. By default, review comments are in ascending order by ID. */
    readonly get: operations["pulls/list-review-comments"];
    /**
     * Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/rest/reference/issues#create-an-issue-comment)." We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.
     *
     * You can still create a review comment using the `position` parameter. When you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required. For more information, see the [`comfort-fade` preview notice](https://docs.github.com/rest/reference/pulls#create-a-review-comment-for-a-pull-request-preview-notices).
     *
     * **Note:** The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
     *
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
     */
    readonly post: operations["pulls/create-review-comment"];
  };
  readonly "/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies": {
    /**
     * Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
     *
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
     */
    readonly post: operations["pulls/create-reply-for-review-comment"];
  };
  readonly "/repos/{owner}/{repo}/pulls/{pull_number}/commits": {
    /** Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint. */
    readonly get: operations["pulls/list-commits"];
  };
  readonly "/repos/{owner}/{repo}/pulls/{pull_number}/files": {
    /** **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default. */
    readonly get: operations["pulls/list-files"];
  };
  readonly "/repos/{owner}/{repo}/pulls/{pull_number}/merge": {
    readonly get: operations["pulls/check-if-merged"];
    /** This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)" for details. */
    readonly put: operations["pulls/merge"];
  };
  readonly "/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers": {
    readonly get: operations["pulls/list-requested-reviewers"];
    /** This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)" for details. */
    readonly post: operations["pulls/request-reviewers"];
    readonly delete: operations["pulls/remove-requested-reviewers"];
  };
  readonly "/repos/{owner}/{repo}/pulls/{pull_number}/reviews": {
    /** The list of reviews returns in chronological order. */
    readonly get: operations["pulls/list-reviews"];
    /**
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
     *
     * Pull request reviews created in the `PENDING` state do not include the `submitted_at` property in the response.
     *
     * **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) endpoint.
     *
     * The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
     */
    readonly post: operations["pulls/create-review"];
  };
  readonly "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}": {
    readonly get: operations["pulls/get-review"];
    /** Update the review summary comment with new text. */
    readonly put: operations["pulls/update-review"];
    readonly delete: operations["pulls/delete-pending-review"];
  };
  readonly "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments": {
    /** List comments for a specific pull request review. */
    readonly get: operations["pulls/list-comments-for-review"];
  };
  readonly "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals": {
    /** **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews. */
    readonly put: operations["pulls/dismiss-review"];
  };
  readonly "/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events": {
    readonly post: operations["pulls/submit-review"];
  };
  readonly "/repos/{owner}/{repo}/pulls/{pull_number}/update-branch": {
    /** Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch. */
    readonly put: operations["pulls/update-branch"];
  };
  readonly "/repos/{owner}/{repo}/readme": {
    /**
     * Gets the preferred README for a repository.
     *
     * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
     */
    readonly get: operations["repos/get-readme"];
  };
  readonly "/repos/{owner}/{repo}/releases": {
    /**
     * This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).
     *
     * Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
     */
    readonly get: operations["repos/list-releases"];
    /**
     * Users with push access to the repository can create a release.
     *
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
     */
    readonly post: operations["repos/create-release"];
  };
  readonly "/repos/{owner}/{repo}/releases/assets/{asset_id}": {
    /** To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response. */
    readonly get: operations["repos/get-release-asset"];
    readonly delete: operations["repos/delete-release-asset"];
    /** Users with push access to the repository can edit a release asset. */
    readonly patch: operations["repos/update-release-asset"];
  };
  readonly "/repos/{owner}/{repo}/releases/latest": {
    /**
     * View the latest published full release for the repository.
     *
     * The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
     */
    readonly get: operations["repos/get-latest-release"];
  };
  readonly "/repos/{owner}/{repo}/releases/tags/{tag}": {
    /** Get a published release with the specified tag. */
    readonly get: operations["repos/get-release-by-tag"];
  };
  readonly "/repos/{owner}/{repo}/releases/{release_id}": {
    /** **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia). */
    readonly get: operations["repos/get-release"];
    /** Users with push access to the repository can delete a release. */
    readonly delete: operations["repos/delete-release"];
    /** Users with push access to the repository can edit a release. */
    readonly patch: operations["repos/update-release"];
  };
  readonly "/repos/{owner}/{repo}/releases/{release_id}/assets": {
    readonly get: operations["repos/list-release-assets"];
    /**
     * This endpoint makes use of [a Hypermedia relation](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in
     * the response of the [Create a release endpoint](https://docs.github.com/rest/reference/repos#create-a-release) to upload a release asset.
     *
     * You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.
     *
     * Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:
     *
     * `application/zip`
     *
     * GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
     * you'll still need to pass your authentication to be able to upload an asset.
     *
     * When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.
     *
     * **Notes:**
     * *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List assets for a release](https://docs.github.com/rest/reference/repos#list-assets-for-a-release)"
     * endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact).
     * *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
     */
    readonly post: operations["repos/upload-release-asset"];
  };
  readonly "/repos/{owner}/{repo}/secret-scanning/alerts": {
    /**
     * Lists all secret scanning alerts for a private repository, from newest to oldest. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
     *
     * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
     */
    readonly get: operations["secret-scanning/list-alerts-for-repo"];
  };
  readonly "/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}": {
    /**
     * Gets a single secret scanning alert detected in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
     *
     * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
     */
    readonly get: operations["secret-scanning/get-alert"];
    /**
     * Updates the status of a secret scanning alert in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
     *
     * GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.
     */
    readonly patch: operations["secret-scanning/update-alert"];
  };
  readonly "/repos/{owner}/{repo}/stargazers": {
    /**
     * Lists the people that have starred the repository.
     *
     * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
     */
    readonly get: operations["activity/list-stargazers-for-repo"];
  };
  readonly "/repos/{owner}/{repo}/stats/code_frequency": {
    /** Returns a weekly aggregate of the number of additions and deletions pushed to a repository. */
    readonly get: operations["repos/get-code-frequency-stats"];
  };
  readonly "/repos/{owner}/{repo}/stats/commit_activity": {
    /** Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`. */
    readonly get: operations["repos/get-commit-activity-stats"];
  };
  readonly "/repos/{owner}/{repo}/stats/contributors": {
    /**
     * Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:
     *
     * *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
     * *   `a` - Number of additions
     * *   `d` - Number of deletions
     * *   `c` - Number of commits
     */
    readonly get: operations["repos/get-contributors-stats"];
  };
  readonly "/repos/{owner}/{repo}/stats/participation": {
    /**
     * Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
     *
     * The array order is oldest week (index 0) to most recent week.
     */
    readonly get: operations["repos/get-participation-stats"];
  };
  readonly "/repos/{owner}/{repo}/stats/punch_card": {
    /**
     * Each array contains the day number, hour number, and number of commits:
     *
     * *   `0-6`: Sunday - Saturday
     * *   `0-23`: Hour of day
     * *   Number of commits
     *
     * For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
     */
    readonly get: operations["repos/get-punch-card-stats"];
  };
  readonly "/repos/{owner}/{repo}/statuses/{sha}": {
    /**
     * Users with push access in a repository can create commit statuses for a given SHA.
     *
     * Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
     */
    readonly post: operations["repos/create-commit-status"];
  };
  readonly "/repos/{owner}/{repo}/subscribers": {
    /** Lists the people watching the specified repository. */
    readonly get: operations["activity/list-watchers-for-repo"];
  };
  readonly "/repos/{owner}/{repo}/subscription": {
    readonly get: operations["activity/get-repo-subscription"];
    /** If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/reference/activity#delete-a-repository-subscription) completely. */
    readonly put: operations["activity/set-repo-subscription"];
    /** This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/reference/activity#set-a-repository-subscription). */
    readonly delete: operations["activity/delete-repo-subscription"];
  };
  readonly "/repos/{owner}/{repo}/tags": {
    readonly get: operations["repos/list-tags"];
  };
  readonly "/repos/{owner}/{repo}/tarball/{ref}": {
    /**
     * Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
     * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
     * the `Location` header to make a second `GET` request.
     * **Note**: For private repositories, these links are temporary and expire after five minutes.
     */
    readonly get: operations["repos/download-tarball-archive"];
  };
  readonly "/repos/{owner}/{repo}/teams": {
    readonly get: operations["repos/list-teams"];
  };
  readonly "/repos/{owner}/{repo}/topics": {
    readonly get: operations["repos/get-all-topics"];
    readonly put: operations["repos/replace-all-topics"];
  };
  readonly "/repos/{owner}/{repo}/traffic/clones": {
    /** Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday. */
    readonly get: operations["repos/get-clones"];
  };
  readonly "/repos/{owner}/{repo}/traffic/popular/paths": {
    /** Get the top 10 popular contents over the last 14 days. */
    readonly get: operations["repos/get-top-paths"];
  };
  readonly "/repos/{owner}/{repo}/traffic/popular/referrers": {
    /** Get the top 10 referrers over the last 14 days. */
    readonly get: operations["repos/get-top-referrers"];
  };
  readonly "/repos/{owner}/{repo}/traffic/views": {
    /** Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday. */
    readonly get: operations["repos/get-views"];
  };
  readonly "/repos/{owner}/{repo}/transfer": {
    /** A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://help.github.com/articles/about-repository-transfers/). */
    readonly post: operations["repos/transfer"];
  };
  readonly "/repos/{owner}/{repo}/vulnerability-alerts": {
    /** Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)". */
    readonly get: operations["repos/check-vulnerability-alerts"];
    /** Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)". */
    readonly put: operations["repos/enable-vulnerability-alerts"];
    /** Disables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)". */
    readonly delete: operations["repos/disable-vulnerability-alerts"];
  };
  readonly "/repos/{owner}/{repo}/zipball/{ref}": {
    /**
     * Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
     * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
     * the `Location` header to make a second `GET` request.
     * **Note**: For private repositories, these links are temporary and expire after five minutes.
     */
    readonly get: operations["repos/download-zipball-archive"];
  };
  readonly "/repos/{template_owner}/{template_repo}/generate": {
    /**
     * Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/reference/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.
     *
     * **OAuth scope requirements**
     *
     * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
     *
     * *   `public_repo` scope or `repo` scope to create a public repository
     * *   `repo` scope to create a private repository
     */
    readonly post: operations["repos/create-using-template"];
  };
  readonly "/repositories": {
    /**
     * Lists all public repositories in the order that they were created.
     *
     * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
     */
    readonly get: operations["repos/list-public"];
  };
  readonly "/repositories/{repository_id}/environments/{environment_name}/secrets": {
    /** Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
    readonly get: operations["actions/list-environment-secrets"];
  };
  readonly "/repositories/{repository_id}/environments/{environment_name}/secrets/public-key": {
    /** Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
    readonly get: operations["actions/get-environment-public-key"];
  };
  readonly "/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}": {
    /** Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
    readonly get: operations["actions/get-environment-secret"];
    /**
     * Creates or updates an environment secret with an encrypted value. Encrypt your secret using
     * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
     * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
     * this endpoint.
     *
     * #### Example encrypting a secret using Node.js
     *
     * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
     *
     * ```
     * const sodium = require('tweetsodium');
     *
     * const key = "base64-encoded-public-key";
     * const value = "plain-text-secret";
     *
     * // Convert the message and key to Uint8Array's (Buffer implements that interface)
     * const messageBytes = Buffer.from(value);
     * const keyBytes = Buffer.from(key, 'base64');
     *
     * // Encrypt using LibSodium.
     * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
     *
     * // Base64 the encrypted secret
     * const encrypted = Buffer.from(encryptedBytes).toString('base64');
     *
     * console.log(encrypted);
     * ```
     *
     *
     * #### Example encrypting a secret using Python
     *
     * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.
     *
     * ```
     * from base64 import b64encode
     * from nacl import encoding, public
     *
     * def encrypt(public_key: str, secret_value: str) -> str:
     *   """Encrypt a Unicode string using the public key."""
     *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
     *   sealed_box = public.SealedBox(public_key)
     *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
     *   return b64encode(encrypted).decode("utf-8")
     * ```
     *
     * #### Example encrypting a secret using C#
     *
     * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
     *
     * ```
     * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
     * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
     *
     * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
     *
     * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
     * ```
     *
     * #### Example encrypting a secret using Ruby
     *
     * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
     *
     * ```ruby
     * require "rbnacl"
     * require "base64"
     *
     * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
     * public_key = RbNaCl::PublicKey.new(key)
     *
     * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
     * encrypted_secret = box.encrypt("my_secret")
     *
     * # Print the base64 encoded secret
     * puts Base64.strict_encode64(encrypted_secret)
     * ```
     */
    readonly put: operations["actions/create-or-update-environment-secret"];
    /** Deletes a secret in an environment using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
    readonly delete: operations["actions/delete-environment-secret"];
  };
  readonly "/scim/v2/enterprises/{enterprise}/Groups": {
    /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */
    readonly get: operations["enterprise-admin/list-provisioned-groups-enterprise"];
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     *
     * Provision an enterprise group, and invite users to the group. This sends invitation emails to the email address of the invited users to join the GitHub organization that the SCIM group corresponds to.
     */
    readonly post: operations["enterprise-admin/provision-and-invite-enterprise-group"];
  };
  readonly "/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}": {
    /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */
    readonly get: operations["enterprise-admin/get-provisioning-information-for-enterprise-group"];
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     *
     * Replaces an existing provisioned group’s information. You must provide all the information required for the group as if you were provisioning it for the first time. Any existing group information that you don't provide will be removed, including group membership. If you want to only update a specific attribute, use the [Update an attribute for a SCIM enterprise group](#update-an-attribute-for-a-scim-enterprise-group) endpoint instead.
     */
    readonly put: operations["enterprise-admin/set-information-for-provisioned-enterprise-group"];
    /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */
    readonly delete: operations["enterprise-admin/delete-scim-group-from-enterprise"];
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     *
     * Allows you to change a provisioned group’s individual attributes. To change a group’s values, you must provide a specific Operations JSON format that contains at least one of the add, remove, or replace operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
     */
    readonly patch: operations["enterprise-admin/update-attribute-for-enterprise-group"];
  };
  readonly "/scim/v2/enterprises/{enterprise}/Users": {
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     *
     * Retrieves a paginated list of all provisioned enterprise members, including pending invitations.
     *
     * When a user with a SAML-provisioned external identity leaves (or is removed from) an enterprise, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
     *   - When a user with a SCIM-provisioned external identity is removed from an enterprise, the account's metadata is preserved to allow the user to re-join the organization in the future.
     *   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
     *   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
     *
     * The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:
     *
     * 1. The user is granted access by the IdP and is not a member of the GitHub enterprise.
     *
     * 1. The user attempts to access the GitHub enterprise and initiates the SAML SSO process, and is not currently signed in to their GitHub account.
     *
     * 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:
     *    - If the user signs in, their GitHub account is linked to this entry.
     *    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub enterprise, and the external identity `null` entry remains in place.
     */
    readonly get: operations["enterprise-admin/list-provisioned-identities-enterprise"];
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     *
     * Provision enterprise membership for a user, and send organization invitation emails to the email address.
     *
     * You can optionally include the groups a user will be invited to join. If you do not provide a list of `groups`, the user is provisioned for the enterprise, but no organization invitation emails will be sent.
     */
    readonly post: operations["enterprise-admin/provision-and-invite-enterprise-user"];
  };
  readonly "/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}": {
    /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */
    readonly get: operations["enterprise-admin/get-provisioning-information-for-enterprise-user"];
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     *
     * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](#update-an-attribute-for-an-enterprise-scim-user) endpoint instead.
     *
     * You must at least provide the required values for the user: `userName`, `name`, and `emails`.
     *
     * **Warning:** Setting `active: false` removes the user from the enterprise, deletes the external identity, and deletes the associated `{scim_user_id}`.
     */
    readonly put: operations["enterprise-admin/set-information-for-provisioned-enterprise-user"];
    /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */
    readonly delete: operations["enterprise-admin/delete-user-from-enterprise"];
    /**
     * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
     *
     * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
     *
     * **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.
     *
     * **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the enterprise, deletes the external identity, and deletes the associated `:scim_user_id`.
     *
     * ```
     * {
     *   "Operations":[{
     *     "op":"replace",
     *     "value":{
     *       "active":false
     *     }
     *   }]
     * }
     * ```
     */
    readonly patch: operations["enterprise-admin/update-attribute-for-enterprise-user"];
  };
  readonly "/scim/v2/organizations/{org}/Users": {
    /**
     * Retrieves a paginated list of all provisioned organization members, including pending invitations. If you provide the `filter` parameter, the resources for all matching provisions members are returned.
     *
     * When a user with a SAML-provisioned external identity leaves (or is removed from) an organization, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
     *   - When a user with a SCIM-provisioned external identity is removed from an organization, the account's metadata is preserved to allow the user to re-join the organization in the future.
     *   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
     *   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
     *
     * The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:
     *
     * 1. The user is granted access by the IdP and is not a member of the GitHub organization.
     *
     * 1. The user attempts to access the GitHub organization and initiates the SAML SSO process, and is not currently signed in to their GitHub account.
     *
     * 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:
     *    - If the user signs in, their GitHub account is linked to this entry.
     *    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub organization, and the external identity `null` entry remains in place.
     */
    readonly get: operations["scim/list-provisioned-identities"];
    /** Provision organization membership for a user, and send an activation email to the email address. */
    readonly post: operations["scim/provision-and-invite-user"];
  };
  readonly "/scim/v2/organizations/{org}/Users/{scim_user_id}": {
    readonly get: operations["scim/get-provisioning-information-for-user"];
    /**
     * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](https://docs.github.com/rest/reference/scim#update-an-attribute-for-a-scim-user) endpoint instead.
     *
     * You must at least provide the required values for the user: `userName`, `name`, and `emails`.
     *
     * **Warning:** Setting `active: false` removes the user from the organization, deletes the external identity, and deletes the associated `{scim_user_id}`.
     */
    readonly put: operations["scim/set-information-for-provisioned-user"];
    readonly delete: operations["scim/delete-user-from-org"];
    /**
     * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
     *
     * **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.
     *
     * **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the organization, deletes the external identity, and deletes the associated `:scim_user_id`.
     *
     * ```
     * {
     *   "Operations":[{
     *     "op":"replace",
     *     "value":{
     *       "active":false
     *     }
     *   }]
     * }
     * ```
     */
    readonly patch: operations["scim/update-attribute-for-user"];
  };
  readonly "/search/code": {
    /**
     * Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
     *
     * When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
     *
     * For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
     *
     * `q=addClass+in:file+language:js+repo:jquery/jquery`
     *
     * This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.
     *
     * #### Considerations for code search
     *
     * Due to the complexity of searching code, there are a few restrictions on how searches are performed:
     *
     * *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
     * *   Only files smaller than 384 KB are searchable.
     * *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
     * language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
     */
    readonly get: operations["search/code"];
  };
  readonly "/search/commits": {
    /**
     * Find commits via various criteria on the default branch (usually `master`). This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
     *
     * When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
     * metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
     *
     * For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
     *
     * `q=repo:octocat/Spoon-Knife+css`
     */
    readonly get: operations["search/commits"];
  };
  readonly "/search/issues": {
    /**
     * Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
     *
     * When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted
     * search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
     *
     * For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.
     *
     * `q=windows+label:bug+language:python+state:open&sort=created&order=asc`
     *
     * This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.
     *
     * **Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
     */
    readonly get: operations["search/issues-and-pull-requests"];
  };
  readonly "/search/labels": {
    /**
     * Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
     *
     * When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
     *
     * For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
     *
     * `q=bug+defect+enhancement&repository_id=64778136`
     *
     * The labels that best match the query appear first in the search results.
     */
    readonly get: operations["search/labels"];
  };
  readonly "/search/repositories": {
    /**
     * Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
     *
     * When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
     *
     * For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
     *
     * `q=tetris+language:assembly&sort=stars&order=desc`
     *
     * This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
     *
     * When you include the `mercy` preview header, you can also search for multiple topics by adding more `topic:` instances. For example, your query might look like this:
     *
     * `q=topic:ruby+topic:rails`
     */
    readonly get: operations["search/repos"];
  };
  readonly "/search/topics": {
    /**
     * Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). See "[Searching topics](https://help.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
     *
     * When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
     *
     * For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
     *
     * `q=ruby+is:featured`
     *
     * This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
     */
    readonly get: operations["search/topics"];
  };
  readonly "/search/users": {
    /**
     * Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
     *
     * When searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
     *
     * For example, if you're looking for a list of popular users, you might try this query:
     *
     * `q=tom+repos:%3E42+followers:%3E1000`
     *
     * This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
     */
    readonly get: operations["search/users"];
  };
  readonly "/teams/{team_id}": {
    /** **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint. */
    readonly get: operations["teams/get-legacy"];
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/reference/teams#delete-a-team) endpoint.
     *
     * To delete a team, the authenticated user must be an organization owner or team maintainer.
     *
     * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
     */
    readonly delete: operations["teams/delete-legacy"];
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/reference/teams#update-a-team) endpoint.
     *
     * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
     *
     * **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.
     */
    readonly patch: operations["teams/update-legacy"];
  };
  readonly "/teams/{team_id}/discussions": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/reference/teams#list-discussions) endpoint.
     *
     * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    readonly get: operations["teams/list-discussions-legacy"];
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/reference/teams#create-a-discussion) endpoint.
     *
     * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
     */
    readonly post: operations["teams/create-discussion-legacy"];
  };
  readonly "/teams/{team_id}/discussions/{discussion_number}": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint.
     *
     * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    readonly get: operations["teams/get-discussion-legacy"];
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/reference/teams#delete-a-discussion) endpoint.
     *
     * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    readonly delete: operations["teams/delete-discussion-legacy"];
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/reference/teams#update-a-discussion) endpoint.
     *
     * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    readonly patch: operations["teams/update-discussion-legacy"];
  };
  readonly "/teams/{team_id}/discussions/{discussion_number}/comments": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint.
     *
     * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    readonly get: operations["teams/list-discussion-comments-legacy"];
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/reference/teams#create-a-discussion-comment) endpoint.
     *
     * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     *
     * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
     */
    readonly post: operations["teams/create-discussion-comment-legacy"];
  };
  readonly "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint.
     *
     * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    readonly get: operations["teams/get-discussion-comment-legacy"];
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment) endpoint.
     *
     * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    readonly delete: operations["teams/delete-discussion-comment-legacy"];
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/reference/teams#update-a-discussion-comment) endpoint.
     *
     * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    readonly patch: operations["teams/update-discussion-comment-legacy"];
  };
  readonly "/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
     *
     * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    readonly get: operations["reactions/list-for-team-discussion-comment-legacy"];
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)" endpoint.
     *
     * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.
     */
    readonly post: operations["reactions/create-for-team-discussion-comment-legacy"];
  };
  readonly "/teams/{team_id}/discussions/{discussion_number}/reactions": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.
     *
     * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
     */
    readonly get: operations["reactions/list-for-team-discussion-legacy"];
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.
     *
     * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.
     */
    readonly post: operations["reactions/create-for-team-discussion-legacy"];
  };
  readonly "/teams/{team_id}/invitations": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/reference/teams#list-pending-team-invitations) endpoint.
     *
     * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
     */
    readonly get: operations["teams/list-pending-invitations-legacy"];
  };
  readonly "/teams/{team_id}/members": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint.
     *
     * Team members will include the members of child teams.
     */
    readonly get: operations["teams/list-members-legacy"];
  };
  readonly "/teams/{team_id}/members/{username}": {
    /**
     * The "Get team member" endpoint (described below) is deprecated.
     *
     * We recommend using the [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
     *
     * To list members in a team, the team must be visible to the authenticated user.
     */
    readonly get: operations["teams/get-member-legacy"];
    /**
     * The "Add team member" endpoint (described below) is deprecated.
     *
     * We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.
     *
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.
     *
     * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     *
     * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
     */
    readonly put: operations["teams/add-member-legacy"];
    /**
     * The "Remove team member" endpoint (described below) is deprecated.
     *
     * We recommend using the [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.
     *
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
     *
     * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     */
    readonly delete: operations["teams/remove-member-legacy"];
  };
  readonly "/teams/{team_id}/memberships/{username}": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint.
     *
     * Team members will include the members of child teams.
     *
     * To get a user's membership with a team, the team must be visible to the authenticated user.
     *
     * **Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
     */
    readonly get: operations["teams/get-membership-for-user-legacy"];
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.
     *
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.
     *
     * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     *
     * If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.
     *
     * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
     */
    readonly put: operations["teams/add-or-update-membership-for-user-legacy"];
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint.
     *
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
     *
     * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
     */
    readonly delete: operations["teams/remove-membership-for-user-legacy"];
  };
  readonly "/teams/{team_id}/projects": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint.
     *
     * Lists the organization projects for a team.
     */
    readonly get: operations["teams/list-projects-legacy"];
  };
  readonly "/teams/{team_id}/projects/{project_id}": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project) endpoint.
     *
     * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
     */
    readonly get: operations["teams/check-permissions-for-project-legacy"];
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions) endpoint.
     *
     * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
     */
    readonly put: operations["teams/add-or-update-project-permissions-legacy"];
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team) endpoint.
     *
     * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
     */
    readonly delete: operations["teams/remove-project-legacy"];
  };
  readonly "/teams/{team_id}/repos": {
    /** **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint. */
    readonly get: operations["teams/list-repos-legacy"];
  };
  readonly "/teams/{team_id}/repos/{owner}/{repo}": {
    /**
     * **Note**: Repositories inherited through a parent team will also be checked.
     *
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.
     *
     * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
     */
    readonly get: operations["teams/check-permissions-for-repo-legacy"];
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions)" endpoint.
     *
     * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.
     *
     * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
     */
    readonly put: operations["teams/add-or-update-repo-permissions-legacy"];
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team) endpoint.
     *
     * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
     */
    readonly delete: operations["teams/remove-repo-legacy"];
  };
  readonly "/teams/{team_id}/team-sync/group-mappings": {
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List IdP groups for a team`](https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team) endpoint.
     *
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * List IdP groups connected to a team on GitHub.
     */
    readonly get: operations["teams/list-idp-groups-for-legacy"];
    /**
     * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create or update IdP group connections`](https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections) endpoint.
     *
     * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
     *
     * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
     */
    readonly patch: operations["teams/create-or-update-idp-group-connections-legacy"];
  };
  readonly "/teams/{team_id}/teams": {
    /** **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint. */
    readonly get: operations["teams/list-child-legacy"];
  };
  readonly "/user": {
    /**
     * If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.
     *
     * If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.
     */
    readonly get: operations["users/get-authenticated"];
    /** **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API. */
    readonly patch: operations["users/update-authenticated"];
  };
  readonly "/user/blocks": {
    /** List the users you've blocked on your personal account. */
    readonly get: operations["users/list-blocked-by-authenticated"];
  };
  readonly "/user/blocks/{username}": {
    readonly get: operations["users/check-blocked"];
    readonly put: operations["users/block"];
    readonly delete: operations["users/unblock"];
  };
  readonly "/user/email/visibility": {
    /** Sets the visibility for your primary email addresses. */
    readonly patch: operations["users/set-primary-email-visibility-for-authenticated"];
  };
  readonly "/user/emails": {
    /** Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope. */
    readonly get: operations["users/list-emails-for-authenticated"];
    /** This endpoint is accessible with the `user` scope. */
    readonly post: operations["users/add-email-for-authenticated"];
    /** This endpoint is accessible with the `user` scope. */
    readonly delete: operations["users/delete-email-for-authenticated"];
  };
  readonly "/user/followers": {
    /** Lists the people following the authenticated user. */
    readonly get: operations["users/list-followers-for-authenticated-user"];
  };
  readonly "/user/following": {
    /** Lists the people who the authenticated user follows. */
    readonly get: operations["users/list-followed-by-authenticated"];
  };
  readonly "/user/following/{username}": {
    readonly get: operations["users/check-person-is-followed-by-authenticated"];
    /**
     * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
     *
     * Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
     */
    readonly put: operations["users/follow"];
    /** Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope. */
    readonly delete: operations["users/unfollow"];
  };
  readonly "/user/gpg_keys": {
    /** Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
    readonly get: operations["users/list-gpg-keys-for-authenticated"];
    /** Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
    readonly post: operations["users/create-gpg-key-for-authenticated"];
  };
  readonly "/user/gpg_keys/{gpg_key_id}": {
    /** View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
    readonly get: operations["users/get-gpg-key-for-authenticated"];
    /** Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
    readonly delete: operations["users/delete-gpg-key-for-authenticated"];
  };
  readonly "/user/installations": {
    /**
     * Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
     *
     * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
     *
     * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
     *
     * You can find the permissions for the installation under the `permissions` key.
     */
    readonly get: operations["apps/list-installations-for-authenticated-user"];
  };
  readonly "/user/installations/{installation_id}/repositories": {
    /**
     * List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
     *
     * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
     *
     * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
     *
     * The access the user has to each repository is included in the hash under the `permissions` key.
     */
    readonly get: operations["apps/list-installation-repos-for-authenticated-user"];
  };
  readonly "/user/installations/{installation_id}/repositories/{repository_id}": {
    /**
     * Add a single repository to an installation. The authenticated user must have admin access to the repository.
     *
     * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
     */
    readonly put: operations["apps/add-repo-to-installation"];
    /**
     * Remove a single repository from an installation. The authenticated user must have admin access to the repository.
     *
     * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
     */
    readonly delete: operations["apps/remove-repo-from-installation"];
  };
  readonly "/user/interaction-limits": {
    /** Shows which type of GitHub user can interact with your public repositories and when the restriction expires. If there are no restrictions, you will see an empty response. */
    readonly get: operations["interactions/get-restrictions-for-authenticated-user"];
    /** Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user. */
    readonly put: operations["interactions/set-restrictions-for-authenticated-user"];
    /** Removes any interaction restrictions from your public repositories. */
    readonly delete: operations["interactions/remove-restrictions-for-authenticated-user"];
  };
  readonly "/user/issues": {
    /**
     * List issues across owned and member repositories assigned to the authenticated user.
     *
     * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
     * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
     * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
     * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
     */
    readonly get: operations["issues/list-for-authenticated-user"];
  };
  readonly "/user/keys": {
    /** Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
    readonly get: operations["users/list-public-ssh-keys-for-authenticated"];
    /** Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
    readonly post: operations["users/create-public-ssh-key-for-authenticated"];
  };
  readonly "/user/keys/{key_id}": {
    /** View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
    readonly get: operations["users/get-public-ssh-key-for-authenticated"];
    /** Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
    readonly delete: operations["users/delete-public-ssh-key-for-authenticated"];
  };
  readonly "/user/marketplace_purchases": {
    /** Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/). */
    readonly get: operations["apps/list-subscriptions-for-authenticated-user"];
  };
  readonly "/user/marketplace_purchases/stubbed": {
    /** Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/). */
    readonly get: operations["apps/list-subscriptions-for-authenticated-user-stubbed"];
  };
  readonly "/user/memberships/orgs": {
    readonly get: operations["orgs/list-memberships-for-authenticated-user"];
  };
  readonly "/user/memberships/orgs/{org}": {
    readonly get: operations["orgs/get-membership-for-authenticated-user"];
    readonly patch: operations["orgs/update-membership-for-authenticated-user"];
  };
  readonly "/user/migrations": {
    /** Lists all migrations a user has started. */
    readonly get: operations["migrations/list-for-authenticated-user"];
    /** Initiates the generation of a user migration archive. */
    readonly post: operations["migrations/start-for-authenticated-user"];
  };
  readonly "/user/migrations/{migration_id}": {
    /**
     * Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:
     *
     * *   `pending` - the migration hasn't started yet.
     * *   `exporting` - the migration is in progress.
     * *   `exported` - the migration finished successfully.
     * *   `failed` - the migration failed.
     *
     * Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/reference/migrations#download-a-user-migration-archive).
     */
    readonly get: operations["migrations/get-status-for-authenticated-user"];
  };
  readonly "/user/migrations/{migration_id}/archive": {
    /**
     * Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
     *
     * *   attachments
     * *   bases
     * *   commit\_comments
     * *   issue\_comments
     * *   issue\_events
     * *   issues
     * *   milestones
     * *   organizations
     * *   projects
     * *   protected\_branches
     * *   pull\_request\_reviews
     * *   pull\_requests
     * *   releases
     * *   repositories
     * *   review\_comments
     * *   schema
     * *   users
     *
     * The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
     */
    readonly get: operations["migrations/get-archive-for-authenticated-user"];
    /** Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/reference/migrations#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/reference/migrations#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted. */
    readonly delete: operations["migrations/delete-archive-for-authenticated-user"];
  };
  readonly "/user/migrations/{migration_id}/repos/{repo_name}/lock": {
    /** Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/reference/migrations#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/reference/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked. */
    readonly delete: operations["migrations/unlock-repo-for-authenticated-user"];
  };
  readonly "/user/migrations/{migration_id}/repositories": {
    /** Lists all the repositories for this user migration. */
    readonly get: operations["migrations/list-repos-for-user"];
  };
  readonly "/user/orgs": {
    /**
     * List organizations for the authenticated user.
     *
     * **OAuth scope requirements**
     *
     * This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.
     */
    readonly get: operations["orgs/list-for-authenticated-user"];
  };
  readonly "/user/packages/{package_type}/{package_name}": {
    /**
     * Gets a specific package for a package owned by the authenticated user.
     *
     * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
     * If `package_type` is not `container`, your token must also include the `repo` scope.
     */
    readonly get: operations["packages/get-package-for-authenticated-user"];
    /**
     * Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 25 downloads. In this scenario, contact GitHub support for further assistance.
     *
     * To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:delete` scope.
     * If `package_type` is not `container`, your token must also include the `repo` scope.
     */
    readonly delete: operations["packages/delete-package-for-authenticated-user"];
  };
  readonly "/user/packages/{package_type}/{package_name}/restore": {
    /**
     * Restores a package owned by the authenticated user.
     *
     * You can restore a deleted package under the following conditions:
     *   - The package was deleted within the last 30 days.
     *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
     *
     * To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:write` scope. If `package_type` is not `container`, your token must also include the `repo` scope.
     */
    readonly post: operations["packages/restore-package-for-authenticated-user"];
  };
  readonly "/user/packages/{package_type}/{package_name}/versions": {
    /**
     * Returns all package versions for a package owned by the authenticated user.
     *
     * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
     * If `package_type` is not `container`, your token must also include the `repo` scope.
     */
    readonly get: operations["packages/get-all-package-versions-for-a-package-owned-by-the-authenticated-user"];
  };
  readonly "/user/packages/{package_type}/{package_name}/versions/{package_version_id}": {
    /**
     * Gets a specific package version for a package owned by the authenticated user.
     *
     * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
     * If `package_type` is not `container`, your token must also include the `repo` scope.
     */
    readonly get: operations["packages/get-package-version-for-authenticated-user"];
    /**
     * Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 25 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
     *
     * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` scope.
     * If `package_type` is not `container`, your token must also include the `repo` scope.
     */
    readonly delete: operations["packages/delete-package-version-for-authenticated-user"];
  };
  readonly "/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore": {
    /**
     * Restores a package version owned by the authenticated user.
     *
     * You can restore a deleted package version under the following conditions:
     *   - The package was deleted within the last 30 days.
     *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
     *
     * To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:write` scope. If `package_type` is not `container`, your token must also include the `repo` scope.
     */
    readonly post: operations["packages/restore-package-version-for-authenticated-user"];
  };
  readonly "/user/projects": {
    readonly post: operations["projects/create-for-authenticated-user"];
  };
  readonly "/user/public_emails": {
    /** Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope. */
    readonly get: operations["users/list-public-emails-for-authenticated"];
  };
  readonly "/user/repos": {
    /**
     * Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
     *
     * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
     */
    readonly get: operations["repos/list-for-authenticated-user"];
    /**
     * Creates a new repository for the authenticated user.
     *
     * **OAuth scope requirements**
     *
     * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
     *
     * *   `public_repo` scope or `repo` scope to create a public repository
     * *   `repo` scope to create a private repository
     */
    readonly post: operations["repos/create-for-authenticated-user"];
  };
  readonly "/user/repository_invitations": {
    /** When authenticating as a user, this endpoint will list all currently open repository invitations for that user. */
    readonly get: operations["repos/list-invitations-for-authenticated-user"];
  };
  readonly "/user/repository_invitations/{invitation_id}": {
    readonly delete: operations["repos/decline-invitation"];
    readonly patch: operations["repos/accept-invitation"];
  };
  readonly "/user/starred": {
    /**
     * Lists repositories the authenticated user has starred.
     *
     * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
     */
    readonly get: operations["activity/list-repos-starred-by-authenticated-user"];
  };
  readonly "/user/starred/{owner}/{repo}": {
    readonly get: operations["activity/check-repo-is-starred-by-authenticated-user"];
    /** Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)." */
    readonly put: operations["activity/star-repo-for-authenticated-user"];
    readonly delete: operations["activity/unstar-repo-for-authenticated-user"];
  };
  readonly "/user/subscriptions": {
    /** Lists repositories the authenticated user is watching. */
    readonly get: operations["activity/list-watched-repos-for-authenticated-user"];
  };
  readonly "/user/teams": {
    /** List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/). */
    readonly get: operations["teams/list-for-authenticated-user"];
  };
  readonly "/users": {
    /**
     * Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.
     *
     * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.
     */
    readonly get: operations["users/list"];
  };
  readonly "/users/{username}": {
    /**
     * Provides publicly available information about someone with a GitHub account.
     *
     * GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see 'Response with GitHub plan information' below"
     *
     * The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/overview/resources-in-the-rest-api#authentication).
     *
     * The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/rest/reference/users#emails)".
     */
    readonly get: operations["users/get-by-username"];
  };
  readonly "/users/{username}/events": {
    /** If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events. */
    readonly get: operations["activity/list-events-for-authenticated-user"];
  };
  readonly "/users/{username}/events/orgs/{org}": {
    /** This is the user's organization dashboard. You must be authenticated as the user to view this. */
    readonly get: operations["activity/list-org-events-for-authenticated-user"];
  };
  readonly "/users/{username}/events/public": {
    readonly get: operations["activity/list-public-events-for-user"];
  };
  readonly "/users/{username}/followers": {
    /** Lists the people following the specified user. */
    readonly get: operations["users/list-followers-for-user"];
  };
  readonly "/users/{username}/following": {
    /** Lists the people who the specified user follows. */
    readonly get: operations["users/list-following-for-user"];
  };
  readonly "/users/{username}/following/{target_user}": {
    readonly get: operations["users/check-following-for-user"];
  };
  readonly "/users/{username}/gists": {
    /** Lists public gists for the specified user: */
    readonly get: operations["gists/list-for-user"];
  };
  readonly "/users/{username}/gpg_keys": {
    /** Lists the GPG keys for a user. This information is accessible by anyone. */
    readonly get: operations["users/list-gpg-keys-for-user"];
  };
  readonly "/users/{username}/hovercard": {
    /**
     * Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
     *
     * The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:
     *
     * ```shell
     *  curl -u username:token
     *   https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
     * ```
     */
    readonly get: operations["users/get-context-for-user"];
  };
  readonly "/users/{username}/installation": {
    /**
     * Enables an authenticated GitHub App to find the user’s installation information.
     *
     * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
     */
    readonly get: operations["apps/get-user-installation"];
  };
  readonly "/users/{username}/keys": {
    /** Lists the _verified_ public SSH keys for a user. This is accessible by anyone. */
    readonly get: operations["users/list-public-keys-for-user"];
  };
  readonly "/users/{username}/orgs": {
    /**
     * List [public organization memberships](https://help.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
     *
     * This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
     */
    readonly get: operations["orgs/list-for-user"];
  };
  readonly "/users/{username}/packages/{package_type}/{package_name}": {
    /**
     * Gets a specific package metadata for a public package owned by a user.
     *
     * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
     * If `package_type` is not `container`, your token must also include the `repo` scope.
     */
    readonly get: operations["packages/get-package-for-user"];
  };
  readonly "/users/{username}/packages/{package_type}/{package_name}/versions": {
    /**
     * Returns all package versions for a public package owned by a specified user.
     *
     * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
     * If `package_type` is not `container`, your token must also include the `repo` scope.
     */
    readonly get: operations["packages/get-all-package-versions-for-package-owned-by-user"];
  };
  readonly "/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}": {
    /**
     * Gets a specific package version for a public package owned by a specified user.
     *
     * At this time, to use this endpoint, you must authenticate using an access token with the `packages:read` scope.
     * If `package_type` is not `container`, your token must also include the `repo` scope.
     */
    readonly get: operations["packages/get-package-version-for-user"];
  };
  readonly "/users/{username}/projects": {
    readonly get: operations["projects/list-for-user"];
  };
  readonly "/users/{username}/received_events": {
    /** These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events. */
    readonly get: operations["activity/list-received-events-for-user"];
  };
  readonly "/users/{username}/received_events/public": {
    readonly get: operations["activity/list-received-public-events-for-user"];
  };
  readonly "/users/{username}/repos": {
    /** Lists public repositories for the specified user. */
    readonly get: operations["repos/list-for-user"];
  };
  readonly "/users/{username}/settings/billing/actions": {
    /**
     * Gets the summary of the free and paid GitHub Actions minutes used.
     *
     * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
     *
     * Access tokens must have the `user` scope.
     */
    readonly get: operations["billing/get-github-actions-billing-user"];
  };
  readonly "/users/{username}/settings/billing/packages": {
    /**
     * Gets the free and paid storage used for GitHub Packages in gigabytes.
     *
     * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
     *
     * Access tokens must have the `user` scope.
     */
    readonly get: operations["billing/get-github-packages-billing-user"];
  };
  readonly "/users/{username}/settings/billing/shared-storage": {
    /**
     * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
     *
     * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
     *
     * Access tokens must have the `user` scope.
     */
    readonly get: operations["billing/get-shared-storage-billing-user"];
  };
  readonly "/users/{username}/starred": {
    /**
     * Lists repositories a user has starred.
     *
     * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
     */
    readonly get: operations["activity/list-repos-starred-by-user"];
  };
  readonly "/users/{username}/subscriptions": {
    /** Lists repositories a user is watching. */
    readonly get: operations["activity/list-repos-watched-by-user"];
  };
  readonly "/zen": {
    /** Get a random sentence from the Zen of GitHub */
    readonly get: operations["meta/get-zen"];
  };
}

export interface components {
  readonly schemas: {
    /** Simple User */
    readonly "simple-user": {
      readonly login: string;
      readonly id: number;
      readonly node_id: string;
      readonly avatar_url: string;
      readonly gravatar_id: string | null;
      readonly url: string;
      readonly html_url: string;
      readonly followers_url: string;
      readonly following_url: string;
      readonly gists_url: string;
      readonly starred_url: string;
      readonly subscriptions_url: string;
      readonly organizations_url: string;
      readonly repos_url: string;
      readonly events_url: string;
      readonly received_events_url: string;
      readonly type: string;
      readonly site_admin: boolean;
      readonly starred_at?: string;
    } | null;
    /** GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub. */
    readonly integration: {
      /** Unique identifier of the GitHub app */
      readonly id: number;
      /** The slug name of the GitHub app */
      readonly slug?: string;
      readonly node_id: string;
      readonly owner: components["schemas"]["simple-user"] | null;
      /** The name of the GitHub app */
      readonly name: string;
      readonly description: string | null;
      readonly external_url: string;
      readonly html_url: string;
      readonly created_at: string;
      readonly updated_at: string;
      /** The set of permissions for the GitHub app */
      readonly permissions: {
        readonly issues?: string;
        readonly checks?: string;
        readonly metadata?: string;
        readonly contents?: string;
        readonly deployments?: string;
      } & { readonly [key: string]: string };
      /** The list of events for the GitHub app */
      readonly events: readonly string[];
      /** The number of installations associated with the GitHub app */
      readonly installations_count?: number;
      readonly client_id?: string;
      readonly client_secret?: string;
      readonly webhook_secret?: string;
      readonly pem?: string;
    } & { readonly [key: string]: any };
    /** Basic Error */
    readonly "basic-error": {
      readonly message?: string;
      readonly documentation_url?: string;
    };
    /** Validation Error Simple */
    readonly "validation-error-simple": {
      readonly message: string;
      readonly documentation_url: string;
      readonly errors?: readonly string[];
    };
    /** The URL to which the payloads will be delivered. */
    readonly "webhook-config-url": string;
    /** The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`. */
    readonly "webhook-config-content-type": string;
    /** If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers). */
    readonly "webhook-config-secret": string;
    /** Determines whether the SSL certificate of the host for `url` will be verified when delivering payloads. Supported values include `0` (verification is performed) and `1` (verification is not performed). The default is `0`. **We strongly recommend not setting this to `1` as you are subject to man-in-the-middle and other attacks.** */
    readonly "webhook-config-insecure-ssl": string;
    /** Configuration object of the webhook */
    readonly "webhook-config": {
      readonly url?: components["schemas"]["webhook-config-url"];
      readonly content_type?: components["schemas"]["webhook-config-content-type"];
      readonly secret?: components["schemas"]["webhook-config-secret"];
      readonly insecure_ssl?: components["schemas"]["webhook-config-insecure-ssl"];
    };
    /** An enterprise account */
    readonly enterprise: {
      /** A short description of the enterprise. */
      readonly description?: string | null;
      readonly html_url: string;
      /** The enterprise's website URL. */
      readonly website_url?: string | null;
      /** Unique identifier of the enterprise */
      readonly id: number;
      readonly node_id: string;
      /** The name of the enterprise. */
      readonly name: string;
      /** The slug url identifier for the enterprise. */
      readonly slug: string;
      readonly created_at: string | null;
      readonly updated_at: string | null;
      readonly avatar_url: string;
    };
    /** Installation */
    readonly installation: {
      /** The ID of the installation. */
      readonly id: number;
      readonly account:
        | (Partial<components["schemas"]["simple-user"]> &
            Partial<components["schemas"]["enterprise"]>)
        | null;
      /** Describe whether all repositories have been selected or there's a selection involved */
      readonly repository_selection: "all" | "selected";
      readonly access_tokens_url: string;
      readonly repositories_url: string;
      readonly html_url: string;
      readonly app_id: number;
      /** The ID of the user or organization this token is being scoped to. */
      readonly target_id: number;
      readonly target_type: string;
      readonly permissions: {
        readonly deployments?: string;
        readonly checks?: string;
        readonly metadata?: string;
        readonly contents?: string;
        readonly pull_requests?: string;
        readonly statuses?: string;
        readonly issues?: string;
        readonly organization_administration?: string;
      };
      readonly events: readonly string[];
      readonly created_at: string;
      readonly updated_at: string;
      readonly single_file_name: string | null;
      readonly has_multiple_single_files?: boolean;
      readonly single_file_paths?: readonly string[];
      readonly app_slug: string;
      readonly suspended_by?: components["schemas"]["simple-user"] | null;
      readonly suspended_at?: string | null;
      readonly contact_email?: string | null;
    };
    /** The permissions granted to the user-to-server access token. */
    readonly "app-permissions": {
      /** The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`. */
      readonly actions?: "read" | "write";
      /** The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`. */
      readonly administration?: "read" | "write";
      /** The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`. */
      readonly checks?: "read" | "write";
      /** The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: `read` or `write`. */
      readonly content_references?: "read" | "write";
      /** The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`. */
      readonly contents?: "read" | "write";
      /** The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`. */
      readonly deployments?: "read" | "write";
      /** The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`. */
      readonly environments?: "read" | "write";
      /** The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`. */
      readonly issues?: "read" | "write";
      /** The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`. */
      readonly metadata?: "read" | "write";
      /** The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`. */
      readonly packages?: "read" | "write";
      /** The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`. */
      readonly pages?: "read" | "write";
      /** The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`. */
      readonly pull_requests?: "read" | "write";
      /** The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`. */
      readonly repository_hooks?: "read" | "write";
      /** The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`. */
      readonly repository_projects?: "read" | "write" | "admin";
      /** The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`. */
      readonly secret_scanning_alerts?: "read" | "write";
      /** The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`. */
      readonly secrets?: "read" | "write";
      /** The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`. */
      readonly security_events?: "read" | "write";
      /** The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`. */
      readonly single_file?: "read" | "write";
      /** The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`. */
      readonly statuses?: "read" | "write";
      /** The level of permission to grant the access token to retrieve Dependabot alerts. Can be one of: `read`. */
      readonly vulnerability_alerts?: "read";
      /** The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`. */
      readonly workflows?: "write";
      /** The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`. */
      readonly members?: "read" | "write";
      /** The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`. */
      readonly organization_administration?: "read" | "write";
      /** The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`. */
      readonly organization_hooks?: "read" | "write";
      /** The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`. */
      readonly organization_plan?: "read";
      /** The level of permission to grant the access token to manage organization projects, columns, and cards. Can be one of: `read`, `write`, or `admin`. */
      readonly organization_projects?: "read" | "write" | "admin";
      /** The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`. */
      readonly organization_secrets?: "read" | "write";
      /** The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`. */
      readonly organization_self_hosted_runners?: "read" | "write";
      /** The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`. */
      readonly organization_user_blocking?: "read" | "write";
      /** The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`. */
      readonly team_discussions?: "read" | "write";
    };
    /** License Simple */
    readonly "license-simple": {
      readonly key: string;
      readonly name: string;
      readonly url: string | null;
      readonly spdx_id: string | null;
      readonly node_id: string;
      readonly html_url?: string;
    };
    /** A git repository */
    readonly repository: {
      /** Unique identifier of the repository */
      readonly id: number;
      readonly node_id: string;
      /** The name of the repository. */
      readonly name: string;
      readonly full_name: string;
      readonly license: components["schemas"]["license-simple"] | null;
      readonly forks: number;
      readonly permissions?: {
        readonly admin: boolean;
        readonly pull: boolean;
        readonly triage?: boolean;
        readonly push: boolean;
        readonly maintain?: boolean;
      };
      readonly owner: components["schemas"]["simple-user"] | null;
      /** Whether the repository is private or public. */
      readonly private: boolean;
      readonly html_url: string;
      readonly description: string | null;
      readonly fork: boolean;
      readonly url: string;
      readonly archive_url: string;
      readonly assignees_url: string;
      readonly blobs_url: string;
      readonly branches_url: string;
      readonly collaborators_url: string;
      readonly comments_url: string;
      readonly commits_url: string;
      readonly compare_url: string;
      readonly contents_url: string;
      readonly contributors_url: string;
      readonly deployments_url: string;
      readonly downloads_url: string;
      readonly events_url: string;
      readonly forks_url: string;
      readonly git_commits_url: string;
      readonly git_refs_url: string;
      readonly git_tags_url: string;
      readonly git_url: string;
      readonly issue_comment_url: string;
      readonly issue_events_url: string;
      readonly issues_url: string;
      readonly keys_url: string;
      readonly labels_url: string;
      readonly languages_url: string;
      readonly merges_url: string;
      readonly milestones_url: string;
      readonly notifications_url: string;
      readonly pulls_url: string;
      readonly releases_url: string;
      readonly ssh_url: string;
      readonly stargazers_url: string;
      readonly statuses_url: string;
      readonly subscribers_url: string;
      readonly subscription_url: string;
      readonly tags_url: string;
      readonly teams_url: string;
      readonly trees_url: string;
      readonly clone_url: string;
      readonly mirror_url: string | null;
      readonly hooks_url: string;
      readonly svn_url: string;
      readonly homepage: string | null;
      readonly language: string | null;
      readonly forks_count: number;
      readonly stargazers_count: number;
      readonly watchers_count: number;
      readonly size: number;
      /** The default branch of the repository. */
      readonly default_branch: string;
      readonly open_issues_count: number;
      /** Whether this repository acts as a template that can be used to generate new repositories. */
      readonly is_template?: boolean;
      readonly topics?: readonly string[];
      /** Whether issues are enabled. */
      readonly has_issues: boolean;
      /** Whether projects are enabled. */
      readonly has_projects: boolean;
      /** Whether the wiki is enabled. */
      readonly has_wiki: boolean;
      readonly has_pages: boolean;
      /** Whether downloads are enabled. */
      readonly has_downloads: boolean;
      /** Whether the repository is archived. */
      readonly archived: boolean;
      /** Returns whether or not this repository disabled. */
      readonly disabled: boolean;
      /** The repository visibility: public, private, or internal. */
      readonly visibility?: string;
      readonly pushed_at: string | null;
      readonly created_at: string | null;
      readonly updated_at: string | null;
      /** Whether to allow rebase merges for pull requests. */
      readonly allow_rebase_merge?: boolean;
      readonly template_repository?: {
        readonly id?: number;
        readonly node_id?: string;
        readonly name?: string;
        readonly full_name?: string;
        readonly owner?: {
          readonly login?: string;
          readonly id?: number;
          readonly node_id?: string;
          readonly avatar_url?: string;
          readonly gravatar_id?: string;
          readonly url?: string;
          readonly html_url?: string;
          readonly followers_url?: string;
          readonly following_url?: string;
          readonly gists_url?: string;
          readonly starred_url?: string;
          readonly subscriptions_url?: string;
          readonly organizations_url?: string;
          readonly repos_url?: string;
          readonly events_url?: string;
          readonly received_events_url?: string;
          readonly type?: string;
          readonly site_admin?: boolean;
        };
        readonly private?: boolean;
        readonly html_url?: string;
        readonly description?: string;
        readonly fork?: boolean;
        readonly url?: string;
        readonly archive_url?: string;
        readonly assignees_url?: string;
        readonly blobs_url?: string;
        readonly branches_url?: string;
        readonly collaborators_url?: string;
        readonly comments_url?: string;
        readonly commits_url?: string;
        readonly compare_url?: string;
        readonly contents_url?: string;
        readonly contributors_url?: string;
        readonly deployments_url?: string;
        readonly downloads_url?: string;
        readonly events_url?: string;
        readonly forks_url?: string;
        readonly git_commits_url?: string;
        readonly git_refs_url?: string;
        readonly git_tags_url?: string;
        readonly git_url?: string;
        readonly issue_comment_url?: string;
        readonly issue_events_url?: string;
        readonly issues_url?: string;
        readonly keys_url?: string;
        readonly labels_url?: string;
        readonly languages_url?: string;
        readonly merges_url?: string;
        readonly milestones_url?: string;
        readonly notifications_url?: string;
        readonly pulls_url?: string;
        readonly releases_url?: string;
        readonly ssh_url?: string;
        readonly stargazers_url?: string;
        readonly statuses_url?: string;
        readonly subscribers_url?: string;
        readonly subscription_url?: string;
        readonly tags_url?: string;
        readonly teams_url?: string;
        readonly trees_url?: string;
        readonly clone_url?: string;
        readonly mirror_url?: string;
        readonly hooks_url?: string;
        readonly svn_url?: string;
        readonly homepage?: string;
        readonly language?: string;
        readonly forks_count?: number;
        readonly stargazers_count?: number;
        readonly watchers_count?: number;
        readonly size?: number;
        readonly default_branch?: string;
        readonly open_issues_count?: number;
        readonly is_template?: boolean;
        readonly topics?: readonly string[];
        readonly has_issues?: boolean;
        readonly has_projects?: boolean;
        readonly has_wiki?: boolean;
        readonly has_pages?: boolean;
        readonly has_downloads?: boolean;
        readonly archived?: boolean;
        readonly disabled?: boolean;
        readonly visibility?: string;
        readonly pushed_at?: string;
        readonly created_at?: string;
        readonly updated_at?: string;
        readonly permissions?: {
          readonly admin?: boolean;
          readonly push?: boolean;
          readonly pull?: boolean;
        };
        readonly allow_rebase_merge?: boolean;
        readonly temp_clone_token?: string;
        readonly allow_squash_merge?: boolean;
        readonly delete_branch_on_merge?: boolean;
        readonly allow_merge_commit?: boolean;
        readonly subscribers_count?: number;
        readonly network_count?: number;
      } | null;
      readonly temp_clone_token?: string;
      /** Whether to allow squash merges for pull requests. */
      readonly allow_squash_merge?: boolean;
      /** Whether to delete head branches when pull requests are merged */
      readonly delete_branch_on_merge?: boolean;
      /** Whether to allow merge commits for pull requests. */
      readonly allow_merge_commit?: boolean;
      readonly subscribers_count?: number;
      readonly network_count?: number;
      readonly open_issues: number;
      readonly watchers: number;
      readonly master_branch?: string;
      readonly starred_at?: string;
    };
    /** Authentication token for a GitHub App installed on a user or org. */
    readonly "installation-token": {
      readonly token: string;
      readonly expires_at: string;
      readonly permissions?: {
        readonly issues?: string;
        readonly contents?: string;
        readonly metadata?: string;
        readonly single_file?: string;
      };
      readonly repository_selection?: "all" | "selected";
      readonly repositories?: readonly components["schemas"]["repository"][];
      readonly single_file?: string;
      readonly has_multiple_single_files?: boolean;
      readonly single_file_paths?: readonly string[];
    };
    /** Validation Error */
    readonly "validation-error": {
      readonly message: string;
      readonly documentation_url: string;
      readonly errors?: readonly {
        readonly resource?: string;
        readonly field?: string;
        readonly message?: string;
        readonly code: string;
        readonly index?: number;
        readonly value?:
          | (string | null)
          | (number | null)
          | (readonly string[] | null);
      }[];
    };
    /** The authorization associated with an OAuth Access. */
    readonly "application-grant": {
      readonly id: number;
      readonly url: string;
      readonly app: {
        readonly client_id: string;
        readonly name: string;
        readonly url: string;
      };
      readonly created_at: string;
      readonly updated_at: string;
      readonly scopes: readonly string[];
      readonly user?: components["schemas"]["simple-user"] | null;
    };
    readonly "scoped-installation": {
      readonly permissions: components["schemas"]["app-permissions"];
      /** Describe whether all repositories have been selected or there's a selection involved */
      readonly repository_selection: "all" | "selected";
      readonly single_file_name: string | null;
      readonly has_multiple_single_files?: boolean;
      readonly single_file_paths?: readonly string[];
      readonly repositories_url: string;
      readonly account: components["schemas"]["simple-user"];
    };
    /** The authorization for an OAuth app, GitHub App, or a Personal Access Token. */
    readonly authorization: {
      readonly id: number;
      readonly url: string;
      /** A list of scopes that this authorization is in. */
      readonly scopes: readonly string[] | null;
      readonly token: string;
      readonly token_last_eight: string | null;
      readonly hashed_token: string | null;
      readonly app: {
        readonly client_id: string;
        readonly name: string;
        readonly url: string;
      };
      readonly note: string | null;
      readonly note_url: string | null;
      readonly updated_at: string;
      readonly created_at: string;
      readonly fingerprint: string | null;
      readonly user?: components["schemas"]["simple-user"] | null;
      readonly installation?:
        | components["schemas"]["scoped-installation"]
        | null;
    };
    /** Code Of Conduct */
    readonly "code-of-conduct": {
      readonly key: string;
      readonly name: string;
      readonly url: string;
      readonly body?: string;
      readonly html_url: string | null;
    };
    /** Content Reference attachments allow you to provide context around URLs posted in comments */
    readonly "content-reference-attachment": {
      /** The ID of the attachment */
      readonly id: number;
      /** The title of the attachment */
      readonly title: string;
      /** The body of the attachment */
      readonly body: string;
      /** The node_id of the content attachment */
      readonly node_id?: string;
    };
    /** The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`. */
    readonly "enabled-organizations": "all" | "none" | "selected";
    /** The permissions policy that controls the actions that are allowed to run. Can be one of: `all`, `local_only`, or `selected`. */
    readonly "allowed-actions": "all" | "local_only" | "selected";
    /** The API URL to use to get or set the actions that are allowed to run, when `allowed_actions` is set to `selected`. */
    readonly "selected-actions-url": string;
    readonly "actions-enterprise-permissions": {
      readonly enabled_organizations: components["schemas"]["enabled-organizations"];
      /** The API URL to use to get or set the selected organizations that are allowed to run GitHub Actions, when `enabled_organizations` is set to `selected`. */
      readonly selected_organizations_url?: string;
      readonly allowed_actions: components["schemas"]["allowed-actions"];
      readonly selected_actions_url?: components["schemas"]["selected-actions-url"];
    };
    /** Organization Simple */
    readonly "organization-simple": {
      readonly login: string;
      readonly id: number;
      readonly node_id: string;
      readonly url: string;
      readonly repos_url: string;
      readonly events_url: string;
      readonly hooks_url: string;
      readonly issues_url: string;
      readonly members_url: string;
      readonly public_members_url: string;
      readonly avatar_url: string;
      readonly description: string | null;
    };
    readonly "selected-actions": {
      /** Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization. */
      readonly github_owned_allowed: boolean;
      /** Whether actions in GitHub Marketplace from verified creators are allowed. Set to `true` to allow all GitHub Marketplace actions by verified creators. */
      readonly verified_allowed: boolean;
      /** Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`." */
      readonly patterns_allowed: readonly string[];
    };
    readonly "runner-groups-enterprise": {
      readonly id: number;
      readonly name: string;
      readonly visibility: string;
      readonly default: boolean;
      readonly selected_organizations_url?: string;
      readonly runners_url: string;
      readonly allows_public_repositories: boolean;
    };
    /** A self hosted runner */
    readonly runner: {
      /** The id of the runner. */
      readonly id: number;
      /** The name of the runner. */
      readonly name: string;
      /** The Operating System of the runner. */
      readonly os: string;
      /** The status of the runner. */
      readonly status: string;
      readonly busy: boolean;
      readonly labels: readonly {
        /** Unique identifier of the label. */
        readonly id?: number;
        /** Name of the label. */
        readonly name?: string;
        /** The type of label. Read-only labels are applied automatically when the runner is configured. */
        readonly type?: "read-only" | "custom";
      }[];
    };
    /** Runner Application */
    readonly "runner-application": {
      readonly os: string;
      readonly architecture: string;
      readonly download_url: string;
      readonly filename: string;
    };
    /** Authentication Token */
    readonly "authentication-token": {
      /** The token used for authentication */
      readonly token: string;
      /** The time this token expires */
      readonly expires_at: string;
      readonly permissions?: { readonly [key: string]: any };
      /** The repositories this token has access to */
      readonly repositories?: readonly components["schemas"]["repository"][];
      readonly single_file?: string | null;
      /** Describe whether all repositories have been selected or there's a selection involved */
      readonly repository_selection?: "all" | "selected";
    };
    readonly "audit-log-event": {
      /** The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). */
      readonly "@timestamp"?: number;
      /** The name of the action that was performed, for example `user.login` or `repo.create`. */
      readonly action?: string;
      readonly active?: boolean;
      readonly active_was?: boolean;
      /** The actor who performed the action. */
      readonly actor?: string;
      /** The username of the account being blocked. */
      readonly blocked_user?: string;
      readonly business?: string;
      readonly config?: readonly any[];
      readonly config_was?: readonly any[];
      readonly content_type?: string;
      /** The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time). */
      readonly created_at?: number;
      readonly deploy_key_fingerprint?: string;
      readonly emoji?: string;
      readonly events?: readonly any[];
      readonly events_were?: readonly any[];
      readonly explanation?: string;
      readonly fingerprint?: string;
      readonly hook_id?: number;
      readonly limited_availability?: boolean;
      readonly message?: string;
      readonly name?: string;
      readonly old_user?: string;
      readonly openssh_public_key?: string;
      readonly org?: string;
      readonly previous_visibility?: string;
      readonly read_only?: boolean;
      /** The name of the repository. */
      readonly repo?: string;
      /** The name of the repository. */
      readonly repository?: string;
      readonly repository_public?: boolean;
      readonly target_login?: string;
      readonly team?: string;
      /** The type of protocol (for example, HTTP or SSH) used to transfer Git data. */
      readonly transport_protocol?: number;
      /** A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data. */
      readonly transport_protocol_name?: string;
      /** The user that was affected by the action performed (if available). */
      readonly user?: string;
      /** The repository visibility, for example `public` or `private`. */
      readonly visibility?: string;
    };
    readonly "actions-billing-usage": {
      /** The sum of the free and paid GitHub Actions minutes used. */
      readonly total_minutes_used: number;
      /** The total paid GitHub Actions minutes used. */
      readonly total_paid_minutes_used: number;
      /** The amount of free GitHub Actions minutes available. */
      readonly included_minutes: number;
      readonly minutes_used_breakdown: {
        /** Total minutes used on Ubuntu runner machines. */
        readonly UBUNTU?: number;
        /** Total minutes used on macOS runner machines. */
        readonly MACOS?: number;
        /** Total minutes used on Windows runner machines. */
        readonly WINDOWS?: number;
      };
    };
    readonly "packages-billing-usage": {
      /** Sum of the free and paid storage space (GB) for GitHuub Packages. */
      readonly total_gigabytes_bandwidth_used: number;
      /** Total paid storage space (GB) for GitHuub Packages. */
      readonly total_paid_gigabytes_bandwidth_used: number;
      /** Free storage space (GB) for GitHub Packages. */
      readonly included_gigabytes_bandwidth: number;
    };
    readonly "combined-billing-usage": {
      /** Numbers of days left in billing cycle. */
      readonly days_left_in_billing_cycle: number;
      /** Estimated storage space (GB) used in billing cycle. */
      readonly estimated_paid_storage_for_month: number;
      /** Estimated sum of free and paid storage space (GB) used in billing cycle. */
      readonly estimated_storage_for_month: number;
    };
    /** Actor */
    readonly actor: {
      readonly id: number;
      readonly login: string;
      readonly display_login?: string;
      readonly gravatar_id: string | null;
      readonly url: string;
      readonly avatar_url: string;
    };
    /** Color-coded labels help you categorize and filter your issues (just like labels in Gmail). */
    readonly label: {
      readonly id: number;
      readonly node_id: string;
      /** URL for the label */
      readonly url: string;
      /** The name of the label. */
      readonly name: string;
      readonly description: string | null;
      /** 6-character hex code, without the leading #, identifying the color */
      readonly color: string;
      readonly default: boolean;
    };
    /** A collection of related issues and pull requests. */
    readonly milestone: {
      readonly url: string;
      readonly html_url: string;
      readonly labels_url: string;
      readonly id: number;
      readonly node_id: string;
      /** The number of the milestone. */
      readonly number: number;
      /** The state of the milestone. */
      readonly state: "open" | "closed";
      /** The title of the milestone. */
      readonly title: string;
      readonly description: string | null;
      readonly creator: components["schemas"]["simple-user"] | null;
      readonly open_issues: number;
      readonly closed_issues: number;
      readonly created_at: string;
      readonly updated_at: string;
      readonly closed_at: string | null;
      readonly due_on: string | null;
    };
    /** How the author is associated with the repository. */
    readonly author_association:
      | "COLLABORATOR"
      | "CONTRIBUTOR"
      | "FIRST_TIMER"
      | "FIRST_TIME_CONTRIBUTOR"
      | "MANNEQUIN"
      | "MEMBER"
      | "NONE"
      | "OWNER";
    /** Issue Simple */
    readonly "issue-simple": {
      readonly id: number;
      readonly node_id: string;
      readonly url: string;
      readonly repository_url: string;
      readonly labels_url: string;
      readonly comments_url: string;
      readonly events_url: string;
      readonly html_url: string;
      readonly number: number;
      readonly state: string;
      readonly title: string;
      readonly body?: string;
      readonly user: components["schemas"]["simple-user"] | null;
      readonly labels: readonly components["schemas"]["label"][];
      readonly assignee: components["schemas"]["simple-user"] | null;
      readonly assignees?:
        | readonly components["schemas"]["simple-user"][]
        | null;
      readonly milestone: components["schemas"]["milestone"] | null;
      readonly locked: boolean;
      readonly active_lock_reason?: string | null;
      readonly comments: number;
      readonly pull_request?: {
        readonly merged_at?: string | null;
        readonly diff_url: string | null;
        readonly html_url: string | null;
        readonly patch_url: string | null;
        readonly url: string | null;
      };
      readonly closed_at: string | null;
      readonly created_at: string;
      readonly updated_at: string;
      readonly author_association: components["schemas"]["author_association"];
      readonly body_html?: string;
      readonly body_text?: string;
      readonly timeline_url?: string;
      readonly repository?: components["schemas"]["repository"];
      readonly performed_via_github_app?:
        | components["schemas"]["integration"]
        | null;
    };
    readonly "reaction-rollup": {
      readonly url: string;
      readonly total_count: number;
      readonly "+1": number;
      readonly "-1": number;
      readonly laugh: number;
      readonly confused: number;
      readonly heart: number;
      readonly hooray: number;
      readonly eyes: number;
      readonly rocket: number;
    };
    /** Comments provide a way for people to collaborate on an issue. */
    readonly "issue-comment": {
      /** Unique identifier of the issue comment */
      readonly id: number;
      readonly node_id: string;
      /** URL for the issue comment */
      readonly url: string;
      /** Contents of the issue comment */
      readonly body?: string;
      readonly body_text?: string;
      readonly body_html?: string;
      readonly html_url: string;
      readonly user: components["schemas"]["simple-user"] | null;
      readonly created_at: string;
      readonly updated_at: string;
      readonly issue_url: string;
      readonly author_association: components["schemas"]["author_association"];
      readonly performed_via_github_app?:
        | components["schemas"]["integration"]
        | null;
      readonly reactions?: components["schemas"]["reaction-rollup"];
    };
    /** Event */
    readonly event: {
      readonly id: string;
      readonly type: string | null;
      readonly actor: components["schemas"]["actor"];
      readonly repo: {
        readonly id: number;
        readonly name: string;
        readonly url: string;
      };
      readonly org?: components["schemas"]["actor"];
      readonly payload: {
        readonly action: string;
        readonly issue?: components["schemas"]["issue-simple"];
        readonly comment?: components["schemas"]["issue-comment"];
        readonly pages?: readonly {
          readonly page_name?: string;
          readonly title?: string;
          readonly summary?: string | null;
          readonly action?: string;
          readonly sha?: string;
          readonly html_url?: string;
        }[];
      };
      readonly public: boolean;
      readonly created_at: string | null;
    };
    /** Hypermedia Link with Type */
    readonly "link-with-type": {
      readonly href: string;
      readonly type: string;
    };
    /** Feed */
    readonly feed: {
      readonly timeline_url: string;
      readonly user_url: string;
      readonly current_user_public_url?: string;
      readonly current_user_url?: string;
      readonly current_user_actor_url?: string;
      readonly current_user_organization_url?: string;
      readonly current_user_organization_urls?: readonly string[];
      readonly security_advisories_url?: string;
      readonly _links: {
        readonly timeline: components["schemas"]["link-with-type"];
        readonly user: components["schemas"]["link-with-type"];
        readonly security_advisories?: components["schemas"]["link-with-type"];
        readonly current_user?: components["schemas"]["link-with-type"];
        readonly current_user_public?: components["schemas"]["link-with-type"];
        readonly current_user_actor?: components["schemas"]["link-with-type"];
        readonly current_user_organization?: components["schemas"]["link-with-type"];
        readonly current_user_organizations?: readonly components["schemas"]["link-with-type"][];
      };
    };
    /** Base Gist */
    readonly "base-gist": {
      readonly url: string;
      readonly forks_url: string;
      readonly commits_url: string;
      readonly id: string;
      readonly node_id: string;
      readonly git_pull_url: string;
      readonly git_push_url: string;
      readonly html_url: string;
      readonly files: {
        readonly [key: string]: {
          readonly filename?: string;
          readonly type?: string;
          readonly language?: string;
          readonly raw_url?: string;
          readonly size?: number;
        };
      };
      readonly public: boolean;
      readonly created_at: string;
      readonly updated_at: string;
      readonly description: string | null;
      readonly comments: number;
      readonly user: components["schemas"]["simple-user"] | null;
      readonly comments_url: string;
      readonly owner?: components["schemas"]["simple-user"] | null;
      readonly truncated?: boolean;
      readonly forks?: readonly { readonly [key: string]: any }[];
      readonly history?: readonly { readonly [key: string]: any }[];
    };
    /** Gist Simple */
    readonly "gist-simple": {
      readonly url?: string;
      readonly forks_url?: string;
      readonly commits_url?: string;
      readonly id?: string;
      readonly node_id?: string;
      readonly git_pull_url?: string;
      readonly git_push_url?: string;
      readonly html_url?: string;
      readonly files?: {
        readonly [key: string]: {
          readonly filename?: string;
          readonly type?: string;
          readonly language?: string;
          readonly raw_url?: string;
          readonly size?: number;
          readonly truncated?: boolean;
          readonly content?: string;
        } | null;
      };
      readonly public?: boolean;
      readonly created_at?: string;
      readonly updated_at?: string;
      readonly description?: string | null;
      readonly comments?: number;
      readonly user?: string | null;
      readonly comments_url?: string;
      readonly owner?: components["schemas"]["simple-user"];
      readonly truncated?: boolean;
    };
    /** A comment made to a gist. */
    readonly "gist-comment": {
      readonly id: number;
      readonly node_id: string;
      readonly url: string;
      /** The comment text. */
      readonly body: string;
      readonly user: components["schemas"]["simple-user"] | null;
      readonly created_at: string;
      readonly updated_at: string;
      readonly author_association: components["schemas"]["author_association"];
    };
    /** Gist Commit */
    readonly "gist-commit": {
      readonly url: string;
      readonly version: string;
      readonly user: components["schemas"]["simple-user"] | null;
      readonly change_status: {
        readonly total?: number;
        readonly additions?: number;
        readonly deletions?: number;
      };
      readonly committed_at: string;
    };
    /** Gitignore Template */
    readonly "gitignore-template": {
      readonly name: string;
      readonly source: string;
    };
    /** Issues are a great way to keep track of tasks, enhancements, and bugs for your projects. */
    readonly issue: {
      readonly id: number;
      readonly node_id: string;
      /** URL for the issue */
      readonly url: string;
      readonly repository_url: string;
      readonly labels_url: string;
      readonly comments_url: string;
      readonly events_url: string;
      readonly html_url: string;
      /** Number uniquely identifying the issue within its repository */
      readonly number: number;
      /** State of the issue; either 'open' or 'closed' */
      readonly state: string;
      /** Title of the issue */
      readonly title: string;
      /** Contents of the issue */
      readonly body?: string;
      readonly user: components["schemas"]["simple-user"] | null;
      /** Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository */
      readonly labels: readonly (
        | string
        | {
            readonly id?: number;
            readonly node_id?: string;
            readonly url?: string;
            readonly name?: string;
            readonly description?: string | null;
            readonly color?: string | null;
            readonly default?: boolean;
          }
      )[];
      readonly assignee: components["schemas"]["simple-user"] | null;
      readonly assignees?:
        | readonly components["schemas"]["simple-user"][]
        | null;
      readonly milestone: components["schemas"]["milestone"] | null;
      readonly locked: boolean;
      readonly active_lock_reason?: string | null;
      readonly comments: number;
      readonly pull_request?: {
        readonly merged_at?: string | null;
        readonly diff_url: string | null;
        readonly html_url: string | null;
        readonly patch_url: string | null;
        readonly url: string | null;
      };
      readonly closed_at: string | null;
      readonly created_at: string;
      readonly updated_at: string;
      readonly closed_by?: components["schemas"]["simple-user"] | null;
      readonly body_html?: string;
      readonly body_text?: string;
      readonly timeline_url?: string;
      readonly repository?: components["schemas"]["repository"];
      readonly performed_via_github_app?:
        | components["schemas"]["integration"]
        | null;
      readonly author_association: components["schemas"]["author_association"];
      readonly reactions?: components["schemas"]["reaction-rollup"];
    };
    /** License */
    readonly license: {
      readonly key: string;
      readonly name: string;
      readonly spdx_id: string | null;
      readonly url: string | null;
      readonly node_id: string;
      readonly html_url: string;
      readonly description: string;
      readonly implementation: string;
      readonly permissions: readonly string[];
      readonly conditions: readonly string[];
      readonly limitations: readonly string[];
      readonly body: string;
      readonly featured: boolean;
    };
    /** Marketplace Listing Plan */
    readonly "marketplace-listing-plan": {
      readonly url: string;
      readonly accounts_url: string;
      readonly id: number;
      readonly number: number;
      readonly name: string;
      readonly description: string;
      readonly monthly_price_in_cents: number;
      readonly yearly_price_in_cents: number;
      readonly price_model: string;
      readonly has_free_trial: boolean;
      readonly unit_name: string | null;
      readonly state: string;
      readonly bullets: readonly string[];
    };
    /** Marketplace Purchase */
    readonly "marketplace-purchase": {
      readonly url: string;
      readonly type: string;
      readonly id: number;
      readonly login: string;
      readonly organization_billing_email?: string;
      readonly marketplace_pending_change?: {
        readonly is_installed?: boolean;
        readonly effective_date?: string;
        readonly unit_count?: number | null;
        readonly id?: number;
        readonly plan?: components["schemas"]["marketplace-listing-plan"];
      } | null;
      readonly marketplace_purchase: {
        readonly billing_cycle?: string;
        readonly next_billing_date?: string | null;
        readonly is_installed?: boolean;
        readonly unit_count?: number | null;
        readonly on_free_trial?: boolean;
        readonly free_trial_ends_on?: string | null;
        readonly updated_at?: string;
        readonly plan?: components["schemas"]["marketplace-listing-plan"];
      };
    };
    /** Api Overview */
    readonly "api-overview": {
      readonly verifiable_password_authentication: boolean;
      readonly ssh_key_fingerprints?: {
        readonly SHA256_RSA?: string;
        readonly SHA256_DSA?: string;
      };
      readonly hooks?: readonly string[];
      readonly web?: readonly string[];
      readonly api?: readonly string[];
      readonly git?: readonly string[];
      readonly pages?: readonly string[];
      readonly importer?: readonly string[];
      readonly actions?: readonly string[];
    };
    /** Minimal Repository */
    readonly "minimal-repository": {
      readonly id: number;
      readonly node_id: string;
      readonly name: string;
      readonly full_name: string;
      readonly owner: components["schemas"]["simple-user"] | null;
      readonly private: boolean;
      readonly html_url: string;
      readonly description: string | null;
      readonly fork: boolean;
      readonly url: string;
      readonly archive_url: string;
      readonly assignees_url: string;
      readonly blobs_url: string;
      readonly branches_url: string;
      readonly collaborators_url: string;
      readonly comments_url: string;
      readonly commits_url: string;
      readonly compare_url: string;
      readonly contents_url: string;
      readonly contributors_url: string;
      readonly deployments_url: string;
      readonly downloads_url: string;
      readonly events_url: string;
      readonly forks_url: string;
      readonly git_commits_url: string;
      readonly git_refs_url: string;
      readonly git_tags_url: string;
      readonly git_url?: string;
      readonly issue_comment_url: string;
      readonly issue_events_url: string;
      readonly issues_url: string;
      readonly keys_url: string;
      readonly labels_url: string;
      readonly languages_url: string;
      readonly merges_url: string;
      readonly milestones_url: string;
      readonly notifications_url: string;
      readonly pulls_url: string;
      readonly releases_url: string;
      readonly ssh_url?: string;
      readonly stargazers_url: string;
      readonly statuses_url: string;
      readonly subscribers_url: string;
      readonly subscription_url: string;
      readonly tags_url: string;
      readonly teams_url: string;
      readonly trees_url: string;
      readonly clone_url?: string;
      readonly mirror_url?: string | null;
      readonly hooks_url: string;
      readonly svn_url?: string;
      readonly homepage?: string | null;
      readonly language?: string | null;
      readonly forks_count?: number;
      readonly stargazers_count?: number;
      readonly watchers_count?: number;
      readonly size?: number;
      readonly default_branch?: string;
      readonly open_issues_count?: number;
      readonly is_template?: boolean;
      readonly topics?: readonly string[];
      readonly has_issues?: boolean;
      readonly has_projects?: boolean;
      readonly has_wiki?: boolean;
      readonly has_pages?: boolean;
      readonly has_downloads?: boolean;
      readonly archived?: boolean;
      readonly disabled?: boolean;
      readonly visibility?: string;
      readonly pushed_at?: string | null;
      readonly created_at?: string | null;
      readonly updated_at?: string | null;
      readonly permissions?: {
        readonly admin?: boolean;
        readonly push?: boolean;
        readonly pull?: boolean;
      };
      readonly template_repository?: components["schemas"]["repository"] | null;
      readonly temp_clone_token?: string;
      readonly delete_branch_on_merge?: boolean;
      readonly subscribers_count?: number;
      readonly network_count?: number;
      readonly license?: {
        readonly key?: string;
        readonly name?: string;
        readonly spdx_id?: string;
        readonly url?: string;
        readonly node_id?: string;
      } | null;
      readonly forks?: number;
      readonly open_issues?: number;
      readonly watchers?: number;
    };
    /** Thread */
    readonly thread: {
      readonly id: string;
      readonly repository: components["schemas"]["minimal-repository"];
      readonly subject: {
        readonly title: string;
        readonly url: string;
        readonly latest_comment_url: string;
        readonly type: string;
      };
      readonly reason: string;
      readonly unread: boolean;
      readonly updated_at: string;
      readonly last_read_at: string | null;
      readonly url: string;
      readonly subscription_url: string;
    };
    /** Thread Subscription */
    readonly "thread-subscription": {
      readonly subscribed: boolean;
      readonly ignored: boolean;
      readonly reason: string | null;
      readonly created_at: string | null;
      readonly url: string;
      readonly thread_url?: string;
      readonly repository_url?: string;
    };
    /** Organization Full */
    readonly "organization-full": {
      readonly login: string;
      readonly id: number;
      readonly node_id: string;
      readonly url: string;
      readonly repos_url: string;
      readonly events_url: string;
      readonly hooks_url: string;
      readonly issues_url: string;
      readonly members_url: string;
      readonly public_members_url: string;
      readonly avatar_url: string;
      readonly description: string | null;
      readonly name?: string;
      readonly company?: string;
      readonly blog?: string;
      readonly location?: string;
      readonly email?: string;
      readonly twitter_username?: string | null;
      readonly is_verified?: boolean;
      readonly has_organization_projects: boolean;
      readonly has_repository_projects: boolean;
      readonly public_repos: number;
      readonly public_gists: number;
      readonly followers: number;
      readonly following: number;
      readonly html_url: string;
      readonly created_at: string;
      readonly type: string;
      readonly total_private_repos?: number;
      readonly owned_private_repos?: number;
      readonly private_gists?: number | null;
      readonly disk_usage?: number | null;
      readonly collaborators?: number | null;
      readonly billing_email?: string | null;
      readonly plan?: {
        readonly name: string;
        readonly space: number;
        readonly private_repos: number;
        readonly filled_seats?: number;
        readonly seats?: number;
      };
      readonly default_repository_permission?: string | null;
      readonly members_can_create_repositories?: boolean | null;
      readonly two_factor_requirement_enabled?: boolean | null;
      readonly members_allowed_repository_creation_type?: string;
      readonly members_can_create_public_repositories?: boolean;
      readonly members_can_create_private_repositories?: boolean;
      readonly members_can_create_internal_repositories?: boolean;
      readonly members_can_create_pages?: boolean;
      readonly updated_at: string;
    };
    /** The policy that controls the repositories in the organization that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`. */
    readonly "enabled-repositories": "all" | "none" | "selected";
    readonly "actions-organization-permissions": {
      readonly enabled_repositories: components["schemas"]["enabled-repositories"];
      /** The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`. */
      readonly selected_repositories_url?: string;
      readonly allowed_actions: components["schemas"]["allowed-actions"];
      readonly selected_actions_url?: components["schemas"]["selected-actions-url"];
    };
    readonly "runner-groups-org": {
      readonly id: number;
      readonly name: string;
      readonly visibility: string;
      readonly default: boolean;
      /** Link to the selected repositories resource for this runner group. Not present unless visibility was set to `selected` */
      readonly selected_repositories_url?: string;
      readonly runners_url: string;
      readonly inherited: boolean;
      readonly inherited_allows_public_repositories?: boolean;
      readonly allows_public_repositories: boolean;
    };
    /** Secrets for GitHub Actions for an organization. */
    readonly "organization-actions-secret": {
      /** The name of the secret. */
      readonly name: string;
      readonly created_at: string;
      readonly updated_at: string;
      /** Visibility of a secret */
      readonly visibility: "all" | "private" | "selected";
      readonly selected_repositories_url?: string;
    };
    /** The public key used for setting Actions Secrets. */
    readonly "actions-public-key": {
      /** The identifier for the key. */
      readonly key_id: string;
      /** The Base64 encoded public key. */
      readonly key: string;
      readonly id?: number;
      readonly url?: string;
      readonly title?: string;
      readonly created_at?: string;
    };
    /** Credential Authorization */
    readonly "credential-authorization": {
      /** User login that owns the underlying credential. */
      readonly login: string;
      /** Unique identifier for the credential. */
      readonly credential_id: number;
      /** Human-readable description of the credential type. */
      readonly credential_type: string;
      /** Last eight characters of the credential. Only included in responses with credential_type of personal access token. */
      readonly token_last_eight?: string;
      /** Date when the credential was authorized for use. */
      readonly credential_authorized_at: string;
      /** List of oauth scopes the token has been granted. */
      readonly scopes?: readonly string[];
      /** Unique string to distinguish the credential. Only included in responses with credential_type of SSH Key. */
      readonly fingerprint?: string;
      /** Date when the credential was last accessed. May be null if it was never accessed */
      readonly credential_accessed_at?: string | null;
      readonly authorized_credential_id?: number | null;
      /** The title given to the ssh key. This will only be present when the credential is an ssh key. */
      readonly authorized_credential_title?: string | null;
      /** The note given to the token. This will only be present when the credential is a token. */
      readonly authorized_credential_note?: string | null;
    };
    /** Organization Invitation */
    readonly "organization-invitation": {
      readonly id: number;
      readonly login: string | null;
      readonly email: string | null;
      readonly role: string;
      readonly created_at: string;
      readonly failed_at?: string;
      readonly failed_reason?: string;
      readonly inviter: components["schemas"]["simple-user"];
      readonly team_count: number;
      readonly invitation_team_url: string;
      readonly node_id: string;
      readonly invitation_teams_url?: string;
    };
    /** Org Hook */
    readonly "org-hook": {
      readonly id: number;
      readonly url: string;
      readonly ping_url: string;
      readonly name: string;
      readonly events: readonly string[];
      readonly active: boolean;
      readonly config: {
        readonly url?: string;
        readonly insecure_ssl?: string;
        readonly content_type?: string;
        readonly secret?: string;
      };
      readonly updated_at: string;
      readonly created_at: string;
      readonly type: string;
    };
    /** The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect. Can be one of: `existing_users`, `contributors_only`, `collaborators_only`. */
    readonly "interaction-group":
      | "existing_users"
      | "contributors_only"
      | "collaborators_only";
    /** Interaction limit settings. */
    readonly "interaction-limit-response": {
      readonly limit: components["schemas"]["interaction-group"];
      readonly origin: string;
      readonly expires_at: string;
    };
    /** The duration of the interaction restriction. Can be one of: `one_day`, `three_days`, `one_week`, `one_month`, `six_months`. Default: `one_day`. */
    readonly "interaction-expiry":
      | "one_day"
      | "three_days"
      | "one_week"
      | "one_month"
      | "six_months";
    /** Limit interactions to a specific type of user for a specified duration */
    readonly "interaction-limit": {
      readonly limit: components["schemas"]["interaction-group"];
      readonly expiry?: components["schemas"]["interaction-expiry"];
    };
    /** Groups of organization members that gives permissions on specified repositories. */
    readonly "team-simple": {
      /** Unique identifier of the team */
      readonly id: number;
      readonly node_id: string;
      /** URL for the team */
      readonly url: string;
      readonly members_url: string;
      /** Name of the team */
      readonly name: string;
      /** Description of the team */
      readonly description: string | null;
      /** Permission that the team will have for its repositories */
      readonly permission: string;
      /** The level of privacy this team should have */
      readonly privacy?: string;
      readonly html_url: string;
      readonly repositories_url: string;
      readonly slug: string;
      /** Distinguished Name (DN) that team maps to within LDAP environment */
      readonly ldap_dn?: string;
    } | null;
    /** Groups of organization members that gives permissions on specified repositories. */
    readonly team: {
      readonly id: number;
      readonly node_id: string;
      readonly name: string;
      readonly slug: string;
      readonly description: string | null;
      readonly privacy?: string;
      readonly permission: string;
      readonly url: string;
      readonly html_url: string;
      readonly members_url: string;
      readonly repositories_url: string;
      readonly parent?: components["schemas"]["team-simple"] | null;
    };
    /** Org Membership */
    readonly "org-membership": {
      readonly url: string;
      readonly state: string;
      readonly role: string;
      readonly organization_url: string;
      readonly organization: components["schemas"]["organization-simple"];
      readonly user: components["schemas"]["simple-user"] | null;
      readonly permissions?: {
        readonly can_create_repository: boolean;
      };
    };
    /** A migration. */
    readonly migration: {
      readonly id: number;
      readonly owner: components["schemas"]["simple-user"] | null;
      readonly guid: string;
      readonly state: string;
      readonly lock_repositories: boolean;
      readonly exclude_attachments: boolean;
      readonly repositories: readonly components["schemas"]["repository"][];
      readonly url: string;
      readonly created_at: string;
      readonly updated_at: string;
      readonly node_id: string;
      readonly archive_url?: string;
      readonly exclude?: readonly { readonly [key: string]: any }[];
    };
    /** A software package */
    readonly package: {
      /** Unique identifier of the package. */
      readonly id: number;
      /** The name of the package. */
      readonly name: string;
      readonly package_type:
        | "npm"
        | "maven"
        | "rubygems"
        | "docker"
        | "nuget"
        | "container";
      readonly url: string;
      readonly html_url: string;
      /** The number of versions of the package. */
      readonly version_count: number;
      readonly visibility: "private" | "public";
      readonly owner?: components["schemas"]["simple-user"] | null;
      readonly repository?: components["schemas"]["minimal-repository"] | null;
      readonly created_at: string;
      readonly updated_at: string;
    };
    /** A version of a software package */
    readonly "package-version": {
      /** Unique identifier of the package version. */
      readonly id: number;
      /** The name of the package version. */
      readonly name: string;
      readonly url: string;
      readonly package_html_url: string;
      readonly html_url?: string;
      readonly license?: string;
      readonly description?: string;
      readonly created_at: string;
      readonly updated_at: string;
      readonly deleted_at?: string;
      readonly metadata?: {
        readonly package_type:
          | "npm"
          | "maven"
          | "rubygems"
          | "docker"
          | "nuget"
          | "container";
        readonly container?: {
          readonly tags: readonly any[];
        };
        readonly docker?: {
          readonly tag?: readonly any[];
        };
      };
    };
    /** Projects are a way to organize columns and cards of work. */
    readonly project: {
      readonly owner_url: string;
      readonly url: string;
      readonly html_url: string;
      readonly columns_url: string;
      readonly id: number;
      readonly node_id: string;
      /** Name of the project */
      readonly name: string;
      /** Body of the project */
      readonly body: string | null;
      readonly number: number;
      /** State of the project; either 'open' or 'closed' */
      readonly state: string;
      readonly creator: components["schemas"]["simple-user"] | null;
      readonly created_at: string;
      readonly updated_at: string;
      /** The baseline permission that all organization members have on this project. Only present if owner is an organization. */
      readonly organization_permission?: "read" | "write" | "admin" | "none";
      /** Whether or not this project can be seen by everyone. Only present if owner is an organization. */
      readonly private?: boolean;
    };
    /** External Groups to be mapped to a team for membership */
    readonly "group-mapping": {
      /** Array of groups to be mapped to this team */
      readonly groups?: readonly {
        /** The ID of the group */
        readonly group_id: string;
        /** The name of the group */
        readonly group_name: string;
        /** a description of the group */
        readonly group_description: string;
        /** synchronization status for this group mapping */
        readonly status?: string;
        /** the time of the last sync for this group-mapping */
        readonly synced_at?: string;
      }[];
    };
    /** Groups of organization members that gives permissions on specified repositories. */
    readonly "team-full": {
      /** Unique identifier of the team */
      readonly id: number;
      readonly node_id: string;
      /** URL for the team */
      readonly url: string;
      readonly html_url: string;
      /** Name of the team */
      readonly name: string;
      readonly slug: string;
      readonly description: string | null;
      /** The level of privacy this team should have */
      readonly privacy?: "closed" | "secret";
      /** Permission that the team will have for its repositories */
      readonly permission: string;
      readonly members_url: string;
      readonly repositories_url: string;
      readonly parent?: components["schemas"]["team-simple"] | null;
      readonly members_count: number;
      readonly repos_count: number;
      readonly created_at: string;
      readonly updated_at: string;
      readonly organization: components["schemas"]["organization-full"];
      /** Distinguished Name (DN) that team maps to within LDAP environment */
      readonly ldap_dn?: string;
    };
    /** A team discussion is a persistent record of a free-form conversation within a team. */
    readonly "team-discussion": {
      readonly author: components["schemas"]["simple-user"] | null;
      /** The main text of the discussion. */
      readonly body: string;
      readonly body_html: string;
      /** The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server. */
      readonly body_version: string;
      readonly comments_count: number;
      readonly comments_url: string;
      readonly created_at: string;
      readonly last_edited_at: string | null;
      readonly html_url: string;
      readonly node_id: string;
      /** The unique sequence number of a team discussion. */
      readonly number: number;
      /** Whether or not this discussion should be pinned for easy retrieval. */
      readonly pinned: boolean;
      /** Whether or not this discussion should be restricted to team members and organization administrators. */
      readonly private: boolean;
      readonly team_url: string;
      /** The title of the discussion. */
      readonly title: string;
      readonly updated_at: string;
      readonly url: string;
      readonly reactions?: components["schemas"]["reaction-rollup"];
    };
    /** A reply to a discussion within a team. */
    readonly "team-discussion-comment": {
      readonly author: components["schemas"]["simple-user"] | null;
      /** The main text of the comment. */
      readonly body: string;
      readonly body_html: string;
      /** The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server. */
      readonly body_version: string;
      readonly created_at: string;
      readonly last_edited_at: string | null;
      readonly discussion_url: string;
      readonly html_url: string;
      readonly node_id: string;
      /** The unique sequence number of a team discussion comment. */
      readonly number: number;
      readonly updated_at: string;
      readonly url: string;
      readonly reactions?: components["schemas"]["reaction-rollup"];
    };
    /** Reactions to conversations provide a way to help people express their feelings more simply and effectively. */
    readonly reaction: {
      readonly id: number;
      readonly node_id: string;
      readonly user: components["schemas"]["simple-user"] | null;
      /** The reaction to use */
      readonly content:
        | "+1"
        | "-1"
        | "laugh"
        | "confused"
        | "heart"
        | "hooray"
        | "rocket"
        | "eyes";
      readonly created_at: string;
    };
    /** Team Membership */
    readonly "team-membership": {
      readonly url: string;
      /** The role of the user in the team. */
      readonly role: "member" | "maintainer";
      readonly state: string;
    };
    /** A team's access to a project. */
    readonly "team-project": {
      readonly owner_url: string;
      readonly url: string;
      readonly html_url: string;
      readonly columns_url: string;
      readonly id: number;
      readonly node_id: string;
      readonly name: string;
      readonly body: string | null;
      readonly number: number;
      readonly state: string;
      readonly creator: components["schemas"]["simple-user"];
      readonly created_at: string;
      readonly updated_at: string;
      /** The organization permission for this project. Only present when owner is an organization. */
      readonly organization_permission?: string;
      /** Whether the project is private or not. Only present when owner is an organization. */
      readonly private?: boolean;
      readonly permissions: {
        readonly read: boolean;
        readonly write: boolean;
        readonly admin: boolean;
      };
    };
    /** A team's access to a repository. */
    readonly "team-repository": {
      /** Unique identifier of the repository */
      readonly id: number;
      readonly node_id: string;
      /** The name of the repository. */
      readonly name: string;
      readonly full_name: string;
      readonly license: components["schemas"]["license-simple"] | null;
      readonly forks: number;
      readonly permissions?: {
        readonly admin: boolean;
        readonly pull: boolean;
        readonly triage?: boolean;
        readonly push: boolean;
        readonly maintain?: boolean;
      };
      readonly owner: components["schemas"]["simple-user"] | null;
      /** Whether the repository is private or public. */
      readonly private: boolean;
      readonly html_url: string;
      readonly description: string | null;
      readonly fork: boolean;
      readonly url: string;
      readonly archive_url: string;
      readonly assignees_url: string;
      readonly blobs_url: string;
      readonly branches_url: string;
      readonly collaborators_url: string;
      readonly comments_url: string;
      readonly commits_url: string;
      readonly compare_url: string;
      readonly contents_url: string;
      readonly contributors_url: string;
      readonly deployments_url: string;
      readonly downloads_url: string;
      readonly events_url: string;
      readonly forks_url: string;
      readonly git_commits_url: string;
      readonly git_refs_url: string;
      readonly git_tags_url: string;
      readonly git_url: string;
      readonly issue_comment_url: string;
      readonly issue_events_url: string;
      readonly issues_url: string;
      readonly keys_url: string;
      readonly labels_url: string;
      readonly languages_url: string;
      readonly merges_url: string;
      readonly milestones_url: string;
      readonly notifications_url: string;
      readonly pulls_url: string;
      readonly releases_url: string;
      readonly ssh_url: string;
      readonly stargazers_url: string;
      readonly statuses_url: string;
      readonly subscribers_url: string;
      readonly subscription_url: string;
      readonly tags_url: string;
      readonly teams_url: string;
      readonly trees_url: string;
      readonly clone_url: string;
      readonly mirror_url: string | null;
      readonly hooks_url: string;
      readonly svn_url: string;
      readonly homepage: string | null;
      readonly language: string | null;
      readonly forks_count: number;
      readonly stargazers_count: number;
      readonly watchers_count: number;
      readonly size: number;
      /** The default branch of the repository. */
      readonly default_branch: string;
      readonly open_issues_count: number;
      /** Whether this repository acts as a template that can be used to generate new repositories. */
      readonly is_template?: boolean;
      readonly topics?: readonly string[];
      /** Whether issues are enabled. */
      readonly has_issues: boolean;
      /** Whether projects are enabled. */
      readonly has_projects: boolean;
      /** Whether the wiki is enabled. */
      readonly has_wiki: boolean;
      readonly has_pages: boolean;
      /** Whether downloads are enabled. */
      readonly has_downloads: boolean;
      /** Whether the repository is archived. */
      readonly archived: boolean;
      /** Returns whether or not this repository disabled. */
      readonly disabled: boolean;
      /** The repository visibility: public, private, or internal. */
      readonly visibility?: string;
      readonly pushed_at: string | null;
      readonly created_at: string | null;
      readonly updated_at: string | null;
      /** Whether to allow rebase merges for pull requests. */
      readonly allow_rebase_merge?: boolean;
      readonly template_repository?: components["schemas"]["repository"] | null;
      readonly temp_clone_token?: string;
      /** Whether to allow squash merges for pull requests. */
      readonly allow_squash_merge?: boolean;
      /** Whether to delete head branches when pull requests are merged */
      readonly delete_branch_on_merge?: boolean;
      /** Whether to allow merge commits for pull requests. */
      readonly allow_merge_commit?: boolean;
      readonly subscribers_count?: number;
      readonly network_count?: number;
      readonly open_issues: number;
      readonly watchers: number;
      readonly master_branch?: string;
    };
    /** Project cards represent a scope of work. */
    readonly "project-card": {
      readonly url: string;
      /** The project card's ID */
      readonly id: number;
      readonly node_id: string;
      readonly note: string | null;
      readonly creator: components["schemas"]["simple-user"] | null;
      readonly created_at: string;
      readonly updated_at: string;
      /** Whether or not the card is archived */
      readonly archived?: boolean;
      readonly column_url: string;
      readonly content_url?: string;
      readonly project_url: string;
    };
    /** Project columns contain cards of work. */
    readonly "project-column": {
      readonly url: string;
      readonly project_url: string;
      readonly cards_url: string;
      /** The unique identifier of the project column */
      readonly id: number;
      readonly node_id: string;
      /** Name of the project column */
      readonly name: string;
      readonly created_at: string;
      readonly updated_at: string;
    };
    /** Repository Collaborator Permission */
    readonly "repository-collaborator-permission": {
      readonly permission: string;
      readonly user: components["schemas"]["simple-user"] | null;
    };
    readonly "rate-limit": {
      readonly limit: number;
      readonly remaining: number;
      readonly reset: number;
    };
    /** Rate Limit Overview */
    readonly "rate-limit-overview": {
      readonly resources: {
        readonly core: components["schemas"]["rate-limit"];
        readonly graphql?: components["schemas"]["rate-limit"];
        readonly search: components["schemas"]["rate-limit"];
        readonly source_import?: components["schemas"]["rate-limit"];
        readonly integration_manifest?: components["schemas"]["rate-limit"];
        readonly code_scanning_upload?: components["schemas"]["rate-limit"];
      };
      readonly rate: components["schemas"]["rate-limit"];
    };
    /** Code of Conduct Simple */
    readonly "code-of-conduct-simple": {
      readonly url: string;
      readonly key: string;
      readonly name: string;
      readonly html_url: string | null;
    };
    /** Full Repository */
    readonly "full-repository": {
      readonly id: number;
      readonly node_id: string;
      readonly name: string;
      readonly full_name: string;
      readonly owner: components["schemas"]["simple-user"] | null;
      readonly private: boolean;
      readonly html_url: string;
      readonly description: string | null;
      readonly fork: boolean;
      readonly url: string;
      readonly archive_url: string;
      readonly assignees_url: string;
      readonly blobs_url: string;
      readonly branches_url: string;
      readonly collaborators_url: string;
      readonly comments_url: string;
      readonly commits_url: string;
      readonly compare_url: string;
      readonly contents_url: string;
      readonly contributors_url: string;
      readonly deployments_url: string;
      readonly downloads_url: string;
      readonly events_url: string;
      readonly forks_url: string;
      readonly git_commits_url: string;
      readonly git_refs_url: string;
      readonly git_tags_url: string;
      readonly git_url: string;
      readonly issue_comment_url: string;
      readonly issue_events_url: string;
      readonly issues_url: string;
      readonly keys_url: string;
      readonly labels_url: string;
      readonly languages_url: string;
      readonly merges_url: string;
      readonly milestones_url: string;
      readonly notifications_url: string;
      readonly pulls_url: string;
      readonly releases_url: string;
      readonly ssh_url: string;
      readonly stargazers_url: string;
      readonly statuses_url: string;
      readonly subscribers_url: string;
      readonly subscription_url: string;
      readonly tags_url: string;
      readonly teams_url: string;
      readonly trees_url: string;
      readonly clone_url: string;
      readonly mirror_url: string | null;
      readonly hooks_url: string;
      readonly svn_url: string;
      readonly homepage: string | null;
      readonly language: string | null;
      readonly forks_count: number;
      readonly stargazers_count: number;
      readonly watchers_count: number;
      readonly size: number;
      readonly default_branch: string;
      readonly open_issues_count: number;
      readonly is_template?: boolean;
      readonly topics?: readonly string[];
      readonly has_issues: boolean;
      readonly has_projects: boolean;
      readonly has_wiki: boolean;
      readonly has_pages: boolean;
      readonly has_downloads: boolean;
      readonly archived: boolean;
      /** Returns whether or not this repository disabled. */
      readonly disabled: boolean;
      /** The repository visibility: public, private, or internal. */
      readonly visibility?: string;
      readonly pushed_at: string;
      readonly created_at: string;
      readonly updated_at: string;
      readonly permissions?: {
        readonly admin: boolean;
        readonly pull: boolean;
        readonly push: boolean;
      };
      readonly allow_rebase_merge?: boolean;
      readonly template_repository?: components["schemas"]["repository"] | null;
      readonly temp_clone_token?: string | null;
      readonly allow_squash_merge?: boolean;
      readonly delete_branch_on_merge?: boolean;
      readonly allow_merge_commit?: boolean;
      readonly subscribers_count: number;
      readonly network_count: number;
      readonly license: components["schemas"]["license-simple"] | null;
      readonly organization?: components["schemas"]["simple-user"] | null;
      readonly parent?: components["schemas"]["repository"];
      readonly source?: components["schemas"]["repository"];
      readonly forks: number;
      readonly master_branch?: string;
      readonly open_issues: number;
      readonly watchers: number;
      /** Whether anonymous git access is allowed. */
      readonly anonymous_access_enabled?: boolean;
      readonly code_of_conduct?: components["schemas"]["code-of-conduct-simple"];
    };
    /** An artifact */
    readonly artifact: {
      readonly id: number;
      readonly node_id: string;
      /** The name of the artifact. */
      readonly name: string;
      /** The size in bytes of the artifact. */
      readonly size_in_bytes: number;
      readonly url: string;
      readonly archive_download_url: string;
      /** Whether or not the artifact has expired. */
      readonly expired: boolean;
      readonly created_at: string | null;
      readonly expires_at: string;
      readonly updated_at: string | null;
    };
    /** Information of a job execution in a workflow run */
    readonly job: {
      /** The id of the job. */
      readonly id: number;
      /** The id of the associated workflow run. */
      readonly run_id: number;
      readonly run_url: string;
      readonly node_id: string;
      /** The SHA of the commit that is being run. */
      readonly head_sha: string;
      readonly url: string;
      readonly html_url: string | null;
      /** The phase of the lifecycle that the job is currently in. */
      readonly status: "queued" | "in_progress" | "completed";
      /** The outcome of the job. */
      readonly conclusion: string | null;
      /** The time that the job started, in ISO 8601 format. */
      readonly started_at: string;
      /** The time that the job finished, in ISO 8601 format. */
      readonly completed_at: string | null;
      /** The name of the job. */
      readonly name: string;
      /** Steps in this job. */
      readonly steps?: readonly {
        /** The phase of the lifecycle that the job is currently in. */
        readonly status: "queued" | "in_progress" | "completed";
        /** The outcome of the job. */
        readonly conclusion: string | null;
        /** The name of the job. */
        readonly name: string;
        readonly number: number;
        /** The time that the step started, in ISO 8601 format. */
        readonly started_at?: string | null;
        /** The time that the job finished, in ISO 8601 format. */
        readonly completed_at?: string | null;
      }[];
      readonly check_run_url: string;
    };
    /** Whether GitHub Actions is enabled on the repository. */
    readonly "actions-enabled": boolean;
    readonly "actions-repository-permissions": {
      readonly enabled: components["schemas"]["actions-enabled"];
      readonly allowed_actions: components["schemas"]["allowed-actions"];
      readonly selected_actions_url?: components["schemas"]["selected-actions-url"];
    };
    readonly "pull-request-minimal": {
      readonly id: number;
      readonly number: number;
      readonly url: string;
      readonly head: {
        readonly ref: string;
        readonly sha: string;
        readonly repo: {
          readonly id: number;
          readonly url: string;
          readonly name: string;
        };
      };
      readonly base: {
        readonly ref: string;
        readonly sha: string;
        readonly repo: {
          readonly id: number;
          readonly url: string;
          readonly name: string;
        };
      };
    };
    /** Simple Commit */
    readonly "simple-commit": {
      readonly id: string;
      readonly tree_id: string;
      readonly message: string;
      readonly timestamp: string;
      readonly author: {
        readonly name: string;
        readonly email: string;
      } | null;
      readonly committer: {
        readonly name: string;
        readonly email: string;
      } | null;
    };
    /** An invocation of a workflow */
    readonly "workflow-run": {
      /** The ID of the workflow run. */
      readonly id: number;
      /** The name of the workflow run. */
      readonly name?: string;
      readonly node_id: string;
      readonly head_branch: string | null;
      /** The SHA of the head commit that points to the version of the worflow being run. */
      readonly head_sha: string;
      /** The auto incrementing run number for the workflow run. */
      readonly run_number: number;
      readonly event: string;
      readonly status: string | null;
      readonly conclusion: string | null;
      /** The ID of the parent workflow. */
      readonly workflow_id: number;
      /** The URL to the workflow run. */
      readonly url: string;
      readonly html_url: string;
      readonly pull_requests:
        | readonly components["schemas"]["pull-request-minimal"][]
        | null;
      readonly created_at: string;
      readonly updated_at: string;
      /** The URL to the jobs for the workflow run. */
      readonly jobs_url: string;
      /** The URL to download the logs for the workflow run. */
      readonly logs_url: string;
      /** The URL to the associated check suite. */
      readonly check_suite_url: string;
      /** The URL to the artifacts for the workflow run. */
      readonly artifacts_url: string;
      /** The URL to cancel the workflow run. */
      readonly cancel_url: string;
      /** The URL to rerun the workflow run. */
      readonly rerun_url: string;
      /** The URL to the workflow. */
      readonly workflow_url: string;
      readonly head_commit: components["schemas"]["simple-commit"];
      readonly repository: components["schemas"]["minimal-repository"];
      readonly head_repository: components["schemas"]["minimal-repository"];
      readonly head_repository_id?: number;
    };
    /** An entry in the reviews log for environment deployments */
    readonly "environment-approvals": {
      /** The list of environments that were approved or rejected */
      readonly environments: readonly {
        /** The id of the environment. */
        readonly id?: number;
        readonly node_id?: string;
        /** The name of the environment. */
        readonly name?: string;
        readonly url?: string;
        readonly html_url?: string;
        /** The time that the environment was created, in ISO 8601 format. */
        readonly created_at?: string;
        /** The time that the environment was last updated, in ISO 8601 format. */
        readonly updated_at?: string;
      }[];
      /** Whether deployment to the environment(s) was approved or rejected */
      readonly state: "approved" | "rejected";
      readonly user: components["schemas"]["simple-user"];
      /** The comment submitted with the deployment review */
      readonly comment: string;
    };
    /** The type of reviewer. Must be one of: `User` or `Team` */
    readonly "deployment-reviewer-type": "User" | "Team";
    /** Details of a deployment that is waiting for protection rules to pass */
    readonly "pending-deployment": {
      readonly environment: {
        /** The id of the environment. */
        readonly id?: number;
        readonly node_id?: string;
        /** The name of the environment. */
        readonly name?: string;
        readonly url?: string;
        readonly html_url?: string;
      };
      /** The set duration of the wait timer */
      readonly wait_timer: number;
      /** The time that the wait timer began. */
      readonly wait_timer_started_at: string | null;
      /** Whether the currently authenticated user can approve the deployment */
      readonly current_user_can_approve: boolean;
      /** The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed. */
      readonly reviewers: readonly {
        readonly type?: components["schemas"]["deployment-reviewer-type"];
        readonly reviewer?: Partial<components["schemas"]["simple-user"]> &
          Partial<components["schemas"]["team-simple"]>;
      }[];
    };
    /** A request for a specific ref(branch,sha,tag) to be deployed */
    readonly deployment: {
      readonly url: string;
      /** Unique identifier of the deployment */
      readonly id: number;
      readonly node_id: string;
      readonly sha: string;
      /** The ref to deploy. This can be a branch, tag, or sha. */
      readonly ref: string;
      /** Parameter to specify a task to execute */
      readonly task: string;
      readonly payload: { readonly [key: string]: any };
      readonly original_environment?: string;
      /** Name for the target deployment environment. */
      readonly environment: string;
      readonly description: string | null;
      readonly creator: components["schemas"]["simple-user"] | null;
      readonly created_at: string;
      readonly updated_at: string;
      readonly statuses_url: string;
      readonly repository_url: string;
      /** Specifies if the given environment is will no longer exist at some point in the future. Default: false. */
      readonly transient_environment?: boolean;
      /** Specifies if the given environment is one that end-users directly interact with. Default: false. */
      readonly production_environment?: boolean;
      readonly performed_via_github_app?:
        | components["schemas"]["integration"]
        | null;
    };
    /** Workflow Run Usage */
    readonly "workflow-run-usage": {
      readonly billable: {
        readonly UBUNTU?: {
          readonly total_ms: number;
          readonly jobs: number;
        };
        readonly MACOS?: {
          readonly total_ms: number;
          readonly jobs: number;
        };
        readonly WINDOWS?: {
          readonly total_ms: number;
          readonly jobs: number;
        };
      };
      readonly run_duration_ms: number;
    };
    /** Set secrets for GitHub Actions. */
    readonly "actions-secret": {
      /** The name of the secret. */
      readonly name: string;
      readonly created_at: string;
      readonly updated_at: string;
    };
    /** A GitHub Actions workflow */
    readonly workflow: {
      readonly id: number;
      readonly node_id: string;
      readonly name: string;
      readonly path: string;
      readonly state: "active" | "deleted";
      readonly created_at: string;
      readonly updated_at: string;
      readonly url: string;
      readonly html_url: string;
      readonly badge_url: string;
      readonly deleted_at?: string;
    };
    /** Workflow Usage */
    readonly "workflow-usage": {
      readonly billable: {
        readonly UBUNTU?: {
          readonly total_ms?: number;
        };
        readonly MACOS?: {
          readonly total_ms?: number;
        };
        readonly WINDOWS?: {
          readonly total_ms?: number;
        };
      };
    };
    /** Protected Branch Admin Enforced */
    readonly "protected-branch-admin-enforced": {
      readonly url: string;
      readonly enabled: boolean;
    };
    /** Protected Branch Pull Request Review */
    readonly "protected-branch-pull-request-review": {
      readonly url?: string;
      readonly dismissal_restrictions?: {
        /** The list of users with review dismissal access. */
        readonly users?: readonly components["schemas"]["simple-user"][];
        /** The list of teams with review dismissal access. */
        readonly teams?: readonly components["schemas"]["team"][];
        readonly url?: string;
        readonly users_url?: string;
        readonly teams_url?: string;
      };
      readonly dismiss_stale_reviews: boolean;
      readonly require_code_owner_reviews: boolean;
      readonly required_approving_review_count?: number;
    };
    /** Branch Restriction Policy */
    readonly "branch-restriction-policy": {
      readonly url: string;
      readonly users_url: string;
      readonly teams_url: string;
      readonly apps_url: string;
      readonly users: readonly {
        readonly login?: string;
        readonly id?: number;
        readonly node_id?: string;
        readonly avatar_url?: string;
        readonly gravatar_id?: string;
        readonly url?: string;
        readonly html_url?: string;
        readonly followers_url?: string;
        readonly following_url?: string;
        readonly gists_url?: string;
        readonly starred_url?: string;
        readonly subscriptions_url?: string;
        readonly organizations_url?: string;
        readonly repos_url?: string;
        readonly events_url?: string;
        readonly received_events_url?: string;
        readonly type?: string;
        readonly site_admin?: boolean;
      }[];
      readonly teams: readonly {
        readonly id?: number;
        readonly node_id?: string;
        readonly url?: string;
        readonly html_url?: string;
        readonly name?: string;
        readonly slug?: string;
        readonly description?: string | null;
        readonly privacy?: string;
        readonly permission?: string;
        readonly members_url?: string;
        readonly repositories_url?: string;
        readonly parent?: string | null;
      }[];
      readonly apps: readonly {
        readonly id?: number;
        readonly slug?: string;
        readonly node_id?: string;
        readonly owner?: {
          readonly login?: string;
          readonly id?: number;
          readonly node_id?: string;
          readonly url?: string;
          readonly repos_url?: string;
          readonly events_url?: string;
          readonly hooks_url?: string;
          readonly issues_url?: string;
          readonly members_url?: string;
          readonly public_members_url?: string;
          readonly avatar_url?: string;
          readonly description?: string;
          readonly gravatar_id?: string;
          readonly html_url?: string;
          readonly followers_url?: string;
          readonly following_url?: string;
          readonly gists_url?: string;
          readonly starred_url?: string;
          readonly subscriptions_url?: string;
          readonly organizations_url?: string;
          readonly received_events_url?: string;
          readonly type?: string;
        };
        readonly name?: string;
        readonly description?: string;
        readonly external_url?: string;
        readonly html_url?: string;
        readonly created_at?: string;
        readonly updated_at?: string;
        readonly permissions?: {
          readonly metadata?: string;
          readonly contents?: string;
          readonly issues?: string;
          readonly single_file?: string;
        };
        readonly events?: readonly string[];
      }[];
    };
    /** Branch Protection */
    readonly "branch-protection": {
      readonly url?: string;
      readonly required_status_checks: {
        readonly url?: string;
        readonly enforcement_level: string;
        readonly contexts: readonly string[];
        readonly contexts_url?: string;
      };
      readonly enforce_admins?: components["schemas"]["protected-branch-admin-enforced"];
      readonly required_pull_request_reviews?: components["schemas"]["protected-branch-pull-request-review"];
      readonly restrictions?: components["schemas"]["branch-restriction-policy"];
      readonly required_linear_history?: {
        readonly enabled?: boolean;
      };
      readonly allow_force_pushes?: {
        readonly enabled?: boolean;
      };
      readonly allow_deletions?: {
        readonly enabled?: boolean;
      };
      readonly enabled: boolean;
      readonly name?: string;
      readonly protection_url?: string;
    };
    /** Short Branch */
    readonly "short-branch": {
      readonly name: string;
      readonly commit: {
        readonly sha: string;
        readonly url: string;
      };
      readonly protected: boolean;
      readonly protection?: components["schemas"]["branch-protection"];
      readonly protection_url?: string;
    };
    /** Metaproperties for Git author/committer information. */
    readonly "git-user": {
      readonly name?: string;
      readonly email?: string;
      readonly date?: string;
    };
    readonly verification: {
      readonly verified: boolean;
      readonly reason: string;
      readonly payload: string | null;
      readonly signature: string | null;
    };
    /** Commit */
    readonly commit: {
      readonly url: string;
      readonly sha: string;
      readonly node_id: string;
      readonly html_url: string;
      readonly comments_url: string;
      readonly commit: {
        readonly url: string;
        readonly author: components["schemas"]["git-user"] | null;
        readonly committer: components["schemas"]["git-user"] | null;
        readonly message: string;
        readonly comment_count: number;
        readonly tree: {
          readonly sha: string;
          readonly url: string;
        };
        readonly verification?: components["schemas"]["verification"];
      };
      readonly author: components["schemas"]["simple-user"] | null;
      readonly committer: components["schemas"]["simple-user"] | null;
      readonly parents: readonly {
        readonly sha: string;
        readonly url: string;
        readonly html_url?: string;
      }[];
      readonly stats?: {
        readonly additions?: number;
        readonly deletions?: number;
        readonly total?: number;
      };
      readonly files?: readonly {
        readonly filename?: string;
        readonly additions?: number;
        readonly deletions?: number;
        readonly changes?: number;
        readonly status?: string;
        readonly raw_url?: string;
        readonly blob_url?: string;
        readonly patch?: string;
        readonly sha?: string;
        readonly contents_url?: string;
        readonly previous_filename?: string;
      }[];
    };
    /** Branch With Protection */
    readonly "branch-with-protection": {
      readonly name: string;
      readonly commit: components["schemas"]["commit"];
      readonly _links: {
        readonly html: string;
        readonly self: string;
      };
      readonly protected: boolean;
      readonly protection: components["schemas"]["branch-protection"];
      readonly protection_url: string;
      readonly pattern?: string;
      readonly required_approving_review_count?: number;
    };
    /** Status Check Policy */
    readonly "status-check-policy": {
      readonly url: string;
      readonly strict: boolean;
      readonly contexts: readonly string[];
      readonly contexts_url: string;
    };
    /** Branch protections protect branches */
    readonly "protected-branch": {
      readonly url: string;
      readonly required_status_checks?: components["schemas"]["status-check-policy"];
      readonly required_pull_request_reviews?: {
        readonly url: string;
        readonly dismiss_stale_reviews?: boolean;
        readonly require_code_owner_reviews?: boolean;
        readonly required_approving_review_count?: number;
        readonly dismissal_restrictions?: {
          readonly url: string;
          readonly users_url: string;
          readonly teams_url: string;
          readonly users: readonly components["schemas"]["simple-user"][];
          readonly teams: readonly components["schemas"]["team"][];
        };
      };
      readonly required_signatures?: {
        readonly url: string;
        readonly enabled: boolean;
      };
      readonly enforce_admins?: {
        readonly url: string;
        readonly enabled: boolean;
      };
      readonly required_linear_history?: {
        readonly enabled: boolean;
      };
      readonly allow_force_pushes?: {
        readonly enabled: boolean;
      };
      readonly allow_deletions?: {
        readonly enabled: boolean;
      };
      readonly restrictions?: components["schemas"]["branch-restriction-policy"];
    };
    /** A deployment created as the result of an Actions check run from a workflow that references an environment */
    readonly "deployment-simple": {
      readonly url: string;
      /** Unique identifier of the deployment */
      readonly id: number;
      readonly node_id: string;
      /** Parameter to specify a task to execute */
      readonly task: string;
      readonly original_environment?: string;
      /** Name for the target deployment environment. */
      readonly environment: string;
      readonly description: string | null;
      readonly created_at: string;
      readonly updated_at: string;
      readonly statuses_url: string;
      readonly repository_url: string;
      /** Specifies if the given environment is will no longer exist at some point in the future. Default: false. */
      readonly transient_environment?: boolean;
      /** Specifies if the given environment is one that end-users directly interact with. Default: false. */
      readonly production_environment?: boolean;
      readonly performed_via_github_app?:
        | components["schemas"]["integration"]
        | null;
    };
    /** A check performed on the code of a given code change */
    readonly "check-run": {
      /** The id of the check. */
      readonly id: number;
      /** The SHA of the commit that is being checked. */
      readonly head_sha: string;
      readonly node_id: string;
      readonly external_id: string | null;
      readonly url: string;
      readonly html_url: string | null;
      readonly details_url: string | null;
      /** The phase of the lifecycle that the check is currently in. */
      readonly status: "queued" | "in_progress" | "completed";
      readonly conclusion:
        | (
            | "success"
            | "failure"
            | "neutral"
            | "cancelled"
            | "skipped"
            | "timed_out"
            | "action_required"
          )
        | null;
      readonly started_at: string | null;
      readonly completed_at: string | null;
      readonly output: {
        readonly title: string | null;
        readonly summary: string | null;
        readonly text: string | null;
        readonly annotations_count: number;
        readonly annotations_url: string;
      };
      /** The name of the check. */
      readonly name: string;
      readonly check_suite: {
        readonly id: number;
      } | null;
      readonly app: components["schemas"]["integration"] | null;
      readonly pull_requests: readonly components["schemas"]["pull-request-minimal"][];
      readonly deployment?: components["schemas"]["deployment-simple"];
    };
    /** Check Annotation */
    readonly "check-annotation": {
      readonly path: string;
      readonly start_line: number;
      readonly end_line: number;
      readonly start_column: number | null;
      readonly end_column: number | null;
      readonly annotation_level: string | null;
      readonly title: string | null;
      readonly message: string | null;
      readonly raw_details: string | null;
      readonly blob_href: string;
    };
    /** A suite of checks performed on the code of a given code change */
    readonly "check-suite": {
      readonly id: number;
      readonly node_id: string;
      readonly head_branch: string | null;
      /** The SHA of the head commit that is being checked. */
      readonly head_sha: string;
      readonly status: ("queued" | "in_progress" | "completed") | null;
      readonly conclusion:
        | (
            | "success"
            | "failure"
            | "neutral"
            | "cancelled"
            | "skipped"
            | "timed_out"
            | "action_required"
          )
        | null;
      readonly url: string | null;
      readonly before: string | null;
      readonly after: string | null;
      readonly pull_requests:
        | readonly components["schemas"]["pull-request-minimal"][]
        | null;
      readonly app: components["schemas"]["integration"] | null;
      readonly repository: components["schemas"]["minimal-repository"];
      readonly created_at: string | null;
      readonly updated_at: string | null;
      readonly head_commit: components["schemas"]["simple-commit"];
      readonly latest_check_runs_count: number;
      readonly check_runs_url: string;
    };
    /** Check suite configuration preferences for a repository. */
    readonly "check-suite-preference": {
      readonly preferences: {
        readonly auto_trigger_checks?: readonly {
          readonly app_id: number;
          readonly setting: boolean;
        }[];
      };
      readonly repository: components["schemas"]["repository"];
    };
    /** The name of the tool used to generate the code scanning analysis. */
    readonly "code-scanning-analysis-tool-name": string;
    /** The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data. */
    readonly "code-scanning-analysis-tool-guid": string | null;
    /** The full Git reference, formatted as `refs/heads/<branch name>`. */
    readonly "code-scanning-ref": string;
    /** State of a code scanning alert. */
    readonly "code-scanning-alert-state": "open" | "dismissed" | "fixed";
    /** The security alert number. */
    readonly "alert-number": number;
    /** The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    readonly "alert-created-at": string;
    /** The REST API URL of the alert resource. */
    readonly "alert-url": string;
    /** The GitHub URL of the alert resource. */
    readonly "alert-html-url": string;
    /** The REST API URL for fetching the list of instances for an alert. */
    readonly "alert-instances-url": string;
    /** The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    readonly "code-scanning-alert-dismissed-at": string | null;
    /** **Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`. */
    readonly "code-scanning-alert-dismissed-reason": string | null;
    readonly "code-scanning-alert-rule-summary": {
      /** A unique identifier for the rule used to detect the alert. */
      readonly id?: string | null;
      /** The name of the rule used to detect the alert. */
      readonly name?: string;
      /** The severity of the alert. */
      readonly severity?: ("none" | "note" | "warning" | "error") | null;
      /** A short description of the rule used to detect the alert. */
      readonly description?: string;
    };
    /** The version of the tool used to generate the code scanning analysis. */
    readonly "code-scanning-analysis-tool-version": string | null;
    readonly "code-scanning-analysis-tool": {
      readonly name?: components["schemas"]["code-scanning-analysis-tool-name"];
      readonly version?: components["schemas"]["code-scanning-analysis-tool-version"];
      readonly guid?: components["schemas"]["code-scanning-analysis-tool-guid"];
    };
    /** Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name. */
    readonly "code-scanning-analysis-analysis-key": string;
    /** Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed. */
    readonly "code-scanning-alert-environment": string;
    /** Describe a region within a file for the alert. */
    readonly "code-scanning-alert-location": {
      readonly path?: string;
      readonly start_line?: number;
      readonly end_line?: number;
      readonly start_column?: number;
      readonly end_column?: number;
    };
    /** A classification of the file. For example to identify it as generated. */
    readonly "code-scanning-alert-classification":
      | ("source" | "generated" | "test" | "library")
      | null;
    readonly "code-scanning-alert-instance": {
      readonly ref?: components["schemas"]["code-scanning-ref"];
      readonly analysis_key?: components["schemas"]["code-scanning-analysis-analysis-key"];
      readonly environment?: components["schemas"]["code-scanning-alert-environment"];
      readonly state?: components["schemas"]["code-scanning-alert-state"];
      readonly commit_sha?: string;
      readonly message?: {
        readonly text?: string;
      };
      readonly location?: components["schemas"]["code-scanning-alert-location"];
      readonly html_url?: string;
      /**
       * Classifications that have been applied to the file that triggered the alert.
       * For example identifying it as documentation, or a generated file.
       */
      readonly classifications?: readonly components["schemas"]["code-scanning-alert-classification"][];
    };
    readonly "code-scanning-alert-items": {
      readonly number: components["schemas"]["alert-number"];
      readonly created_at: components["schemas"]["alert-created-at"];
      readonly url: components["schemas"]["alert-url"];
      readonly html_url: components["schemas"]["alert-html-url"];
      readonly instances_url: components["schemas"]["alert-instances-url"];
      readonly state: components["schemas"]["code-scanning-alert-state"];
      readonly dismissed_by: components["schemas"]["simple-user"];
      readonly dismissed_at: components["schemas"]["code-scanning-alert-dismissed-at"];
      readonly dismissed_reason: components["schemas"]["code-scanning-alert-dismissed-reason"];
      readonly rule: components["schemas"]["code-scanning-alert-rule-summary"];
      readonly tool: components["schemas"]["code-scanning-analysis-tool"];
      readonly most_recent_instance: components["schemas"]["code-scanning-alert-instance"];
    };
    readonly "code-scanning-alert-rule": {
      /** A unique identifier for the rule used to detect the alert. */
      readonly id?: string | null;
      /** The name of the rule used to detect the alert. */
      readonly name?: string;
      /** The severity of the alert. */
      readonly severity?: ("none" | "note" | "warning" | "error") | null;
      /** A short description of the rule used to detect the alert. */
      readonly description?: string;
      /** description of the rule used to detect the alert. */
      readonly full_description?: string;
      /** A set of tags applicable for the rule. */
      readonly tags?: readonly string[];
      /** Detailed documentation for the rule as GitHub Flavored Markdown. */
      readonly help?: string;
    };
    readonly "code-scanning-alert": {
      readonly number: components["schemas"]["alert-number"];
      readonly created_at: components["schemas"]["alert-created-at"];
      readonly url: components["schemas"]["alert-url"];
      readonly html_url: components["schemas"]["alert-html-url"];
      readonly instances_url: components["schemas"]["alert-instances-url"];
      readonly state: components["schemas"]["code-scanning-alert-state"];
      readonly dismissed_by: components["schemas"]["simple-user"];
      readonly dismissed_at: components["schemas"]["code-scanning-alert-dismissed-at"];
      readonly dismissed_reason: components["schemas"]["code-scanning-alert-dismissed-reason"];
      readonly rule: components["schemas"]["code-scanning-alert-rule"];
      readonly tool: components["schemas"]["code-scanning-analysis-tool"];
      readonly most_recent_instance: components["schemas"]["code-scanning-alert-instance"];
    };
    /** Sets the state of the code scanning alert. Can be one of `open` or `dismissed`. You must provide `dismissed_reason` when you set the state to `dismissed`. */
    readonly "code-scanning-alert-set-state": "open" | "dismissed";
    /** An identifier for the upload. */
    readonly "code-scanning-analysis-sarif-id": string;
    /** The SHA of the commit to which the analysis you are uploading relates. */
    readonly "code-scanning-analysis-commit-sha": string;
    /** Identifies the variable values associated with the environment in which this analysis was performed. */
    readonly "code-scanning-analysis-environment": string;
    /** The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
    readonly "code-scanning-analysis-created-at": string;
    /** The REST API URL of the analysis resource. */
    readonly "code-scanning-analysis-url": string;
    readonly "code-scanning-analysis": {
      readonly ref: components["schemas"]["code-scanning-ref"];
      readonly commit_sha: components["schemas"]["code-scanning-analysis-commit-sha"];
      readonly analysis_key: components["schemas"]["code-scanning-analysis-analysis-key"];
      readonly environment: components["schemas"]["code-scanning-analysis-environment"];
      readonly error: string;
      readonly created_at: components["schemas"]["code-scanning-analysis-created-at"];
      /** The total number of results in the analysis. */
      readonly results_count: number;
      /** The total number of rules used in the analysis. */
      readonly rules_count: number;
      /** Unique identifier for this analysis. */
      readonly id: number;
      readonly url: components["schemas"]["code-scanning-analysis-url"];
      readonly sarif_id: components["schemas"]["code-scanning-analysis-sarif-id"];
      readonly tool: components["schemas"]["code-scanning-analysis-tool"];
      readonly deletable: boolean;
    };
    /** Successful deletion of a code scanning analysis */
    readonly "code-scanning-analysis-deletion": {
      /** Next deletable analysis in chain, without last analysis deletion confirmation */
      readonly next_analysis_url: string | null;
      /** Next deletable analysis in chain, with last analysis deletion confirmation */
      readonly confirm_delete_url: string | null;
    };
    /** Scim Error */
    readonly "scim-error": {
      readonly message?: string | null;
      readonly documentation_url?: string | null;
      readonly detail?: string | null;
      readonly status?: number;
      readonly scimType?: string | null;
      readonly schemas?: readonly string[];
    };
    /** A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/github/finding-security-vulnerabilities-and-errors-in-your-code/sarif-support-for-code-scanning)." */
    readonly "code-scanning-analysis-sarif-file": string;
    readonly "code-scanning-sarifs-receipt": {
      readonly id?: components["schemas"]["code-scanning-analysis-sarif-id"];
      /** The REST API URL for checking the status of the upload. */
      readonly url?: string;
    };
    readonly "code-scanning-sarifs-status": {
      /** `pending` files have not yet been processed, while `complete` means all results in the SARIF have been stored. */
      readonly processing_status?: "pending" | "complete";
      /** The REST API URL for getting the analyses associated with the upload. */
      readonly analyses_url?: string | null;
    };
    /** Collaborator */
    readonly collaborator: {
      readonly login: string;
      readonly id: number;
      readonly node_id: string;
      readonly avatar_url: string;
      readonly gravatar_id: string | null;
      readonly url: string;
      readonly html_url: string;
      readonly followers_url: string;
      readonly following_url: string;
      readonly gists_url: string;
      readonly starred_url: string;
      readonly subscriptions_url: string;
      readonly organizations_url: string;
      readonly repos_url: string;
      readonly events_url: string;
      readonly received_events_url: string;
      readonly type: string;
      readonly site_admin: boolean;
      readonly permissions?: {
        readonly pull: boolean;
        readonly push: boolean;
        readonly admin: boolean;
      };
    };
    /** Repository invitations let you manage who you collaborate with. */
    readonly "repository-invitation": {
      /** Unique identifier of the repository invitation. */
      readonly id: number;
      readonly repository: components["schemas"]["minimal-repository"];
      readonly invitee: components["schemas"]["simple-user"] | null;
      readonly inviter: components["schemas"]["simple-user"] | null;
      /** The permission associated with the invitation. */
      readonly permissions: "read" | "write" | "admin";
      readonly created_at: string;
      /** Whether or not the invitation has expired */
      readonly expired?: boolean;
      /** URL for the repository invitation */
      readonly url: string;
      readonly html_url: string;
      readonly node_id: string;
    };
    /** Commit Comment */
    readonly "commit-comment": {
      readonly html_url: string;
      readonly url: string;
      readonly id: number;
      readonly node_id: string;
      readonly body: string;
      readonly path: string | null;
      readonly position: number | null;
      readonly line: number | null;
      readonly commit_id: string;
      readonly user: components["schemas"]["simple-user"] | null;
      readonly created_at: string;
      readonly updated_at: string;
      readonly author_association: components["schemas"]["author_association"];
      readonly reactions?: components["schemas"]["reaction-rollup"];
    };
    /** Branch Short */
    readonly "branch-short": {
      readonly name: string;
      readonly commit: {
        readonly sha: string;
        readonly url: string;
      };
      readonly protected: boolean;
    };
    /** Hypermedia Link */
    readonly link: {
      readonly href: string;
    };
    /** The status of auto merging a pull request. */
    readonly auto_merge: {
      readonly enabled_by: components["schemas"]["simple-user"];
      /** The merge method to use. */
      readonly merge_method: "merge" | "squash" | "rebase";
      /** Title for the merge commit message. */
      readonly commit_title: string;
      /** Commit message for the merge commit. */
      readonly commit_message: string;
    } | null;
    /** Pull Request Simple */
    readonly "pull-request-simple": {
      readonly url: string;
      readonly id: number;
      readonly node_id: string;
      readonly html_url: string;
      readonly diff_url: string;
      readonly patch_url: string;
      readonly issue_url: string;
      readonly commits_url: string;
      readonly review_comments_url: string;
      readonly review_comment_url: string;
      readonly comments_url: string;
      readonly statuses_url: string;
      readonly number: number;
      readonly state: string;
      readonly locked: boolean;
      readonly title: string;
      readonly user: components["schemas"]["simple-user"] | null;
      readonly body: string | null;
      readonly labels: readonly {
        readonly id?: number;
        readonly node_id?: string;
        readonly url?: string;
        readonly name?: string;
        readonly description?: string;
        readonly color?: string;
        readonly default?: boolean;
      }[];
      readonly milestone: components["schemas"]["milestone"] | null;
      readonly active_lock_reason?: string | null;
      readonly created_at: string;
      readonly updated_at: string;
      readonly closed_at: string | null;
      readonly merged_at: string | null;
      readonly merge_commit_sha: string | null;
      readonly assignee: components["schemas"]["simple-user"] | null;
      readonly assignees?:
        | readonly components["schemas"]["simple-user"][]
        | null;
      readonly requested_reviewers?:
        | readonly components["schemas"]["simple-user"][]
        | null;
      readonly requested_teams?:
        | readonly components["schemas"]["team-simple"][]
        | null;
      readonly head: {
        readonly label: string;
        readonly ref: string;
        readonly repo: components["schemas"]["repository"];
        readonly sha: string;
        readonly user: components["schemas"]["simple-user"] | null;
      };
      readonly base: {
        readonly label: string;
        readonly ref: string;
        readonly repo: components["schemas"]["repository"];
        readonly sha: string;
        readonly user: components["schemas"]["simple-user"] | null;
      };
      readonly _links: {
        readonly comments: components["schemas"]["link"];
        readonly commits: components["schemas"]["link"];
        readonly statuses: components["schemas"]["link"];
        readonly html: components["schemas"]["link"];
        readonly issue: components["schemas"]["link"];
        readonly review_comments: components["schemas"]["link"];
        readonly review_comment: components["schemas"]["link"];
        readonly self: components["schemas"]["link"];
      };
      readonly author_association: components["schemas"]["author_association"];
      readonly auto_merge: components["schemas"]["auto_merge"];
      /** Indicates whether or not the pull request is a draft. */
      readonly draft?: boolean;
    };
    readonly "simple-commit-status": {
      readonly description: string | null;
      readonly id: number;
      readonly node_id: string;
      readonly state: string;
      readonly context: string;
      readonly target_url: string;
      readonly required?: boolean | null;
      readonly avatar_url: string | null;
      readonly url: string;
      readonly created_at: string;
      readonly updated_at: string;
    };
    /** Combined Commit Status */
    readonly "combined-commit-status": {
      readonly state: string;
      readonly statuses: readonly components["schemas"]["simple-commit-status"][];
      readonly sha: string;
      readonly total_count: number;
      readonly repository: components["schemas"]["minimal-repository"];
      readonly commit_url: string;
      readonly url: string;
    };
    /** The status of a commit. */
    readonly status: {
      readonly url: string;
      readonly avatar_url: string | null;
      readonly id: number;
      readonly node_id: string;
      readonly state: string;
      readonly description: string;
      readonly target_url: string;
      readonly context: string;
      readonly created_at: string;
      readonly updated_at: string;
      readonly creator: components["schemas"]["simple-user"];
    };
    readonly "community-health-file": {
      readonly url: string;
      readonly html_url: string;
    };
    /** Community Profile */
    readonly "community-profile": {
      readonly health_percentage: number;
      readonly description: string | null;
      readonly documentation: string | null;
      readonly files: {
        readonly code_of_conduct:
          | components["schemas"]["code-of-conduct-simple"]
          | null;
        readonly license: components["schemas"]["license-simple"] | null;
        readonly contributing:
          | components["schemas"]["community-health-file"]
          | null;
        readonly readme: components["schemas"]["community-health-file"] | null;
        readonly issue_template:
          | components["schemas"]["community-health-file"]
          | null;
        readonly pull_request_template:
          | components["schemas"]["community-health-file"]
          | null;
      };
      readonly updated_at: string | null;
      readonly content_reports_enabled?: boolean;
    };
    /** Diff Entry */
    readonly "diff-entry": {
      readonly sha: string;
      readonly filename: string;
      readonly status: string;
      readonly additions: number;
      readonly deletions: number;
      readonly changes: number;
      readonly blob_url: string;
      readonly raw_url: string;
      readonly contents_url: string;
      readonly patch?: string;
      readonly previous_filename?: string;
    };
    /** Commit Comparison */
    readonly "commit-comparison": {
      readonly url: string;
      readonly html_url: string;
      readonly permalink_url: string;
      readonly diff_url: string;
      readonly patch_url: string;
      readonly base_commit: components["schemas"]["commit"];
      readonly merge_base_commit: components["schemas"]["commit"];
      readonly status: "diverged" | "ahead" | "behind" | "identical";
      readonly ahead_by: number;
      readonly behind_by: number;
      readonly total_commits: number;
      readonly commits: readonly components["schemas"]["commit"][];
      readonly files: readonly components["schemas"]["diff-entry"][];
    };
    /** Content Tree */
    readonly "content-tree": {
      readonly type: string;
      readonly size: number;
      readonly name: string;
      readonly path: string;
      readonly sha: string;
      readonly url: string;
      readonly git_url: string | null;
      readonly html_url: string | null;
      readonly download_url: string | null;
      readonly entries?: readonly {
        readonly type: string;
        readonly size: number;
        readonly name: string;
        readonly path: string;
        readonly content?: string;
        readonly sha: string;
        readonly url: string;
        readonly git_url: string | null;
        readonly html_url: string | null;
        readonly download_url: string | null;
        readonly _links: {
          readonly git: string | null;
          readonly html: string | null;
          readonly self: string;
        };
      }[];
      readonly _links: {
        readonly git: string | null;
        readonly html: string | null;
        readonly self: string;
      };
    };
    /** A list of directory items */
    readonly "content-directory": readonly {
      readonly type: string;
      readonly size: number;
      readonly name: string;
      readonly path: string;
      readonly content?: string;
      readonly sha: string;
      readonly url: string;
      readonly git_url: string | null;
      readonly html_url: string | null;
      readonly download_url: string | null;
      readonly _links: {
        readonly git: string | null;
        readonly html: string | null;
        readonly self: string;
      };
    }[];
    /** Content File */
    readonly "content-file": {
      readonly type: string;
      readonly encoding: string;
      readonly size: number;
      readonly name: string;
      readonly path: string;
      readonly content: string;
      readonly sha: string;
      readonly url: string;
      readonly git_url: string | null;
      readonly html_url: string | null;
      readonly download_url: string | null;
      readonly _links: {
        readonly git: string | null;
        readonly html: string | null;
        readonly self: string;
      };
      readonly target?: string;
      readonly submodule_git_url?: string;
    };
    /** An object describing a symlink */
    readonly "content-symlink": {
      readonly type: string;
      readonly target: string;
      readonly size: number;
      readonly name: string;
      readonly path: string;
      readonly sha: string;
      readonly url: string;
      readonly git_url: string | null;
      readonly html_url: string | null;
      readonly download_url: string | null;
      readonly _links: {
        readonly git: string | null;
        readonly html: string | null;
        readonly self: string;
      };
    };
    /** An object describing a symlink */
    readonly "content-submodule": {
      readonly type: string;
      readonly submodule_git_url: string;
      readonly size: number;
      readonly name: string;
      readonly path: string;
      readonly sha: string;
      readonly url: string;
      readonly git_url: string | null;
      readonly html_url: string | null;
      readonly download_url: string | null;
      readonly _links: {
        readonly git: string | null;
        readonly html: string | null;
        readonly self: string;
      };
    };
    /** File Commit */
    readonly "file-commit": {
      readonly content: {
        readonly name?: string;
        readonly path?: string;
        readonly sha?: string;
        readonly size?: number;
        readonly url?: string;
        readonly html_url?: string;
        readonly git_url?: string;
        readonly download_url?: string;
        readonly type?: string;
        readonly _links?: {
          readonly self?: string;
          readonly git?: string;
          readonly html?: string;
        };
      } | null;
      readonly commit: {
        readonly sha?: string;
        readonly node_id?: string;
        readonly url?: string;
        readonly html_url?: string;
        readonly author?: {
          readonly date?: string;
          readonly name?: string;
          readonly email?: string;
        };
        readonly committer?: {
          readonly date?: string;
          readonly name?: string;
          readonly email?: string;
        };
        readonly message?: string;
        readonly tree?: {
          readonly url?: string;
          readonly sha?: string;
        };
        readonly parents?: readonly {
          readonly url?: string;
          readonly html_url?: string;
          readonly sha?: string;
        }[];
        readonly verification?: {
          readonly verified?: boolean;
          readonly reason?: string;
          readonly signature?: string | null;
          readonly payload?: string | null;
        };
      };
    };
    /** Contributor */
    readonly contributor: {
      readonly login?: string;
      readonly id?: number;
      readonly node_id?: string;
      readonly avatar_url?: string;
      readonly gravatar_id?: string | null;
      readonly url?: string;
      readonly html_url?: string;
      readonly followers_url?: string;
      readonly following_url?: string;
      readonly gists_url?: string;
      readonly starred_url?: string;
      readonly subscriptions_url?: string;
      readonly organizations_url?: string;
      readonly repos_url?: string;
      readonly events_url?: string;
      readonly received_events_url?: string;
      readonly type: string;
      readonly site_admin?: boolean;
      readonly contributions: number;
      readonly email?: string;
      readonly name?: string;
    };
    /** The status of a deployment. */
    readonly "deployment-status": {
      readonly url: string;
      readonly id: number;
      readonly node_id: string;
      /** The state of the status. */
      readonly state:
        | "error"
        | "failure"
        | "inactive"
        | "pending"
        | "success"
        | "queued"
        | "in_progress";
      readonly creator: components["schemas"]["simple-user"] | null;
      /** A short description of the status. */
      readonly description: string;
      /** The environment of the deployment that the status is for. */
      readonly environment?: string;
      /** Deprecated: the URL to associate with this status. */
      readonly target_url: string;
      readonly created_at: string;
      readonly updated_at: string;
      readonly deployment_url: string;
      readonly repository_url: string;
      /** The URL for accessing your environment. */
      readonly environment_url?: string;
      /** The URL to associate with this status. */
      readonly log_url?: string;
      readonly performed_via_github_app?:
        | components["schemas"]["integration"]
        | null;
    };
    /** The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days). */
    readonly "wait-timer": number;
    /** The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`. */
    readonly deployment_branch_policy: {
      /** Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`. */
      readonly protected_branches: boolean;
      /** Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`. */
      readonly custom_branch_policies: boolean;
    } | null;
    /** Details of a deployment environment */
    readonly environment: {
      /** The id of the environment. */
      readonly id: number;
      readonly node_id: string;
      /** The name of the environment. */
      readonly name: string;
      readonly url: string;
      readonly html_url: string;
      /** The time that the environment was created, in ISO 8601 format. */
      readonly created_at: string;
      /** The time that the environment was last updated, in ISO 8601 format. */
      readonly updated_at: string;
      readonly protection_rules?: readonly (Partial<{
        readonly id: number;
        readonly node_id: string;
        readonly type: string;
        readonly wait_timer?: components["schemas"]["wait-timer"];
      }> &
        Partial<{
          readonly id: number;
          readonly node_id: string;
          readonly type: string;
          /** The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed. */
          readonly reviewers?: readonly {
            readonly type?: components["schemas"]["deployment-reviewer-type"];
            readonly reviewer?: Partial<components["schemas"]["simple-user"]> &
              Partial<components["schemas"]["team-simple"]>;
          }[];
        }> &
        Partial<{
          readonly id: number;
          readonly node_id: string;
          readonly type: string;
        }>)[];
      readonly deployment_branch_policy?: components["schemas"]["deployment_branch_policy"];
    };
    /** Short Blob */
    readonly "short-blob": {
      readonly url: string;
      readonly sha: string;
    };
    /** Blob */
    readonly blob: {
      readonly content: string;
      readonly encoding: string;
      readonly url: string;
      readonly sha: string;
      readonly size: number | null;
      readonly node_id: string;
      readonly highlighted_content?: string;
    };
    /** Low-level Git commit operations within a repository */
    readonly "git-commit": {
      /** SHA for the commit */
      readonly sha: string;
      readonly node_id: string;
      readonly url: string;
      /** Identifying information for the git-user */
      readonly author: {
        /** Timestamp of the commit */
        readonly date: string;
        /** Git email address of the user */
        readonly email: string;
        /** Name of the git user */
        readonly name: string;
      };
      /** Identifying information for the git-user */
      readonly committer: {
        /** Timestamp of the commit */
        readonly date: string;
        /** Git email address of the user */
        readonly email: string;
        /** Name of the git user */
        readonly name: string;
      };
      /** Message describing the purpose of the commit */
      readonly message: string;
      readonly tree: {
        /** SHA for the commit */
        readonly sha: string;
        readonly url: string;
      };
      readonly parents: readonly {
        /** SHA for the commit */
        readonly sha: string;
        readonly url: string;
        readonly html_url: string;
      }[];
      readonly verification: {
        readonly verified: boolean;
        readonly reason: string;
        readonly signature: string | null;
        readonly payload: string | null;
      };
      readonly html_url: string;
    };
    /** Git references within a repository */
    readonly "git-ref": {
      readonly ref: string;
      readonly node_id: string;
      readonly url: string;
      readonly object: {
        readonly type: string;
        /** SHA for the reference */
        readonly sha: string;
        readonly url: string;
      };
    };
    /** Metadata for a Git tag */
    readonly "git-tag": {
      readonly node_id: string;
      /** Name of the tag */
      readonly tag: string;
      readonly sha: string;
      /** URL for the tag */
      readonly url: string;
      /** Message describing the purpose of the tag */
      readonly message: string;
      readonly tagger: {
        readonly date: string;
        readonly email: string;
        readonly name: string;
      };
      readonly object: {
        readonly sha: string;
        readonly type: string;
        readonly url: string;
      };
      readonly verification?: components["schemas"]["verification"];
    };
    /** The hierarchy between files in a Git repository. */
    readonly "git-tree": {
      readonly sha: string;
      readonly url: string;
      readonly truncated: boolean;
      /** Objects specifying a tree structure */
      readonly tree: readonly {
        readonly path?: string;
        readonly mode?: string;
        readonly type?: string;
        readonly sha?: string;
        readonly size?: number;
        readonly url?: string;
      }[];
    };
    readonly "hook-response": {
      readonly code: number | null;
      readonly status: string | null;
      readonly message: string | null;
    };
    /** Webhooks for repositories. */
    readonly hook: {
      readonly type: string;
      /** Unique identifier of the webhook. */
      readonly id: number;
      /** The name of a valid service, use 'web' for a webhook. */
      readonly name: string;
      /** Determines whether the hook is actually triggered on pushes. */
      readonly active: boolean;
      /** Determines what events the hook is triggered for. Default: ['push']. */
      readonly events: readonly string[];
      readonly config: {
        readonly email?: string;
        readonly password?: string;
        readonly room?: string;
        readonly subdomain?: string;
        readonly url?: components["schemas"]["webhook-config-url"];
        readonly insecure_ssl?: components["schemas"]["webhook-config-insecure-ssl"];
        readonly content_type?: components["schemas"]["webhook-config-content-type"];
        readonly digest?: string;
        readonly secret?: components["schemas"]["webhook-config-secret"];
        readonly token?: string;
      };
      readonly updated_at: string;
      readonly created_at: string;
      readonly url: string;
      readonly test_url: string;
      readonly ping_url: string;
      readonly last_response: components["schemas"]["hook-response"];
    };
    /** A repository import from an external source. */
    readonly import: {
      readonly vcs: string | null;
      readonly use_lfs?: string;
      /** The URL of the originating repository. */
      readonly vcs_url: string;
      readonly svc_root?: string;
      readonly tfvc_project?: string;
      readonly status:
        | "auth"
        | "error"
        | "none"
        | "detecting"
        | "choose"
        | "auth_failed"
        | "importing"
        | "mapping"
        | "waiting_to_push"
        | "pushing"
        | "complete"
        | "setup"
        | "unknown"
        | "detection_found_multiple"
        | "detection_found_nothing"
        | "detection_needs_auth";
      readonly status_text?: string | null;
      readonly failed_step?: string | null;
      readonly error_message?: string | null;
      readonly import_percent?: number | null;
      readonly commit_count?: number | null;
      readonly push_percent?: number | null;
      readonly has_large_files?: boolean;
      readonly large_files_size?: number;
      readonly large_files_count?: number;
      readonly project_choices?: readonly {
        readonly vcs?: string;
        readonly tfvc_project?: string;
        readonly human_name?: string;
      }[];
      readonly message?: string;
      readonly authors_count?: number | null;
      readonly url: string;
      readonly html_url: string;
      readonly authors_url: string;
      readonly repository_url: string;
      readonly svn_root?: string;
    };
    /** Porter Author */
    readonly "porter-author": {
      readonly id: number;
      readonly remote_id: string;
      readonly remote_name: string;
      readonly email: string;
      readonly name: string;
      readonly url: string;
      readonly import_url: string;
    };
    /** Porter Large File */
    readonly "porter-large-file": {
      readonly ref_name: string;
      readonly path: string;
      readonly oid: string;
      readonly size: number;
    };
    /** Issue Event Label */
    readonly "issue-event-label": {
      readonly name: string | null;
      readonly color: string | null;
    };
    readonly "issue-event-dismissed-review": {
      readonly state: string;
      readonly review_id: number;
      readonly dismissal_message: string | null;
      readonly dismissal_commit_id?: string | null;
    };
    /** Issue Event Milestone */
    readonly "issue-event-milestone": {
      readonly title: string;
    };
    /** Issue Event Project Card */
    readonly "issue-event-project-card": {
      readonly url: string;
      readonly id: number;
      readonly project_url: string;
      readonly project_id: number;
      readonly column_name: string;
      readonly previous_column_name?: string;
    };
    /** Issue Event Rename */
    readonly "issue-event-rename": {
      readonly from: string;
      readonly to: string;
    };
    /** Issue Event */
    readonly "issue-event": {
      readonly id: number;
      readonly node_id: string;
      readonly url: string;
      readonly actor: components["schemas"]["simple-user"] | null;
      readonly event: string;
      readonly commit_id: string | null;
      readonly commit_url: string | null;
      readonly created_at: string;
      readonly issue?: components["schemas"]["issue-simple"];
      readonly label?: components["schemas"]["issue-event-label"];
      readonly assignee?: components["schemas"]["simple-user"] | null;
      readonly assigner?: components["schemas"]["simple-user"] | null;
      readonly review_requester?: components["schemas"]["simple-user"] | null;
      readonly requested_reviewer?: components["schemas"]["simple-user"] | null;
      readonly requested_team?: components["schemas"]["team"];
      readonly dismissed_review?: components["schemas"]["issue-event-dismissed-review"];
      readonly milestone?: components["schemas"]["issue-event-milestone"];
      readonly project_card?: components["schemas"]["issue-event-project-card"];
      readonly rename?: components["schemas"]["issue-event-rename"];
      readonly author_association?: components["schemas"]["author_association"];
      readonly lock_reason?: string | null;
    };
    /** Issue Event for Issue */
    readonly "issue-event-for-issue": {
      readonly id?: number;
      readonly node_id?: string;
      readonly url?: string;
      readonly actor?: components["schemas"]["simple-user"];
      readonly event?: string;
      readonly commit_id?: string | null;
      readonly commit_url?: string | null;
      readonly created_at?: string;
      readonly sha?: string;
      readonly html_url?: string;
      readonly message?: string;
      readonly issue_url?: string;
      readonly updated_at?: string;
      readonly author_association?: components["schemas"]["author_association"];
      readonly body?: string;
      readonly lock_reason?: string;
      readonly submitted_at?: string;
      readonly state?: string;
      readonly pull_request_url?: string;
      readonly body_html?: string;
      readonly body_text?: string;
    };
    /** An SSH key granting access to a single repository. */
    readonly "deploy-key": {
      readonly id: number;
      readonly key: string;
      readonly url: string;
      readonly title: string;
      readonly verified: boolean;
      readonly created_at: string;
      readonly read_only: boolean;
    };
    /** Language */
    readonly language: { readonly [key: string]: number };
    /** License Content */
    readonly "license-content": {
      readonly name: string;
      readonly path: string;
      readonly sha: string;
      readonly size: number;
      readonly url: string;
      readonly html_url: string | null;
      readonly git_url: string | null;
      readonly download_url: string | null;
      readonly type: string;
      readonly content: string;
      readonly encoding: string;
      readonly _links: {
        readonly git: string | null;
        readonly html: string | null;
        readonly self: string;
      };
      readonly license: components["schemas"]["license-simple"] | null;
    };
    readonly "pages-source-hash": {
      readonly branch: string;
      readonly path: string;
    };
    /** The configuration for GitHub Pages for a repository. */
    readonly page: {
      /** The API address for accessing this Page resource. */
      readonly url: string;
      /** The status of the most recent build of the Page. */
      readonly status: ("built" | "building" | "errored") | null;
      /** The Pages site's custom domain */
      readonly cname: string | null;
      /** Whether the Page has a custom 404 page. */
      readonly custom_404: boolean;
      /** The web address the Page can be accessed from. */
      readonly html_url?: string;
      readonly source?: components["schemas"]["pages-source-hash"];
      /** Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. */
      readonly public: boolean;
    };
    /** Page Build */
    readonly "page-build": {
      readonly url: string;
      readonly status: string;
      readonly error: {
        readonly message: string | null;
      };
      readonly pusher: components["schemas"]["simple-user"] | null;
      readonly commit: string;
      readonly duration: number;
      readonly created_at: string;
      readonly updated_at: string;
    };
    /** Page Build Status */
    readonly "page-build-status": {
      readonly url: string;
      readonly status: string;
    };
    /** Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary. */
    readonly "pull-request": {
      readonly url: string;
      readonly id: number;
      readonly node_id: string;
      readonly html_url: string;
      readonly diff_url: string;
      readonly patch_url: string;
      readonly issue_url: string;
      readonly commits_url: string;
      readonly review_comments_url: string;
      readonly review_comment_url: string;
      readonly comments_url: string;
      readonly statuses_url: string;
      /** Number uniquely identifying the pull request within its repository. */
      readonly number: number;
      /** State of this Pull Request. Either `open` or `closed`. */
      readonly state: "open" | "closed";
      readonly locked: boolean;
      /** The title of the pull request. */
      readonly title: string;
      readonly user: components["schemas"]["simple-user"] | null;
      readonly body: string | null;
      readonly labels: readonly {
        readonly id?: number;
        readonly node_id?: string;
        readonly url?: string;
        readonly name?: string;
        readonly description?: string | null;
        readonly color?: string;
        readonly default?: boolean;
      }[];
      readonly milestone: components["schemas"]["milestone"] | null;
      readonly active_lock_reason?: string | null;
      readonly created_at: string;
      readonly updated_at: string;
      readonly closed_at: string | null;
      readonly merged_at: string | null;
      readonly merge_commit_sha: string | null;
      readonly assignee: components["schemas"]["simple-user"] | null;
      readonly assignees?:
        | readonly components["schemas"]["simple-user"][]
        | null;
      readonly requested_reviewers?:
        | readonly components["schemas"]["simple-user"][]
        | null;
      readonly requested_teams?:
        | readonly components["schemas"]["team-simple"][]
        | null;
      readonly head: {
        readonly label: string;
        readonly ref: string;
        readonly repo: {
          readonly archive_url: string;
          readonly assignees_url: string;
          readonly blobs_url: string;
          readonly branches_url: string;
          readonly collaborators_url: string;
          readonly comments_url: string;
          readonly commits_url: string;
          readonly compare_url: string;
          readonly contents_url: string;
          readonly contributors_url: string;
          readonly deployments_url: string;
          readonly description: string | null;
          readonly downloads_url: string;
          readonly events_url: string;
          readonly fork: boolean;
          readonly forks_url: string;
          readonly full_name: string;
          readonly git_commits_url: string;
          readonly git_refs_url: string;
          readonly git_tags_url: string;
          readonly hooks_url: string;
          readonly html_url: string;
          readonly id: number;
          readonly node_id: string;
          readonly issue_comment_url: string;
          readonly issue_events_url: string;
          readonly issues_url: string;
          readonly keys_url: string;
          readonly labels_url: string;
          readonly languages_url: string;
          readonly merges_url: string;
          readonly milestones_url: string;
          readonly name: string;
          readonly notifications_url: string;
          readonly owner: {
            readonly avatar_url: string;
            readonly events_url: string;
            readonly followers_url: string;
            readonly following_url: string;
            readonly gists_url: string;
            readonly gravatar_id: string | null;
            readonly html_url: string;
            readonly id: number;
            readonly node_id: string;
            readonly login: string;
            readonly organizations_url: string;
            readonly received_events_url: string;
            readonly repos_url: string;
            readonly site_admin: boolean;
            readonly starred_url: string;
            readonly subscriptions_url: string;
            readonly type: string;
            readonly url: string;
          };
          readonly private: boolean;
          readonly pulls_url: string;
          readonly releases_url: string;
          readonly stargazers_url: string;
          readonly statuses_url: string;
          readonly subscribers_url: string;
          readonly subscription_url: string;
          readonly tags_url: string;
          readonly teams_url: string;
          readonly trees_url: string;
          readonly url: string;
          readonly clone_url: string;
          readonly default_branch: string;
          readonly forks: number;
          readonly forks_count: number;
          readonly git_url: string;
          readonly has_downloads: boolean;
          readonly has_issues: boolean;
          readonly has_projects: boolean;
          readonly has_wiki: boolean;
          readonly has_pages: boolean;
          readonly homepage: string | null;
          readonly language: string | null;
          readonly master_branch?: string;
          readonly archived: boolean;
          readonly disabled: boolean;
          readonly mirror_url: string | null;
          readonly open_issues: number;
          readonly open_issues_count: number;
          readonly permissions?: {
            readonly admin: boolean;
            readonly pull: boolean;
            readonly push: boolean;
          };
          readonly temp_clone_token?: string;
          readonly allow_merge_commit?: boolean;
          readonly allow_squash_merge?: boolean;
          readonly allow_rebase_merge?: boolean;
          readonly license: {
            readonly key: string;
            readonly name: string;
            readonly url: string | null;
            readonly spdx_id: string | null;
            readonly node_id: string;
          } | null;
          readonly pushed_at: string;
          readonly size: number;
          readonly ssh_url: string;
          readonly stargazers_count: number;
          readonly svn_url: string;
          readonly topics?: readonly string[];
          readonly watchers: number;
          readonly watchers_count: number;
          readonly created_at: string;
          readonly updated_at: string;
        };
        readonly sha: string;
        readonly user: {
          readonly avatar_url: string;
          readonly events_url: string;
          readonly followers_url: string;
          readonly following_url: string;
          readonly gists_url: string;
          readonly gravatar_id: string | null;
          readonly html_url: string;
          readonly id: number;
          readonly node_id: string;
          readonly login: string;
          readonly organizations_url: string;
          readonly received_events_url: string;
          readonly repos_url: string;
          readonly site_admin: boolean;
          readonly starred_url: string;
          readonly subscriptions_url: string;
          readonly type: string;
          readonly url: string;
        };
      };
      readonly base: {
        readonly label: string;
        readonly ref: string;
        readonly repo: {
          readonly archive_url: string;
          readonly assignees_url: string;
          readonly blobs_url: string;
          readonly branches_url: string;
          readonly collaborators_url: string;
          readonly comments_url: string;
          readonly commits_url: string;
          readonly compare_url: string;
          readonly contents_url: string;
          readonly contributors_url: string;
          readonly deployments_url: string;
          readonly description: string | null;
          readonly downloads_url: string;
          readonly events_url: string;
          readonly fork: boolean;
          readonly forks_url: string;
          readonly full_name: string;
          readonly git_commits_url: string;
          readonly git_refs_url: string;
          readonly git_tags_url: string;
          readonly hooks_url: string;
          readonly html_url: string;
          readonly id: number;
          readonly node_id: string;
          readonly issue_comment_url: string;
          readonly issue_events_url: string;
          readonly issues_url: string;
          readonly keys_url: string;
          readonly labels_url: string;
          readonly languages_url: string;
          readonly merges_url: string;
          readonly milestones_url: string;
          readonly name: string;
          readonly notifications_url: string;
          readonly owner: {
            readonly avatar_url: string;
            readonly events_url: string;
            readonly followers_url: string;
            readonly following_url: string;
            readonly gists_url: string;
            readonly gravatar_id: string | null;
            readonly html_url: string;
            readonly id: number;
            readonly node_id: string;
            readonly login: string;
            readonly organizations_url: string;
            readonly received_events_url: string;
            readonly repos_url: string;
            readonly site_admin: boolean;
            readonly starred_url: string;
            readonly subscriptions_url: string;
            readonly type: string;
            readonly url: string;
          };
          readonly private: boolean;
          readonly pulls_url: string;
          readonly releases_url: string;
          readonly stargazers_url: string;
          readonly statuses_url: string;
          readonly subscribers_url: string;
          readonly subscription_url: string;
          readonly tags_url: string;
          readonly teams_url: string;
          readonly trees_url: string;
          readonly url: string;
          readonly clone_url: string;
          readonly default_branch: string;
          readonly forks: number;
          readonly forks_count: number;
          readonly git_url: string;
          readonly has_downloads: boolean;
          readonly has_issues: boolean;
          readonly has_projects: boolean;
          readonly has_wiki: boolean;
          readonly has_pages: boolean;
          readonly homepage: string | null;
          readonly language: string | null;
          readonly master_branch?: string;
          readonly archived: boolean;
          readonly disabled: boolean;
          readonly mirror_url: string | null;
          readonly open_issues: number;
          readonly open_issues_count: number;
          readonly permissions?: {
            readonly admin: boolean;
            readonly pull: boolean;
            readonly push: boolean;
          };
          readonly temp_clone_token?: string;
          readonly allow_merge_commit?: boolean;
          readonly allow_squash_merge?: boolean;
          readonly allow_rebase_merge?: boolean;
          readonly license: components["schemas"]["license-simple"] | null;
          readonly pushed_at: string;
          readonly size: number;
          readonly ssh_url: string;
          readonly stargazers_count: number;
          readonly svn_url: string;
          readonly topics?: readonly string[];
          readonly watchers: number;
          readonly watchers_count: number;
          readonly created_at: string;
          readonly updated_at: string;
        };
        readonly sha: string;
        readonly user: {
          readonly avatar_url: string;
          readonly events_url: string;
          readonly followers_url: string;
          readonly following_url: string;
          readonly gists_url: string;
          readonly gravatar_id: string | null;
          readonly html_url: string;
          readonly id: number;
          readonly node_id: string;
          readonly login: string;
          readonly organizations_url: string;
          readonly received_events_url: string;
          readonly repos_url: string;
          readonly site_admin: boolean;
          readonly starred_url: string;
          readonly subscriptions_url: string;
          readonly type: string;
          readonly url: string;
        };
      };
      readonly _links: {
        readonly comments: components["schemas"]["link"];
        readonly commits: components["schemas"]["link"];
        readonly statuses: components["schemas"]["link"];
        readonly html: components["schemas"]["link"];
        readonly issue: components["schemas"]["link"];
        readonly review_comments: components["schemas"]["link"];
        readonly review_comment: components["schemas"]["link"];
        readonly self: components["schemas"]["link"];
      };
      readonly author_association: components["schemas"]["author_association"];
      readonly auto_merge: components["schemas"]["auto_merge"];
      /** Indicates whether or not the pull request is a draft. */
      readonly draft?: boolean;
      readonly merged: boolean;
      readonly mergeable: boolean | null;
      readonly rebaseable?: boolean | null;
      readonly mergeable_state: string;
      readonly merged_by: components["schemas"]["simple-user"] | null;
      readonly comments: number;
      readonly review_comments: number;
      /** Indicates whether maintainers can modify the pull request. */
      readonly maintainer_can_modify: boolean;
      readonly commits: number;
      readonly additions: number;
      readonly deletions: number;
      readonly changed_files: number;
    };
    /** Pull Request Review Comments are comments on a portion of the Pull Request's diff. */
    readonly "pull-request-review-comment": {
      /** URL for the pull request review comment */
      readonly url: string;
      /** The ID of the pull request review to which the comment belongs. */
      readonly pull_request_review_id: number | null;
      /** The ID of the pull request review comment. */
      readonly id: number;
      /** The node ID of the pull request review comment. */
      readonly node_id: string;
      /** The diff of the line that the comment refers to. */
      readonly diff_hunk: string;
      /** The relative path of the file to which the comment applies. */
      readonly path: string;
      /** The line index in the diff to which the comment applies. */
      readonly position: number;
      /** The index of the original line in the diff to which the comment applies. */
      readonly original_position: number;
      /** The SHA of the commit to which the comment applies. */
      readonly commit_id: string;
      /** The SHA of the original commit to which the comment applies. */
      readonly original_commit_id: string;
      /** The comment ID to reply to. */
      readonly in_reply_to_id?: number;
      readonly user: components["schemas"]["simple-user"];
      /** The text of the comment. */
      readonly body: string;
      readonly created_at: string;
      readonly updated_at: string;
      /** HTML URL for the pull request review comment. */
      readonly html_url: string;
      /** URL for the pull request that the review comment belongs to. */
      readonly pull_request_url: string;
      readonly author_association: components["schemas"]["author_association"];
      readonly _links: {
        readonly self: {
          readonly href: string;
        };
        readonly html: {
          readonly href: string;
        };
        readonly pull_request: {
          readonly href: string;
        };
      };
      /** The first line of the range for a multi-line comment. */
      readonly start_line?: number | null;
      /** The first line of the range for a multi-line comment. */
      readonly original_start_line?: number | null;
      /** The side of the first line of the range for a multi-line comment. */
      readonly start_side?: ("LEFT" | "RIGHT") | null;
      /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
      readonly line?: number;
      /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
      readonly original_line?: number;
      /** The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment */
      readonly side?: "LEFT" | "RIGHT";
      readonly reactions?: components["schemas"]["reaction-rollup"];
      readonly body_html?: string;
      readonly body_text?: string;
    };
    /** Pull Request Merge Result */
    readonly "pull-request-merge-result": {
      readonly sha: string;
      readonly merged: boolean;
      readonly message: string;
    };
    /** Pull Request Review Request */
    readonly "pull-request-review-request": {
      readonly users: readonly components["schemas"]["simple-user"][];
      readonly teams: readonly components["schemas"]["team-simple"][];
    };
    /** Pull Request Reviews are reviews on pull requests. */
    readonly "pull-request-review": {
      /** Unique identifier of the review */
      readonly id: number;
      readonly node_id: string;
      readonly user: components["schemas"]["simple-user"] | null;
      /** The text of the review. */
      readonly body: string;
      readonly state: string;
      readonly html_url: string;
      readonly pull_request_url: string;
      readonly _links: {
        readonly html: {
          readonly href: string;
        };
        readonly pull_request: {
          readonly href: string;
        };
      };
      readonly submitted_at?: string;
      /** A commit SHA for the review. */
      readonly commit_id: string;
      readonly body_html?: string;
      readonly body_text?: string;
      readonly author_association: components["schemas"]["author_association"];
    };
    /** Legacy Review Comment */
    readonly "review-comment": {
      readonly url: string;
      readonly pull_request_review_id: number | null;
      readonly id: number;
      readonly node_id: string;
      readonly diff_hunk: string;
      readonly path: string;
      readonly position: number | null;
      readonly original_position: number;
      readonly commit_id: string;
      readonly original_commit_id: string;
      readonly in_reply_to_id?: number;
      readonly user: components["schemas"]["simple-user"] | null;
      readonly body: string;
      readonly created_at: string;
      readonly updated_at: string;
      readonly html_url: string;
      readonly pull_request_url: string;
      readonly author_association: components["schemas"]["author_association"];
      readonly _links: {
        readonly self: components["schemas"]["link"];
        readonly html: components["schemas"]["link"];
        readonly pull_request: components["schemas"]["link"];
      };
      readonly body_text?: string;
      readonly body_html?: string;
      /** The side of the first line of the range for a multi-line comment. */
      readonly side?: "LEFT" | "RIGHT";
      /** The side of the first line of the range for a multi-line comment. */
      readonly start_side?: ("LEFT" | "RIGHT") | null;
      /** The line of the blob to which the comment applies. The last line of the range for a multi-line comment */
      readonly line?: number;
      /** The original line of the blob to which the comment applies. The last line of the range for a multi-line comment */
      readonly original_line?: number;
      /** The first line of the range for a multi-line comment. */
      readonly start_line?: number | null;
      /** The original first line of the range for a multi-line comment. */
      readonly original_start_line?: number | null;
    };
    /** Data related to a release. */
    readonly "release-asset": {
      readonly url: string;
      readonly browser_download_url: string;
      readonly id: number;
      readonly node_id: string;
      /** The file name of the asset. */
      readonly name: string;
      readonly label: string | null;
      /** State of the release asset. */
      readonly state: "uploaded" | "open";
      readonly content_type: string;
      readonly size: number;
      readonly download_count: number;
      readonly created_at: string;
      readonly updated_at: string;
      readonly uploader: components["schemas"]["simple-user"] | null;
    };
    /** A release. */
    readonly release: {
      readonly url: string;
      readonly html_url: string;
      readonly assets_url: string;
      readonly upload_url: string;
      readonly tarball_url: string | null;
      readonly zipball_url: string | null;
      readonly id: number;
      readonly node_id: string;
      /** The name of the tag. */
      readonly tag_name: string;
      /** Specifies the commitish value that determines where the Git tag is created from. */
      readonly target_commitish: string;
      readonly name: string | null;
      readonly body?: string | null;
      /** true to create a draft (unpublished) release, false to create a published one. */
      readonly draft: boolean;
      /** Whether to identify the release as a prerelease or a full release. */
      readonly prerelease: boolean;
      readonly created_at: string;
      readonly published_at: string | null;
      readonly author: components["schemas"]["simple-user"];
      readonly assets: readonly components["schemas"]["release-asset"][];
      readonly body_html?: string;
      readonly body_text?: string;
    };
    /** Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide `resolution` when you set the state to `resolved`. */
    readonly "secret-scanning-alert-state": "open" | "resolved";
    /** **Required when the `state` is `resolved`.** The reason for resolving the alert. Can be one of `false_positive`, `wont_fix`, `revoked`, or `used_in_tests`. */
    readonly "secret-scanning-alert-resolution": string | null;
    readonly "secret-scanning-alert": {
      readonly number?: components["schemas"]["alert-number"];
      readonly created_at?: components["schemas"]["alert-created-at"];
      readonly url?: components["schemas"]["alert-url"];
      readonly html_url?: components["schemas"]["alert-html-url"];
      readonly state?: components["schemas"]["secret-scanning-alert-state"];
      readonly resolution?: components["schemas"]["secret-scanning-alert-resolution"];
      /** The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. */
      readonly resolved_at?: string | null;
      readonly resolved_by?: components["schemas"]["simple-user"];
      /** The type of secret that secret scanning detected. */
      readonly secret_type?: string;
      /** The secret that was detected. */
      readonly secret?: string;
    };
    /** Stargazer */
    readonly stargazer: {
      readonly starred_at: string;
      readonly user: components["schemas"]["simple-user"] | null;
    };
    /** Code Frequency Stat */
    readonly "code-frequency-stat": readonly number[];
    /** Commit Activity */
    readonly "commit-activity": {
      readonly days: readonly number[];
      readonly total: number;
      readonly week: number;
    };
    /** Contributor Activity */
    readonly "contributor-activity": {
      readonly author: components["schemas"]["simple-user"] | null;
      readonly total: number;
      readonly weeks: readonly {
        readonly w?: string;
        readonly a?: number;
        readonly d?: number;
        readonly c?: number;
      }[];
    };
    readonly "participation-stats": {
      readonly all: readonly number[];
      readonly owner: readonly number[];
    };
    /** Repository invitations let you manage who you collaborate with. */
    readonly "repository-subscription": {
      /** Determines if notifications should be received from this repository. */
      readonly subscribed: boolean;
      /** Determines if all notifications should be blocked from this repository. */
      readonly ignored: boolean;
      readonly reason: string | null;
      readonly created_at: string;
      readonly url: string;
      readonly repository_url: string;
    };
    /** Tag */
    readonly tag: {
      readonly name: string;
      readonly commit: {
        readonly sha: string;
        readonly url: string;
      };
      readonly zipball_url: string;
      readonly tarball_url: string;
      readonly node_id: string;
    };
    /** A topic aggregates entities that are related to a subject. */
    readonly topic: {
      readonly names: readonly string[];
    };
    readonly traffic: {
      readonly timestamp: string;
      readonly uniques: number;
      readonly count: number;
    };
    /** Clone Traffic */
    readonly "clone-traffic": {
      readonly count: number;
      readonly uniques: number;
      readonly clones: readonly components["schemas"]["traffic"][];
    };
    /** Content Traffic */
    readonly "content-traffic": {
      readonly path: string;
      readonly title: string;
      readonly count: number;
      readonly uniques: number;
    };
    /** Referrer Traffic */
    readonly "referrer-traffic": {
      readonly referrer: string;
      readonly count: number;
      readonly uniques: number;
    };
    /** View Traffic */
    readonly "view-traffic": {
      readonly count: number;
      readonly uniques: number;
      readonly views: readonly components["schemas"]["traffic"][];
    };
    readonly "scim-group-list-enterprise": {
      readonly schemas: readonly string[];
      readonly totalResults: number;
      readonly itemsPerPage: number;
      readonly startIndex: number;
      readonly Resources: readonly {
        readonly schemas: readonly string[];
        readonly id: string;
        readonly externalId?: string | null;
        readonly displayName?: string;
        readonly members?: readonly {
          readonly value?: string;
          readonly $ref?: string;
          readonly display?: string;
        }[];
        readonly meta?: {
          readonly resourceType?: string;
          readonly created?: string;
          readonly lastModified?: string;
          readonly location?: string;
        };
      }[];
    };
    readonly "scim-enterprise-group": {
      readonly schemas: readonly string[];
      readonly id: string;
      readonly externalId?: string | null;
      readonly displayName?: string;
      readonly members?: readonly {
        readonly value?: string;
        readonly $ref?: string;
        readonly display?: string;
      }[];
      readonly meta?: {
        readonly resourceType?: string;
        readonly created?: string;
        readonly lastModified?: string;
        readonly location?: string;
      };
    };
    readonly "scim-user-list-enterprise": {
      readonly schemas: readonly string[];
      readonly totalResults: number;
      readonly itemsPerPage: number;
      readonly startIndex: number;
      readonly Resources: readonly {
        readonly schemas: readonly string[];
        readonly id: string;
        readonly externalId?: string;
        readonly userName?: string;
        readonly name?: {
          readonly givenName?: string;
          readonly familyName?: string;
        };
        readonly emails?: readonly {
          readonly value?: string;
          readonly primary?: boolean;
          readonly type?: string;
        }[];
        readonly groups?: readonly {
          readonly value?: string;
        }[];
        readonly active?: boolean;
        readonly meta?: {
          readonly resourceType?: string;
          readonly created?: string;
          readonly lastModified?: string;
          readonly location?: string;
        };
      }[];
    };
    readonly "scim-enterprise-user": {
      readonly schemas: readonly string[];
      readonly id: string;
      readonly externalId?: string;
      readonly userName?: string;
      readonly name?: {
        readonly givenName?: string;
        readonly familyName?: string;
      };
      readonly emails?: readonly {
        readonly value?: string;
        readonly type?: string;
        readonly primary?: boolean;
      }[];
      readonly groups?: readonly {
        readonly value?: string;
      }[];
      readonly active?: boolean;
      readonly meta?: {
        readonly resourceType?: string;
        readonly created?: string;
        readonly lastModified?: string;
        readonly location?: string;
      };
    };
    /** SCIM /Users provisioning endpoints */
    readonly "scim-user": {
      /** SCIM schema used. */
      readonly schemas: readonly string[];
      /** Unique identifier of an external identity */
      readonly id: string;
      /** The ID of the User. */
      readonly externalId: string | null;
      /** Configured by the admin. Could be an email, login, or username */
      readonly userName: string | null;
      /** The name of the user, suitable for display to end-users */
      readonly displayName?: string | null;
      readonly name: {
        readonly givenName: string | null;
        readonly familyName: string | null;
        readonly formatted?: string | null;
      };
      /** user emails */
      readonly emails: readonly {
        readonly value: string;
        readonly primary?: boolean;
      }[];
      /** The active status of the User. */
      readonly active: boolean;
      readonly meta: {
        readonly resourceType?: string;
        readonly created?: string;
        readonly lastModified?: string;
        readonly location?: string;
      };
      /** The ID of the organization. */
      readonly organization_id?: number;
      /** Set of operations to be performed */
      readonly operations?: readonly {
        readonly op: "add" | "remove" | "replace";
        readonly path?: string;
        readonly value?:
          | string
          | { readonly [key: string]: any }
          | readonly { readonly [key: string]: any }[];
      }[];
      /** associated groups */
      readonly groups?: readonly {
        readonly value?: string;
        readonly display?: string;
      }[];
    };
    /** SCIM User List */
    readonly "scim-user-list": {
      /** SCIM schema used. */
      readonly schemas: readonly string[];
      readonly totalResults: number;
      readonly itemsPerPage: number;
      readonly startIndex: number;
      readonly Resources: readonly components["schemas"]["scim-user"][];
    };
    readonly "search-result-text-matches": readonly {
      readonly object_url?: string;
      readonly object_type?: string | null;
      readonly property?: string;
      readonly fragment?: string;
      readonly matches?: readonly {
        readonly text?: string;
        readonly indices?: readonly number[];
      }[];
    }[];
    /** Code Search Result Item */
    readonly "code-search-result-item": {
      readonly name: string;
      readonly path: string;
      readonly sha: string;
      readonly url: string;
      readonly git_url: string;
      readonly html_url: string;
      readonly repository: components["schemas"]["minimal-repository"];
      readonly score: number;
      readonly file_size?: number;
      readonly language?: string | null;
      readonly last_modified_at?: string;
      readonly line_numbers?: readonly string[];
      readonly text_matches?: components["schemas"]["search-result-text-matches"];
    };
    /** Commit Search Result Item */
    readonly "commit-search-result-item": {
      readonly url: string;
      readonly sha: string;
      readonly html_url: string;
      readonly comments_url: string;
      readonly commit: {
        readonly author: {
          readonly name: string;
          readonly email: string;
          readonly date: string;
        };
        readonly committer: components["schemas"]["git-user"] | null;
        readonly comment_count: number;
        readonly message: string;
        readonly tree: {
          readonly sha: string;
          readonly url: string;
        };
        readonly url: string;
        readonly verification?: components["schemas"]["verification"];
      };
      readonly author: components["schemas"]["simple-user"] | null;
      readonly committer: components["schemas"]["git-user"] | null;
      readonly parents: readonly {
        readonly url?: string;
        readonly html_url?: string;
        readonly sha?: string;
      }[];
      readonly repository: components["schemas"]["minimal-repository"];
      readonly score: number;
      readonly node_id: string;
      readonly text_matches?: components["schemas"]["search-result-text-matches"];
    };
    /** Issue Search Result Item */
    readonly "issue-search-result-item": {
      readonly url: string;
      readonly repository_url: string;
      readonly labels_url: string;
      readonly comments_url: string;
      readonly events_url: string;
      readonly html_url: string;
      readonly id: number;
      readonly node_id: string;
      readonly number: number;
      readonly title: string;
      readonly locked: boolean;
      readonly active_lock_reason?: string | null;
      readonly assignees?:
        | readonly components["schemas"]["simple-user"][]
        | null;
      readonly user: components["schemas"]["simple-user"] | null;
      readonly labels: readonly {
        readonly id?: number;
        readonly node_id?: string;
        readonly url?: string;
        readonly name?: string;
        readonly color?: string;
        readonly default?: boolean;
        readonly description?: string | null;
      }[];
      readonly state: string;
      readonly assignee: components["schemas"]["simple-user"] | null;
      readonly milestone: components["schemas"]["milestone"] | null;
      readonly comments: number;
      readonly created_at: string;
      readonly updated_at: string;
      readonly closed_at: string | null;
      readonly text_matches?: components["schemas"]["search-result-text-matches"];
      readonly pull_request?: {
        readonly merged_at?: string | null;
        readonly diff_url: string | null;
        readonly html_url: string | null;
        readonly patch_url: string | null;
        readonly url: string | null;
      };
      readonly body?: string;
      readonly score: number;
      readonly author_association: components["schemas"]["author_association"];
      readonly draft?: boolean;
      readonly repository?: components["schemas"]["repository"];
      readonly body_html?: string;
      readonly body_text?: string;
      readonly timeline_url?: string;
      readonly performed_via_github_app?:
        | components["schemas"]["integration"]
        | null;
    };
    /** Label Search Result Item */
    readonly "label-search-result-item": {
      readonly id: number;
      readonly node_id: string;
      readonly url: string;
      readonly name: string;
      readonly color: string;
      readonly default: boolean;
      readonly description: string | null;
      readonly score: number;
      readonly text_matches?: components["schemas"]["search-result-text-matches"];
    };
    /** Repo Search Result Item */
    readonly "repo-search-result-item": {
      readonly id: number;
      readonly node_id: string;
      readonly name: string;
      readonly full_name: string;
      readonly owner: components["schemas"]["simple-user"] | null;
      readonly private: boolean;
      readonly html_url: string;
      readonly description: string | null;
      readonly fork: boolean;
      readonly url: string;
      readonly created_at: string;
      readonly updated_at: string;
      readonly pushed_at: string;
      readonly homepage: string | null;
      readonly size: number;
      readonly stargazers_count: number;
      readonly watchers_count: number;
      readonly language: string | null;
      readonly forks_count: number;
      readonly open_issues_count: number;
      readonly master_branch?: string;
      readonly default_branch: string;
      readonly score: number;
      readonly forks_url: string;
      readonly keys_url: string;
      readonly collaborators_url: string;
      readonly teams_url: string;
      readonly hooks_url: string;
      readonly issue_events_url: string;
      readonly events_url: string;
      readonly assignees_url: string;
      readonly branches_url: string;
      readonly tags_url: string;
      readonly blobs_url: string;
      readonly git_tags_url: string;
      readonly git_refs_url: string;
      readonly trees_url: string;
      readonly statuses_url: string;
      readonly languages_url: string;
      readonly stargazers_url: string;
      readonly contributors_url: string;
      readonly subscribers_url: string;
      readonly subscription_url: string;
      readonly commits_url: string;
      readonly git_commits_url: string;
      readonly comments_url: string;
      readonly issue_comment_url: string;
      readonly contents_url: string;
      readonly compare_url: string;
      readonly merges_url: string;
      readonly archive_url: string;
      readonly downloads_url: string;
      readonly issues_url: string;
      readonly pulls_url: string;
      readonly milestones_url: string;
      readonly notifications_url: string;
      readonly labels_url: string;
      readonly releases_url: string;
      readonly deployments_url: string;
      readonly git_url: string;
      readonly ssh_url: string;
      readonly clone_url: string;
      readonly svn_url: string;
      readonly forks: number;
      readonly open_issues: number;
      readonly watchers: number;
      readonly topics?: readonly string[];
      readonly mirror_url: string | null;
      readonly has_issues: boolean;
      readonly has_projects: boolean;
      readonly has_pages: boolean;
      readonly has_wiki: boolean;
      readonly has_downloads: boolean;
      readonly archived: boolean;
      /** Returns whether or not this repository disabled. */
      readonly disabled: boolean;
      readonly license: components["schemas"]["license-simple"] | null;
      readonly permissions?: {
        readonly admin: boolean;
        readonly pull: boolean;
        readonly push: boolean;
      };
      readonly text_matches?: components["schemas"]["search-result-text-matches"];
      readonly temp_clone_token?: string;
      readonly allow_merge_commit?: boolean;
      readonly allow_squash_merge?: boolean;
      readonly allow_rebase_merge?: boolean;
      readonly delete_branch_on_merge?: boolean;
    };
    /** Topic Search Result Item */
    readonly "topic-search-result-item": {
      readonly name: string;
      readonly display_name: string | null;
      readonly short_description: string | null;
      readonly description: string | null;
      readonly created_by: string | null;
      readonly released: string | null;
      readonly created_at: string;
      readonly updated_at: string;
      readonly featured: boolean;
      readonly curated: boolean;
      readonly score: number;
      readonly repository_count?: number | null;
      readonly logo_url?: string | null;
      readonly text_matches?: components["schemas"]["search-result-text-matches"];
      readonly related?:
        | readonly {
            readonly topic_relation?: {
              readonly id?: number;
              readonly name?: string;
              readonly topic_id?: number;
              readonly relation_type?: string;
            };
          }[]
        | null;
      readonly aliases?:
        | readonly {
            readonly topic_relation?: {
              readonly id?: number;
              readonly name?: string;
              readonly topic_id?: number;
              readonly relation_type?: string;
            };
          }[]
        | null;
    };
    /** User Search Result Item */
    readonly "user-search-result-item": {
      readonly login: string;
      readonly id: number;
      readonly node_id: string;
      readonly avatar_url: string;
      readonly gravatar_id: string | null;
      readonly url: string;
      readonly html_url: string;
      readonly followers_url: string;
      readonly subscriptions_url: string;
      readonly organizations_url: string;
      readonly repos_url: string;
      readonly received_events_url: string;
      readonly type: string;
      readonly score: number;
      readonly following_url: string;
      readonly gists_url: string;
      readonly starred_url: string;
      readonly events_url: string;
      readonly public_repos?: number;
      readonly public_gists?: number;
      readonly followers?: number;
      readonly following?: number;
      readonly created_at?: string;
      readonly updated_at?: string;
      readonly name?: string | null;
      readonly bio?: string | null;
      readonly email?: string | null;
      readonly location?: string | null;
      readonly site_admin: boolean;
      readonly hireable?: boolean | null;
      readonly text_matches?: components["schemas"]["search-result-text-matches"];
      readonly blog?: string | null;
      readonly company?: string | null;
      readonly suspended_at?: string | null;
    };
    /** Private User */
    readonly "private-user": {
      readonly login: string;
      readonly id: number;
      readonly node_id: string;
      readonly avatar_url: string;
      readonly gravatar_id: string | null;
      readonly url: string;
      readonly html_url: string;
      readonly followers_url: string;
      readonly following_url: string;
      readonly gists_url: string;
      readonly starred_url: string;
      readonly subscriptions_url: string;
      readonly organizations_url: string;
      readonly repos_url: string;
      readonly events_url: string;
      readonly received_events_url: string;
      readonly type: string;
      readonly site_admin: boolean;
      readonly name: string | null;
      readonly company: string | null;
      readonly blog: string | null;
      readonly location: string | null;
      readonly email: string | null;
      readonly hireable: boolean | null;
      readonly bio: string | null;
      readonly twitter_username?: string | null;
      readonly public_repos: number;
      readonly public_gists: number;
      readonly followers: number;
      readonly following: number;
      readonly created_at: string;
      readonly updated_at: string;
      readonly private_gists: number;
      readonly total_private_repos: number;
      readonly owned_private_repos: number;
      readonly disk_usage: number;
      readonly collaborators: number;
      readonly two_factor_authentication: boolean;
      readonly plan?: {
        readonly collaborators: number;
        readonly name: string;
        readonly space: number;
        readonly private_repos: number;
      };
      readonly suspended_at?: string | null;
      readonly business_plus?: boolean;
      readonly ldap_dn?: string;
    };
    /** Public User */
    readonly "public-user": {
      readonly login: string;
      readonly id: number;
      readonly node_id: string;
      readonly avatar_url: string;
      readonly gravatar_id: string | null;
      readonly url: string;
      readonly html_url: string;
      readonly followers_url: string;
      readonly following_url: string;
      readonly gists_url: string;
      readonly starred_url: string;
      readonly subscriptions_url: string;
      readonly organizations_url: string;
      readonly repos_url: string;
      readonly events_url: string;
      readonly received_events_url: string;
      readonly type: string;
      readonly site_admin: boolean;
      readonly name: string | null;
      readonly company: string | null;
      readonly blog: string | null;
      readonly location: string | null;
      readonly email: string | null;
      readonly hireable: boolean | null;
      readonly bio: string | null;
      readonly twitter_username?: string | null;
      readonly public_repos: number;
      readonly public_gists: number;
      readonly followers: number;
      readonly following: number;
      readonly created_at: string;
      readonly updated_at: string;
      readonly plan?: {
        readonly collaborators: number;
        readonly name: string;
        readonly space: number;
        readonly private_repos: number;
      };
      readonly suspended_at?: string | null;
      readonly private_gists?: number;
      readonly total_private_repos?: number;
      readonly owned_private_repos?: number;
      readonly disk_usage?: number;
      readonly collaborators?: number;
    };
    /** Email */
    readonly email: {
      readonly email: string;
      readonly primary: boolean;
      readonly verified: boolean;
      readonly visibility: string | null;
    };
    /** A unique encryption key */
    readonly "gpg-key": {
      readonly id: number;
      readonly primary_key_id: number | null;
      readonly key_id: string;
      readonly public_key: string;
      readonly emails: readonly {
        readonly email?: string;
        readonly verified?: boolean;
      }[];
      readonly subkeys: readonly {
        readonly id?: number;
        readonly primary_key_id?: number;
        readonly key_id?: string;
        readonly public_key?: string;
        readonly emails?: readonly { readonly [key: string]: any }[];
        readonly subkeys?: readonly { readonly [key: string]: any }[];
        readonly can_sign?: boolean;
        readonly can_encrypt_comms?: boolean;
        readonly can_encrypt_storage?: boolean;
        readonly can_certify?: boolean;
        readonly created_at?: string;
        readonly expires_at?: string | null;
        readonly raw_key?: string | null;
      }[];
      readonly can_sign: boolean;
      readonly can_encrypt_comms: boolean;
      readonly can_encrypt_storage: boolean;
      readonly can_certify: boolean;
      readonly created_at: string;
      readonly expires_at: string | null;
      readonly raw_key: string | null;
    };
    /** Key */
    readonly key: {
      readonly key_id: string;
      readonly key: string;
      readonly id: number;
      readonly url: string;
      readonly title: string;
      readonly created_at: string;
      readonly verified: boolean;
      readonly read_only: boolean;
    };
    readonly "marketplace-account": {
      readonly url: string;
      readonly id: number;
      readonly type: string;
      readonly node_id?: string;
      readonly login: string;
      readonly email?: string | null;
      readonly organization_billing_email?: string | null;
    };
    /** User Marketplace Purchase */
    readonly "user-marketplace-purchase": {
      readonly billing_cycle: string;
      readonly next_billing_date: string | null;
      readonly unit_count: number | null;
      readonly on_free_trial: boolean;
      readonly free_trial_ends_on: string | null;
      readonly updated_at: string | null;
      readonly account: components["schemas"]["marketplace-account"];
      readonly plan: components["schemas"]["marketplace-listing-plan"];
    };
    /** Starred Repository */
    readonly "starred-repository": {
      readonly starred_at: string;
      readonly repo: components["schemas"]["repository"];
    };
    /** Hovercard */
    readonly hovercard: {
      readonly contexts: readonly {
        readonly message: string;
        readonly octicon: string;
      }[];
    };
    /** Key Simple */
    readonly "key-simple": {
      readonly id: number;
      readonly key: string;
    };
  };
  readonly responses: {
    /** Resource Not Found */
    readonly not_found: {
      readonly content: {
        readonly "application/json": components["schemas"]["basic-error"];
      };
    };
    /** Validation Failed */
    readonly validation_failed_simple: {
      readonly content: {
        readonly "application/json": components["schemas"]["validation-error-simple"];
      };
    };
    /** Preview Header Missing */
    readonly preview_header_missing: {
      readonly content: {
        readonly "application/json": {
          readonly message: string;
          readonly documentation_url: string;
        };
      };
    };
    /** Forbidden */
    readonly forbidden: {
      readonly content: {
        readonly "application/json": components["schemas"]["basic-error"];
      };
    };
    /** Requires Authentication */
    readonly requires_authentication: {
      readonly content: {
        readonly "application/json": components["schemas"]["basic-error"];
      };
    };
    /** Validation Failed */
    readonly validation_failed: {
      readonly content: {
        readonly "application/json": components["schemas"]["validation-error"];
      };
    };
    /** Not Modified */
    readonly not_modified: unknown;
    /** Gone */
    readonly gone: {
      readonly content: {
        readonly "application/json": components["schemas"]["basic-error"];
      };
    };
    /** Service Unavailable */
    readonly service_unavailable: {
      readonly content: {
        readonly "application/json": {
          readonly code?: string;
          readonly message?: string;
          readonly documentation_url?: string;
        };
      };
    };
    /** Forbidden Gist */
    readonly forbidden_gist: {
      readonly content: {
        readonly "application/json": {
          readonly block?: {
            readonly reason?: string;
            readonly created_at?: string;
            readonly html_url?: string | null;
          };
          readonly message?: string;
          readonly documentation_url?: string;
        };
      };
    };
    /** Moved Permanently */
    readonly moved_permanently: unknown;
    /** Conflict */
    readonly conflict: {
      readonly content: {
        readonly "application/json": components["schemas"]["basic-error"];
      };
    };
    /** Response if github advanced security is not enabled for this repository */
    readonly code_scanning_forbidden_read: {
      readonly content: {
        readonly "application/json": components["schemas"]["basic-error"];
      };
    };
    /** Response if the repository is archived or if github advanced security is not enabled for this repository */
    readonly code_scanning_forbidden_write: {
      readonly content: {
        readonly "application/json": components["schemas"]["basic-error"];
      };
    };
    /** Bad Request */
    readonly bad_request: {
      readonly content: {
        readonly "application/json": components["schemas"]["basic-error"];
        readonly "application/scim+json": components["schemas"]["scim-error"];
      };
    };
    /** Internal Error */
    readonly internal_error: {
      readonly content: {
        readonly "application/json": components["schemas"]["basic-error"];
      };
    };
    /** Found */
    readonly found: unknown;
    /** Resource Not Found */
    readonly scim_not_found: {
      readonly content: {
        readonly "application/json": components["schemas"]["scim-error"];
        readonly "application/scim+json": components["schemas"]["scim-error"];
      };
    };
    /** Forbidden */
    readonly scim_forbidden: {
      readonly content: {
        readonly "application/json": components["schemas"]["scim-error"];
        readonly "application/scim+json": components["schemas"]["scim-error"];
      };
    };
    /** Bad Request */
    readonly scim_bad_request: {
      readonly content: {
        readonly "application/json": components["schemas"]["scim-error"];
        readonly "application/scim+json": components["schemas"]["scim-error"];
      };
    };
    /** Internal Error */
    readonly scim_internal_error: {
      readonly content: {
        readonly "application/json": components["schemas"]["scim-error"];
        readonly "application/scim+json": components["schemas"]["scim-error"];
      };
    };
    /** Conflict */
    readonly scim_conflict: {
      readonly content: {
        readonly "application/json": components["schemas"]["scim-error"];
        readonly "application/scim+json": components["schemas"]["scim-error"];
      };
    };
  };
  readonly parameters: {
    /** Results per page (max 100). */
    readonly per_page: number;
    /** Page number of the results to fetch. */
    readonly page: number;
    /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
    readonly since: string;
    /** installation_id parameter */
    readonly installation_id: number;
    /** grant_id parameter */
    readonly grant_id: number;
    /** The client ID of your GitHub app. */
    readonly "client-id": string;
    readonly "access-token": string;
    readonly app_slug: string;
    /** authorization_id parameter */
    readonly authorization_id: number;
    /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
    readonly enterprise: string;
    /** Unique identifier of an organization. */
    readonly org_id: number;
    /** Unique identifier of the self-hosted runner group. */
    readonly runner_group_id: number;
    /** Unique identifier of the self-hosted runner. */
    readonly runner_id: number;
    /** A search phrase. For more information, see [Searching the audit log](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log). */
    readonly "audit-log-phrase": string;
    /**
     * The event types to include:
     *
     * - `web` - returns web (non-Git) events
     * - `git` - returns Git events
     * - `all` - returns both web and Git events
     *
     * The default is `web`.
     */
    readonly "audit-log-include": "web" | "git" | "all";
    /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor. */
    readonly "audit-log-after": string;
    /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. */
    readonly "audit-log-before": string;
    /**
     * The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.
     *
     * The default is `desc`.
     */
    readonly "audit-log-order": "desc" | "asc";
    /** gist_id parameter */
    readonly gist_id: string;
    /** comment_id parameter */
    readonly comment_id: number;
    /** A list of comma separated label names. Example: `bug,ui,@high` */
    readonly labels: string;
    /** One of `asc` (ascending) or `desc` (descending). */
    readonly direction: "asc" | "desc";
    /** account_id parameter */
    readonly account_id: number;
    /** plan_id parameter */
    readonly plan_id: number;
    /** One of `created` (when the repository was starred) or `updated` (when it was last pushed to). */
    readonly sort: "created" | "updated";
    readonly owner: string;
    readonly repo: string;
    /** If `true`, show notifications marked as read. */
    readonly all: boolean;
    /** If `true`, only shows notifications in which the user is directly participating or mentioned. */
    readonly participating: boolean;
    /** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
    readonly before: string;
    /** thread_id parameter */
    readonly thread_id: number;
    /** An organization ID. Only return organizations with an ID greater than this ID. */
    readonly "since-org": number;
    readonly org: string;
    readonly repository_id: number;
    /** secret_name parameter */
    readonly secret_name: string;
    readonly username: string;
    readonly "hook-id": number;
    /** invitation_id parameter */
    readonly invitation_id: number;
    /** migration_id parameter */
    readonly migration_id: number;
    /** repo_name parameter */
    readonly repo_name: string;
    /** The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`. */
    readonly package_type:
      | "npm"
      | "maven"
      | "rubygems"
      | "docker"
      | "nuget"
      | "container";
    /** The name of the package. */
    readonly package_name: string;
    /** Unique identifier of the package version. */
    readonly package_version_id: number;
    /** team_slug parameter */
    readonly team_slug: string;
    readonly "discussion-number": number;
    readonly "comment-number": number;
    readonly "reaction-id": number;
    readonly "project-id": number;
    /** card_id parameter */
    readonly card_id: number;
    /** column_id parameter */
    readonly column_id: number;
    /** artifact_id parameter */
    readonly artifact_id: number;
    /** job_id parameter */
    readonly job_id: number;
    /** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */
    readonly actor: string;
    /** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */
    readonly "workflow-run-branch": string;
    /** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)." */
    readonly event: string;
    /** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see "[Create a check run](https://docs.github.com/rest/reference/checks#create-a-check-run)." */
    readonly "workflow-run-status":
      | "completed"
      | "action_required"
      | "cancelled"
      | "failure"
      | "neutral"
      | "skipped"
      | "stale"
      | "success"
      | "timed_out"
      | "in_progress"
      | "queued"
      | "requested"
      | "waiting";
    /** The id of the workflow run */
    readonly "run-id": number;
    /** The ID of the workflow. You can also pass the workflow file name as a string. */
    readonly "workflow-id": number | string;
    /** The name of the branch. */
    readonly branch: string;
    /** check_run_id parameter */
    readonly check_run_id: number;
    /** check_suite_id parameter */
    readonly check_suite_id: number;
    /** Returns check runs with the specified `name`. */
    readonly check_name: string;
    /** Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`. */
    readonly status: "queued" | "in_progress" | "completed";
    /** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */
    readonly tool_name: components["schemas"]["code-scanning-analysis-tool-name"];
    /** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */
    readonly tool_guid: components["schemas"]["code-scanning-analysis-tool-guid"];
    /** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
    readonly git_ref: components["schemas"]["code-scanning-ref"];
    /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
    readonly alert_number: components["schemas"]["alert-number"];
    /** commit_sha parameter */
    readonly commit_sha: string;
    /** deployment_id parameter */
    readonly deployment_id: number;
    /** The name of the environment */
    readonly environment_name: string;
    /** A user ID. Only return users with an ID greater than this ID. */
    readonly "since-user": number;
    /** issue_number parameter */
    readonly issue_number: number;
    /** key_id parameter */
    readonly key_id: number;
    /** milestone_number parameter */
    readonly milestone_number: number;
    readonly "pull-number": number;
    /** review_id parameter */
    readonly review_id: number;
    /** asset_id parameter */
    readonly asset_id: number;
    /** release_id parameter */
    readonly release_id: number;
    /** Must be one of: `day`, `week`. */
    readonly per: "day" | "week";
    /** A repository ID. Only return repositories with an ID greater than this ID. */
    readonly "since-repo": number;
    /** Used for pagination: the index of the first result to return. */
    readonly start_index: number;
    /** Used for pagination: the number of results to return. */
    readonly count: number;
    /** Identifier generated by the GitHub SCIM endpoint. */
    readonly scim_group_id: string;
    /** scim_user_id parameter */
    readonly scim_user_id: string;
    /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
    readonly order: "desc" | "asc";
    readonly "team-id": number;
    /** gpg_key_id parameter */
    readonly gpg_key_id: number;
  };
  readonly headers: {
    readonly link?: string;
    readonly "content-type"?: string;
    readonly "x-common-marker-version"?: string;
    readonly "x-rate-limit-limit"?: number;
    readonly "x-rate-limit-remaining"?: number;
    readonly "x-rate-limit-reset"?: number;
    readonly location?: string;
  };
}

export interface operations {
  /** Get Hypermedia links to resources accessible in GitHub's REST API */
  readonly "meta/root": {
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly current_user_url: string;
            readonly current_user_authorizations_html_url: string;
            readonly authorizations_url: string;
            readonly code_search_url: string;
            readonly commit_search_url: string;
            readonly emails_url: string;
            readonly emojis_url: string;
            readonly events_url: string;
            readonly feeds_url: string;
            readonly followers_url: string;
            readonly following_url: string;
            readonly gists_url: string;
            readonly hub_url: string;
            readonly issue_search_url: string;
            readonly issues_url: string;
            readonly keys_url: string;
            readonly label_search_url: string;
            readonly notifications_url: string;
            readonly organization_url: string;
            readonly organization_repositories_url: string;
            readonly organization_teams_url: string;
            readonly public_gists_url: string;
            readonly rate_limit_url: string;
            readonly repository_url: string;
            readonly repository_search_url: string;
            readonly current_user_repositories_url: string;
            readonly starred_url: string;
            readonly starred_gists_url: string;
            readonly topic_search_url?: string;
            readonly user_url: string;
            readonly user_organizations_url: string;
            readonly user_repositories_url: string;
            readonly user_search_url: string;
          };
        };
      };
    };
  };
  /**
   * Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)" endpoint.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   */
  readonly "apps/get-authenticated": {
    readonly parameters: {};
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["integration"];
        };
      };
    };
  };
  /** Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`. */
  readonly "apps/create-from-manifest": {
    readonly parameters: {
      readonly path: {
        readonly code: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["integration"] &
            ({
              readonly client_id: string;
              readonly client_secret: string;
              readonly webhook_secret: string;
              readonly pem: string;
            } & { readonly [key: string]: any });
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed_simple"];
    };
  };
  /**
   * Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   */
  readonly "apps/get-webhook-config-for-app": {
    readonly responses: {
      /** Default response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["webhook-config"];
        };
      };
    };
  };
  /**
   * Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   */
  readonly "apps/update-webhook-config-for-app": {
    readonly responses: {
      /** Default response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["webhook-config"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          readonly url?: components["schemas"]["webhook-config-url"];
          readonly content_type?: components["schemas"]["webhook-config-content-type"];
          readonly secret?: components["schemas"]["webhook-config-secret"];
          readonly insecure_ssl?: components["schemas"]["webhook-config-insecure-ssl"];
        };
      };
    };
  };
  /**
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   *
   * The permissions the installation has are included under the `permissions` key.
   */
  readonly "apps/list-installations": {
    readonly parameters: {
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components["parameters"]["since"];
        readonly outdated?: string;
      };
    };
    readonly responses: {
      /** The permissions the installation has are included under the `permissions` key. */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["installation"][];
        };
      };
    };
  };
  /**
   * Enables an authenticated GitHub App to find an installation's information using the installation id. The installation's account type (`target_type`) will be either an organization or a user account, depending which account the repository belongs to.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   */
  readonly "apps/get-installation": {
    readonly parameters: {
      readonly path: {
        /** installation_id parameter */
        readonly installation_id: components["parameters"]["installation_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["installation"];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 415: components["responses"]["preview_header_missing"];
    };
  };
  /**
   * Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/rest/reference/apps/#suspend-an-app-installation)" endpoint.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   */
  readonly "apps/delete-installation": {
    readonly parameters: {
      readonly path: {
        /** installation_id parameter */
        readonly installation_id: components["parameters"]["installation_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   */
  readonly "apps/create-installation-access-token": {
    readonly parameters: {
      readonly path: {
        /** installation_id parameter */
        readonly installation_id: components["parameters"]["installation_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["installation-token"];
        };
      };
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 415: components["responses"]["preview_header_missing"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** List of repository names that the token should have access to */
          readonly repositories?: readonly string[];
          /** List of repository IDs that the token should have access to */
          readonly repository_ids?: readonly number[];
          readonly permissions?: components["schemas"]["app-permissions"];
        };
      };
    };
  };
  /**
   * Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   */
  readonly "apps/suspend-installation": {
    readonly parameters: {
      readonly path: {
        /** installation_id parameter */
        readonly installation_id: components["parameters"]["installation_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Removes a GitHub App installation suspension.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   */
  readonly "apps/unsuspend-installation": {
    readonly parameters: {
      readonly path: {
        /** installation_id parameter */
        readonly installation_id: components["parameters"]["installation_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   *
   * You can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://docs.github.com/rest/reference/oauth-authorizations#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The `scopes` returned are the union of scopes authorized for the application. For example, if an application has one token with `repo` scope and another token with `user` scope, the grant will return `["repo", "user"]`.
   */
  readonly "oauth-authorizations/list-grants": {
    readonly parameters: {
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["application-grant"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). */
  readonly "oauth-authorizations/get-grant": {
    readonly parameters: {
      readonly path: {
        /** grant_id parameter */
        readonly grant_id: components["parameters"]["grant_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["application-grant"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
    };
  };
  /**
   * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   *
   * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
   */
  readonly "oauth-authorizations/delete-grant": {
    readonly parameters: {
      readonly path: {
        /** grant_id parameter */
        readonly grant_id: components["parameters"]["grant_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
    };
  };
  /**
   * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
   * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
   */
  readonly "apps/delete-authorization": {
    readonly parameters: {
      readonly path: {
        /** The client ID of your GitHub app. */
        readonly client_id: components["parameters"]["client-id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The OAuth access token used to authenticate to the GitHub API. */
          readonly access_token?: string;
        };
      };
    };
  };
  /**
   * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
   *
   * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid token as `:access_token` and the grant for the token's owner will be deleted.
   *
   * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the Applications settings page under "Authorized OAuth Apps" on GitHub](https://github.com/settings/applications#authorized).
   */
  readonly "apps/revoke-grant-for-application": {
    readonly parameters: {
      readonly path: {
        /** The client ID of your GitHub app. */
        readonly client_id: components["parameters"]["client-id"];
        readonly access_token: components["parameters"]["access-token"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /** OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`. */
  readonly "apps/check-token": {
    readonly parameters: {
      readonly path: {
        /** The client ID of your GitHub app. */
        readonly client_id: components["parameters"]["client-id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["authorization"];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The access_token of the OAuth application. */
          readonly access_token: string;
        };
      };
    };
  };
  /** OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. */
  readonly "apps/delete-token": {
    readonly parameters: {
      readonly path: {
        /** The client ID of your GitHub app. */
        readonly client_id: components["parameters"]["client-id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The OAuth access token used to authenticate to the GitHub API. */
          readonly access_token?: string;
        };
      };
    };
  };
  /** OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`. */
  readonly "apps/reset-token": {
    readonly parameters: {
      readonly path: {
        /** The client ID of your GitHub app. */
        readonly client_id: components["parameters"]["client-id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["authorization"];
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The access_token of the OAuth application. */
          readonly access_token: string;
        };
      };
    };
  };
  /** Exchanges a non-repository scoped user-to-server OAuth access token for a repository scoped user-to-server OAuth access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`. */
  readonly "apps/scope-token": {
    readonly parameters: {
      readonly path: {
        /** The client ID of your GitHub app. */
        readonly client_id: components["parameters"]["client-id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["authorization"];
        };
      };
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** **Required.** The OAuth access token used to authenticate to the GitHub API. */
          readonly access_token?: string;
          /** The name of the user or organization to scope the user-to-server access token to. **Required** unless `target_id` is specified. */
          readonly target?: string;
          /** The ID of the user or organization to scope the user-to-server access token to. **Required** unless `target` is specified. */
          readonly target_id?: number;
          /** The list of repository IDs to scope the user-to-server access token to. `repositories` may not be specified if `repository_ids` is specified. */
          readonly repositories?: readonly string[];
          /** The list of repository names to scope the user-to-server access token to. `repository_ids` may not be specified if `repositories` is specified. */
          readonly repository_ids?: readonly number[];
          readonly permissions?: components["schemas"]["app-permissions"];
        };
      };
    };
  };
  /**
   * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
   *
   * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
   */
  readonly "apps/check-authorization": {
    readonly parameters: {
      readonly path: {
        /** The client ID of your GitHub app. */
        readonly client_id: components["parameters"]["client-id"];
        readonly access_token: components["parameters"]["access-token"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json":
            | components["schemas"]["authorization"]
            | null;
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
   *
   * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
   */
  readonly "apps/reset-authorization": {
    readonly parameters: {
      readonly path: {
        /** The client ID of your GitHub app. */
        readonly client_id: components["parameters"]["client-id"];
        readonly access_token: components["parameters"]["access-token"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["authorization"];
        };
      };
    };
  };
  /**
   * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
   *
   * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
   */
  readonly "apps/revoke-authorization-for-application": {
    readonly parameters: {
      readonly path: {
        /** The client ID of your GitHub app. */
        readonly client_id: components["parameters"]["client-id"];
        readonly access_token: components["parameters"]["access-token"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
   *
   * If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
   */
  readonly "apps/get-by-slug": {
    readonly parameters: {
      readonly path: {
        readonly app_slug: components["parameters"]["app_slug"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["integration"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 415: components["responses"]["preview_header_missing"];
    };
  };
  /** **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). */
  readonly "oauth-authorizations/list-authorizations": {
    readonly parameters: {
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["authorization"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   *
   * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
   *
   * Creates OAuth tokens using [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication). If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
   *
   * To create tokens for a particular OAuth application using this endpoint, you must authenticate as the user you want to create an authorization for and provide the app's client ID and secret, found on your OAuth application's settings page. If your OAuth application intends to create multiple tokens for one user, use `fingerprint` to differentiate between them.
   *
   * You can also create tokens on GitHub from the [personal access tokens settings](https://github.com/settings/tokens) page. Read more about these tokens in [the GitHub Help documentation](https://help.github.com/articles/creating-an-access-token-for-command-line-use).
   *
   * Organizations that enforce SAML SSO require personal access tokens to be allowed. Read more about allowing tokens in [the GitHub Help documentation](https://help.github.com/articles/about-identity-and-access-management-with-saml-single-sign-on).
   */
  readonly "oauth-authorizations/create-authorization": {
    readonly parameters: {};
    readonly responses: {
      /** response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["authorization"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 410: components["responses"]["gone"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** A list of scopes that this authorization is in. */
          readonly scopes?: readonly string[] | null;
          /** A note to remind you what the OAuth token is for. */
          readonly note?: string;
          /** A URL to remind you what app the OAuth token is for. */
          readonly note_url?: string;
          /** The OAuth app client key for which to create the token. */
          readonly client_id?: string;
          /** The OAuth app client secret for which to create the token. */
          readonly client_secret?: string;
          /** A unique string to distinguish an authorization from others created for the same client ID and user. */
          readonly fingerprint?: string;
        };
      };
    };
  };
  /**
   * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   *
   * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
   *
   * Creates a new authorization for the specified OAuth application, only if an authorization for that application doesn't already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
   *
   * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
   *
   * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   */
  readonly "oauth-authorizations/get-or-create-authorization-for-app": {
    readonly parameters: {
      readonly path: {
        /** The client ID of your GitHub app. */
        readonly client_id: components["parameters"]["client-id"];
      };
    };
    readonly responses: {
      /** Response if returning an existing token */
      readonly 200: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["authorization"];
        };
      };
      /** **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["authorization"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The OAuth app client secret for which to create the token. */
          readonly client_secret: string;
          /** A list of scopes that this authorization is in. */
          readonly scopes?: readonly string[] | null;
          /** A note to remind you what the OAuth token is for. */
          readonly note?: string;
          /** A URL to remind you what app the OAuth token is for. */
          readonly note_url?: string;
          /** A unique string to distinguish an authorization from others created for the same client ID and user. */
          readonly fingerprint?: string;
        };
      };
    };
  };
  /**
   * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   *
   * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
   *
   * This method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. `fingerprint` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
   *
   * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
   */
  readonly "oauth-authorizations/get-or-create-authorization-for-app-and-fingerprint": {
    readonly parameters: {
      readonly path: {
        /** The client ID of your GitHub app. */
        readonly client_id: components["parameters"]["client-id"];
        readonly fingerprint: string;
      };
    };
    readonly responses: {
      /** Response if returning an existing token */
      readonly 200: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["authorization"];
        };
      };
      /** Response if returning a new token */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["authorization"];
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The OAuth app client secret for which to create the token. */
          readonly client_secret: string;
          /** A list of scopes that this authorization is in. */
          readonly scopes?: readonly string[] | null;
          /** A note to remind you what the OAuth token is for. */
          readonly note?: string;
          /** A URL to remind you what app the OAuth token is for. */
          readonly note_url?: string;
        };
      };
    };
  };
  /** **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). */
  readonly "oauth-authorizations/get-authorization": {
    readonly parameters: {
      readonly path: {
        /** authorization_id parameter */
        readonly authorization_id: components["parameters"]["authorization_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["authorization"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
    };
  };
  /** **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/). */
  readonly "oauth-authorizations/delete-authorization": {
    readonly parameters: {
      readonly path: {
        /** authorization_id parameter */
        readonly authorization_id: components["parameters"]["authorization_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
    };
  };
  /**
   * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   *
   * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
   *
   * You can only send one of these scope keys at a time.
   */
  readonly "oauth-authorizations/update-authorization": {
    readonly parameters: {
      readonly path: {
        /** authorization_id parameter */
        readonly authorization_id: components["parameters"]["authorization_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["authorization"];
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** A list of scopes that this authorization is in. */
          readonly scopes?: readonly string[] | null;
          /** A list of scopes to add to this authorization. */
          readonly add_scopes?: readonly string[];
          /** A list of scopes to remove from this authorization. */
          readonly remove_scopes?: readonly string[];
          /** A note to remind you what the OAuth token is for. */
          readonly note?: string;
          /** A URL to remind you what app the OAuth token is for. */
          readonly note_url?: string;
          /** A unique string to distinguish an authorization from others created for the same client ID and user. */
          readonly fingerprint?: string;
        };
      };
    };
  };
  readonly "codes-of-conduct/get-all-codes-of-conduct": {
    readonly parameters: {};
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["code-of-conduct"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 415: components["responses"]["preview_header_missing"];
    };
  };
  readonly "codes-of-conduct/get-conduct-code": {
    readonly parameters: {
      readonly path: {
        readonly key: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["code-of-conduct"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 404: components["responses"]["not_found"];
      readonly 415: components["responses"]["preview_header_missing"];
    };
  };
  /**
   * Creates an attachment under a content reference URL in the body or comment of an issue or pull request. Use the `id` of the content reference from the [`content_reference` event](https://docs.github.com/webhooks/event-payloads/#content_reference) to create an attachment.
   *
   * The app must create a content attachment within six hours of the content reference URL being posted. See "[Using content attachments](https://docs.github.com/apps/using-content-attachments/)" for details about content attachments.
   *
   * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
   */
  readonly "apps/create-content-attachment": {
    readonly parameters: {
      readonly path: {
        readonly content_reference_id: number;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["content-reference-attachment"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 410: components["responses"]["gone"];
      readonly 415: components["responses"]["preview_header_missing"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The title of the attachment */
          readonly title: string;
          /** The body of the attachment */
          readonly body: string;
        };
      };
    };
  };
  /** Lists all the emojis available to use on GitHub. */
  readonly "emojis/get": {
    readonly parameters: {};
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": { readonly [key: string]: string };
        };
      };
      readonly 304: components["responses"]["not_modified"];
    };
  };
  /**
   * Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly "enterprise-admin/get-github-actions-permissions-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["actions-enterprise-permissions"];
        };
      };
    };
  };
  /**
   * Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly "enterprise-admin/set-github-actions-permissions-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          readonly enabled_organizations: components["schemas"]["enabled-organizations"];
          readonly allowed_actions?: components["schemas"]["allowed-actions"];
        };
      };
    };
  };
  /**
   * Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly "enterprise-admin/list-selected-organizations-enabled-github-actions-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly organizations: readonly components["schemas"]["organization-simple"][];
          };
        };
      };
    };
  };
  /**
   * Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly "enterprise-admin/set-selected-organizations-enabled-github-actions-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** List of organization IDs to enable for GitHub Actions. */
          readonly selected_organization_ids: readonly number[];
        };
      };
    };
  };
  /**
   * Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly "enterprise-admin/enable-selected-organization-github-actions-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
        /** Unique identifier of an organization. */
        readonly org_id: components["parameters"]["org_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly "enterprise-admin/disable-selected-organization-github-actions-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
        /** Unique identifier of an organization. */
        readonly org_id: components["parameters"]["org_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly "enterprise-admin/get-allowed-actions-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["selected-actions"];
        };
      };
    };
  };
  /**
   * Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly "enterprise-admin/set-allowed-actions-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["selected-actions"];
      };
    };
  };
  /**
   * Lists all self-hosted runner groups for an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly "enterprise-admin/list-self-hosted-runner-groups-for-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly runner_groups: readonly components["schemas"]["runner-groups-enterprise"][];
          };
        };
      };
    };
  };
  /**
   * Creates a new self-hosted runner group for an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly "enterprise-admin/create-self-hosted-runner-group-for-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["runner-groups-enterprise"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Name of the runner group. */
          readonly name: string;
          /** Visibility of a runner group. You can select all organizations or select individual organization. Can be one of: `all` or `selected` */
          readonly visibility?: "selected" | "all";
          /** List of organization IDs that can access the runner group. */
          readonly selected_organization_ids?: readonly number[];
          /** List of runner IDs to add to the runner group. */
          readonly runners?: readonly number[];
        };
      };
    };
  };
  /**
   * Gets a specific self-hosted runner group for an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly "enterprise-admin/get-self-hosted-runner-group-for-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components["parameters"]["runner_group_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["runner-groups-enterprise"];
        };
      };
    };
  };
  /**
   * Deletes a self-hosted runner group for an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly "enterprise-admin/delete-self-hosted-runner-group-from-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components["parameters"]["runner_group_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly "enterprise-admin/update-self-hosted-runner-group-for-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components["parameters"]["runner_group_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["runner-groups-enterprise"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Name of the runner group. */
          readonly name?: string;
          /** Visibility of a runner group. You can select all organizations or select individual organizations. Can be one of: `all` or `selected` */
          readonly visibility?: "selected" | "all";
        };
      };
    };
  };
  /**
   * Lists the organizations with access to a self-hosted runner group.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly "enterprise-admin/list-org-access-to-self-hosted-runner-group-in-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components["parameters"]["runner_group_id"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly organizations: readonly components["schemas"]["organization-simple"][];
          };
        };
      };
    };
  };
  /**
   * Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly "enterprise-admin/set-org-access-to-self-hosted-runner-group-in-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components["parameters"]["runner_group_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** List of organization IDs that can access the runner group. */
          readonly selected_organization_ids: readonly number[];
        };
      };
    };
  };
  /**
   * Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly "enterprise-admin/add-org-access-to-self-hosted-runner-group-in-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components["parameters"]["runner_group_id"];
        /** Unique identifier of an organization. */
        readonly org_id: components["parameters"]["org_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly "enterprise-admin/remove-org-access-to-self-hosted-runner-group-in-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components["parameters"]["runner_group_id"];
        /** Unique identifier of an organization. */
        readonly org_id: components["parameters"]["org_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * Lists the self-hosted runners that are in a specific enterprise group.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly "enterprise-admin/list-self-hosted-runners-in-group-for-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components["parameters"]["runner_group_id"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly runners: readonly components["schemas"]["runner"][];
          };
        };
      };
    };
  };
  /**
   * Replaces the list of self-hosted runners that are part of an enterprise runner group.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly "enterprise-admin/set-self-hosted-runners-in-group-for-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components["parameters"]["runner_group_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** List of runner IDs to add to the runner group. */
          readonly runners: readonly number[];
        };
      };
    };
  };
  /**
   * Adds a self-hosted runner to a runner group configured in an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise`
   * scope to use this endpoint.
   */
  readonly "enterprise-admin/add-self-hosted-runner-to-group-for-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components["parameters"]["runner_group_id"];
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components["parameters"]["runner_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly "enterprise-admin/remove-self-hosted-runner-from-group-for-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components["parameters"]["runner_group_id"];
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components["parameters"]["runner_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * Lists all self-hosted runners configured for an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly "enterprise-admin/list-self-hosted-runners-for-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": {
            readonly total_count?: number;
            readonly runners?: readonly components["schemas"]["runner"][];
          };
        };
      };
    };
  };
  /**
   * Lists binaries for the runner application that you can download and run.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly "enterprise-admin/list-runner-applications-for-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["runner-application"][];
        };
      };
    };
  };
  /**
   * Returns a token that you can pass to the `config` script. The token expires after one hour.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   *
   * #### Example using registration token
   *
   * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
   *
   * ```
   * ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN
   * ```
   */
  readonly "enterprise-admin/create-registration-token-for-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["authentication-token"];
        };
      };
    };
  };
  /**
   * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   *
   * #### Example using remove token
   *
   * To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this
   * endpoint.
   *
   * ```
   * ./config.sh remove --token TOKEN
   * ```
   */
  readonly "enterprise-admin/create-remove-token-for-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["authentication-token"];
        };
      };
    };
  };
  /**
   * Gets a specific self-hosted runner configured in an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly "enterprise-admin/get-self-hosted-runner-for-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components["parameters"]["runner_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["runner"];
        };
      };
    };
  };
  /**
   * Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   */
  readonly "enterprise-admin/delete-self-hosted-runner-from-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components["parameters"]["runner_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * **Note:** The audit log REST API is currently in beta and is subject to change.
   *
   * Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `admin:enterprise` scope.
   */
  readonly "audit-log/get-audit-log": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
      };
      readonly query: {
        /** A search phrase. For more information, see [Searching the audit log](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log). */
        readonly phrase?: components["parameters"]["audit-log-phrase"];
        /**
         * The event types to include:
         *
         * - `web` - returns web (non-Git) events
         * - `git` - returns Git events
         * - `all` - returns both web and Git events
         *
         * The default is `web`.
         */
        readonly include?: components["parameters"]["audit-log-include"];
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor. */
        readonly after?: components["parameters"]["audit-log-after"];
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. */
        readonly before?: components["parameters"]["audit-log-before"];
        /**
         * The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.
         *
         * The default is `desc`.
         */
        readonly order?: components["parameters"]["audit-log-order"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
      };
    };
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["audit-log-event"][];
        };
      };
    };
  };
  /**
   * Gets the summary of the free and paid GitHub Actions minutes used.
   *
   * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
   *
   * The authenticated user must be an enterprise admin.
   */
  readonly "billing/get-github-actions-billing-ghe": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["actions-billing-usage"];
        };
      };
    };
  };
  /**
   * Gets the free and paid storage used for GitHub Packages in gigabytes.
   *
   * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
   *
   * The authenticated user must be an enterprise admin.
   */
  readonly "billing/get-github-packages-billing-ghe": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["packages-billing-usage"];
        };
      };
    };
  };
  /**
   * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
   *
   * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
   *
   * The authenticated user must be an enterprise admin.
   */
  readonly "billing/get-shared-storage-billing-ghe": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["combined-billing-usage"];
        };
      };
    };
  };
  /** We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago. */
  readonly "activity/list-public-events": {
    readonly parameters: {
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["event"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden"];
      readonly 503: components["responses"]["service_unavailable"];
    };
  };
  /**
   * GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:
   *
   * *   **Timeline**: The GitHub global public timeline
   * *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia)
   * *   **Current user public**: The public timeline for the authenticated user
   * *   **Current user**: The private timeline for the authenticated user
   * *   **Current user actor**: The private timeline for activity created by the authenticated user
   * *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
   * *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.
   *
   * **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
   */
  readonly "activity/get-feeds": {
    readonly parameters: {};
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["feed"];
        };
      };
    };
  };
  /** Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists: */
  readonly "gists/list": {
    readonly parameters: {
      readonly query: {
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components["parameters"]["since"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["base-gist"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden"];
    };
  };
  /**
   * Allows you to add a new gist with one or more files.
   *
   * **Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
   */
  readonly "gists/create": {
    readonly parameters: {};
    readonly responses: {
      /** response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["gist-simple"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Description of the gist */
          readonly description?: string;
          /** Names and content for the files that make up the gist */
          readonly files: {
            readonly [key: string]: {
              /** Content of the file */
              readonly content: string;
            };
          };
          readonly public?: boolean | ("true" | "false");
        };
      };
    };
  };
  /**
   * List public gists sorted by most recently updated to least recently updated.
   *
   * Note: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
   */
  readonly "gists/list-public": {
    readonly parameters: {
      readonly query: {
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components["parameters"]["since"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["base-gist"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  /** List the authenticated user's starred gists: */
  readonly "gists/list-starred": {
    readonly parameters: {
      readonly query: {
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components["parameters"]["since"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["base-gist"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
    };
  };
  readonly "gists/get": {
    readonly parameters: {
      readonly path: {
        /** gist_id parameter */
        readonly gist_id: components["parameters"]["gist_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["gist-simple"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden_gist"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  readonly "gists/delete": {
    readonly parameters: {
      readonly path: {
        /** gist_id parameter */
        readonly gist_id: components["parameters"]["gist_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged. */
  readonly "gists/update": {
    readonly parameters: {
      readonly path: {
        /** gist_id parameter */
        readonly gist_id: components["parameters"]["gist_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["gist-simple"];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Description of the gist */
          readonly description?: string;
          /** Names of files to be updated */
          readonly files?: {
            readonly [key: string]: Partial<{ readonly [key: string]: any }>;
          };
        } | null;
      };
    };
  };
  readonly "gists/list-comments": {
    readonly parameters: {
      readonly path: {
        /** gist_id parameter */
        readonly gist_id: components["parameters"]["gist_id"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["gist-comment"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  readonly "gists/create-comment": {
    readonly parameters: {
      readonly path: {
        /** gist_id parameter */
        readonly gist_id: components["parameters"]["gist_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["gist-comment"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The comment text. */
          readonly body: string;
        };
      };
    };
  };
  readonly "gists/get-comment": {
    readonly parameters: {
      readonly path: {
        /** gist_id parameter */
        readonly gist_id: components["parameters"]["gist_id"];
        /** comment_id parameter */
        readonly comment_id: components["parameters"]["comment_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["gist-comment"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden_gist"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  readonly "gists/delete-comment": {
    readonly parameters: {
      readonly path: {
        /** gist_id parameter */
        readonly gist_id: components["parameters"]["gist_id"];
        /** comment_id parameter */
        readonly comment_id: components["parameters"]["comment_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  readonly "gists/update-comment": {
    readonly parameters: {
      readonly path: {
        /** gist_id parameter */
        readonly gist_id: components["parameters"]["gist_id"];
        /** comment_id parameter */
        readonly comment_id: components["parameters"]["comment_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["gist-comment"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The comment text. */
          readonly body: string;
        };
      };
    };
  };
  readonly "gists/list-commits": {
    readonly parameters: {
      readonly path: {
        /** gist_id parameter */
        readonly gist_id: components["parameters"]["gist_id"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {
          readonly Link?: string;
        };
        readonly content: {
          readonly "application/json": readonly components["schemas"]["gist-commit"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  readonly "gists/list-forks": {
    readonly parameters: {
      readonly path: {
        /** gist_id parameter */
        readonly gist_id: components["parameters"]["gist_id"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["gist-simple"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** **Note**: This was previously `/gists/:gist_id/fork`. */
  readonly "gists/fork": {
    readonly parameters: {
      readonly path: {
        /** gist_id parameter */
        readonly gist_id: components["parameters"]["gist_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["base-gist"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  readonly "gists/check-is-starred": {
    readonly parameters: {
      readonly path: {
        /** gist_id parameter */
        readonly gist_id: components["parameters"]["gist_id"];
      };
    };
    readonly responses: {
      /** Response if gist is starred */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden"];
      /** Response if gist is not starred */
      readonly 404: {
        readonly content: {
          readonly "application/json": { readonly [key: string]: any };
        };
      };
    };
  };
  /** Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)." */
  readonly "gists/star": {
    readonly parameters: {
      readonly path: {
        /** gist_id parameter */
        readonly gist_id: components["parameters"]["gist_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  readonly "gists/unstar": {
    readonly parameters: {
      readonly path: {
        /** gist_id parameter */
        readonly gist_id: components["parameters"]["gist_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  readonly "gists/get-revision": {
    readonly parameters: {
      readonly path: {
        /** gist_id parameter */
        readonly gist_id: components["parameters"]["gist_id"];
        readonly sha: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["gist-simple"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  /** List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user). */
  readonly "gitignore/get-all-templates": {
    readonly parameters: {};
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly string[];
        };
      };
      readonly 304: components["responses"]["not_modified"];
    };
  };
  /**
   * The API also allows fetching the source of a single template.
   * Use the raw [media type](https://docs.github.com/rest/overview/media-types/) to get the raw contents.
   */
  readonly "gitignore/get-template": {
    readonly parameters: {
      readonly path: {
        readonly name: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["gitignore-template"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
    };
  };
  /**
   * List repositories that an app installation can access.
   *
   * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
   */
  readonly "apps/list-repos-accessible-to-installation": {
    readonly parameters: {
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly repositories: readonly components["schemas"]["repository"][];
            readonly repository_selection?: string;
          };
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
    };
  };
  /**
   * Revokes the installation token you're using to authenticate as an installation and access this endpoint.
   *
   * Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/rest/reference/apps#create-an-installation-access-token-for-an-app)" endpoint.
   *
   * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
   */
  readonly "apps/revoke-installation-access-token": {
    readonly parameters: {};
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * List issues assigned to the authenticated user across all visible repositories including owned repositories, member
   * repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
   * necessarily assigned to you.
   *
   *
   * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
   * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
   * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
   * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
   */
  readonly "issues/list": {
    readonly parameters: {
      readonly query: {
        /**
         * Indicates which sorts of issues to return. Can be one of:
         * \* `assigned`: Issues assigned to you
         * \* `created`: Issues created by you
         * \* `mentioned`: Issues mentioning you
         * \* `subscribed`: Issues you're subscribed to updates for
         * \* `all`: All issues the authenticated user can see, regardless of participation or creation
         */
        readonly filter?:
          | "assigned"
          | "created"
          | "mentioned"
          | "subscribed"
          | "all";
        /** Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`. */
        readonly state?: "open" | "closed" | "all";
        /** A list of comma separated label names. Example: `bug,ui,@high` */
        readonly labels?: components["parameters"]["labels"];
        /** What to sort results by. Can be either `created`, `updated`, `comments`. */
        readonly sort?: "created" | "updated" | "comments";
        /** One of `asc` (ascending) or `desc` (descending). */
        readonly direction?: components["parameters"]["direction"];
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components["parameters"]["since"];
        readonly collab?: boolean;
        readonly orgs?: boolean;
        readonly owned?: boolean;
        readonly pulls?: boolean;
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["issue"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  readonly "licenses/get-all-commonly-used": {
    readonly parameters: {
      readonly query: {
        readonly featured?: boolean;
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["license-simple"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
    };
  };
  readonly "licenses/get": {
    readonly parameters: {
      readonly path: {
        readonly license: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["license"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  readonly "markdown/render": {
    readonly parameters: {};
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {
          readonly "Content-Length"?: string;
        };
        readonly content: {
          readonly "text/html": string;
        };
      };
      readonly 304: components["responses"]["not_modified"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The Markdown text to render in HTML. */
          readonly text: string;
          /** The rendering mode. */
          readonly mode?: "markdown" | "gfm";
          /** The repository context to use when creating references in `gfm` mode. */
          readonly context?: string;
        };
      };
    };
  };
  /** You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less. */
  readonly "markdown/render-raw": {
    readonly parameters: {};
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "text/html": string;
        };
      };
      readonly 304: components["responses"]["not_modified"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "text/plain": string;
        readonly "text/x-markdown": string;
      };
    };
  };
  /**
   * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
   *
   * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
   */
  readonly "apps/get-subscription-plan-for-account": {
    readonly parameters: {
      readonly path: {
        /** account_id parameter */
        readonly account_id: components["parameters"]["account_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["marketplace-purchase"];
        };
      };
      readonly 401: components["responses"]["requires_authentication"];
      /** Response when the account has not purchased the listing */
      readonly 404: {
        readonly content: {
          readonly "application/json": components["schemas"]["basic-error"];
        };
      };
    };
  };
  /**
   * Lists all plans that are part of your GitHub Marketplace listing.
   *
   * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
   */
  readonly "apps/list-plans": {
    readonly parameters: {
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["marketplace-listing-plan"][];
        };
      };
      readonly 401: components["responses"]["requires_authentication"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
   *
   * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
   */
  readonly "apps/list-accounts-for-plan": {
    readonly parameters: {
      readonly path: {
        /** plan_id parameter */
        readonly plan_id: components["parameters"]["plan_id"];
      };
      readonly query: {
        /** One of `created` (when the repository was starred) or `updated` (when it was last pushed to). */
        readonly sort?: components["parameters"]["sort"];
        /** To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter. */
        readonly direction?: "asc" | "desc";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["marketplace-purchase"][];
        };
      };
      readonly 401: components["responses"]["requires_authentication"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  /**
   * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
   *
   * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
   */
  readonly "apps/get-subscription-plan-for-account-stubbed": {
    readonly parameters: {
      readonly path: {
        /** account_id parameter */
        readonly account_id: components["parameters"]["account_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["marketplace-purchase"];
        };
      };
      readonly 401: components["responses"]["requires_authentication"];
      /** Response when the account has not purchased the listing */
      readonly 404: unknown;
    };
  };
  /**
   * Lists all plans that are part of your GitHub Marketplace listing.
   *
   * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
   */
  readonly "apps/list-plans-stubbed": {
    readonly parameters: {
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["marketplace-listing-plan"][];
        };
      };
      readonly 401: components["responses"]["requires_authentication"];
    };
  };
  /**
   * Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
   *
   * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
   */
  readonly "apps/list-accounts-for-plan-stubbed": {
    readonly parameters: {
      readonly path: {
        /** plan_id parameter */
        readonly plan_id: components["parameters"]["plan_id"];
      };
      readonly query: {
        /** One of `created` (when the repository was starred) or `updated` (when it was last pushed to). */
        readonly sort?: components["parameters"]["sort"];
        /** To return the oldest accounts first, set to `asc`. Can be one of `asc` or `desc`. Ignored without the `sort` parameter. */
        readonly direction?: "asc" | "desc";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["marketplace-purchase"][];
        };
      };
      readonly 401: components["responses"]["requires_authentication"];
    };
  };
  /**
   * Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://help.github.com/articles/about-github-s-ip-addresses/)."
   *
   * **Note:** The IP addresses shown in the documentation's response are only example values. You must always query the API directly to get the latest list of IP addresses.
   */
  readonly "meta/get": {
    readonly parameters: {};
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["api-overview"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
    };
  };
  readonly "activity/list-public-events-for-repo-network": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["event"][];
        };
      };
      readonly 301: components["responses"]["moved_permanently"];
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** List all notifications for the current user, sorted by most recently updated. */
  readonly "activity/list-notifications-for-authenticated-user": {
    readonly parameters: {
      readonly query: {
        /** If `true`, show notifications marked as read. */
        readonly all?: components["parameters"]["all"];
        /** If `true`, only shows notifications in which the user is directly participating or mentioned. */
        readonly participating?: components["parameters"]["participating"];
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components["parameters"]["since"];
        /** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly before?: components["parameters"]["before"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["thread"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  /** Marks all notifications as "read" removes it from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`. */
  readonly "activity/mark-notifications-as-read": {
    readonly parameters: {};
    readonly responses: {
      /** response */
      readonly 202: {
        readonly content: {
          readonly "application/json": {
            readonly message?: string;
          };
        };
      };
      /** response */
      readonly 205: unknown;
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Describes the last point that notifications were checked. */
          readonly last_read_at?: string;
          /** Whether the notification has been read. */
          readonly read?: boolean;
        };
      };
    };
  };
  readonly "activity/get-thread": {
    readonly parameters: {
      readonly path: {
        /** thread_id parameter */
        readonly thread_id: components["parameters"]["thread_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["thread"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
    };
  };
  readonly "activity/mark-thread-as-read": {
    readonly parameters: {
      readonly path: {
        /** thread_id parameter */
        readonly thread_id: components["parameters"]["thread_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 205: unknown;
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden"];
    };
  };
  /**
   * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/reference/activity#get-a-repository-subscription).
   *
   * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
   */
  readonly "activity/get-thread-subscription-for-authenticated-user": {
    readonly parameters: {
      readonly path: {
        /** thread_id parameter */
        readonly thread_id: components["parameters"]["thread_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["thread-subscription"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
    };
  };
  /**
   * If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
   *
   * You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
   *
   * Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/reference/activity#delete-a-thread-subscription) endpoint.
   */
  readonly "activity/set-thread-subscription": {
    readonly parameters: {
      readonly path: {
        /** thread_id parameter */
        readonly thread_id: components["parameters"]["thread_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["thread-subscription"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Whether to block all notifications from a thread. */
          readonly ignored?: boolean;
        };
      };
    };
  };
  /** Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/reference/activity#set-a-thread-subscription) endpoint and set `ignore` to `true`. */
  readonly "activity/delete-thread-subscription": {
    readonly parameters: {
      readonly path: {
        /** thread_id parameter */
        readonly thread_id: components["parameters"]["thread_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
    };
  };
  /** Get the octocat as ASCII art */
  readonly "meta/get-octocat": {
    readonly parameters: {
      readonly query: {
        /** The words to show in Octocat's speech bubble */
        readonly s?: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/octocat-stream": string;
        };
      };
    };
  };
  /**
   * Lists all organizations, in the order that they were created on GitHub.
   *
   * **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.
   */
  readonly "orgs/list": {
    readonly parameters: {
      readonly query: {
        /** An organization ID. Only return organizations with an ID greater than this ID. */
        readonly since?: components["parameters"]["since-org"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {
          readonly Link?: string;
        };
        readonly content: {
          readonly "application/json": readonly components["schemas"]["organization-simple"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
    };
  };
  /**
   * To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
   *
   * GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub plan information' below."
   */
  readonly "orgs/get": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["organization-full"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
   *
   * Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.
   */
  readonly "orgs/update": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["organization-full"];
        };
      };
      readonly 409: components["responses"]["conflict"];
      readonly 415: components["responses"]["preview_header_missing"];
      /** Validation Failed */
      readonly 422: {
        readonly content: {
          readonly "application/json":
            | components["schemas"]["validation-error"]
            | components["schemas"]["validation-error-simple"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Billing email address. This address is not publicized. */
          readonly billing_email?: string;
          /** The company name. */
          readonly company?: string;
          /** The publicly visible email address. */
          readonly email?: string;
          /** The Twitter username of the company. */
          readonly twitter_username?: string;
          /** The location. */
          readonly location?: string;
          /** The shorthand name of the company. */
          readonly name?: string;
          /** The description of the company. */
          readonly description?: string;
          /** Toggles whether an organization can use organization projects. */
          readonly has_organization_projects?: boolean;
          /** Toggles whether repositories that belong to the organization can use repository projects. */
          readonly has_repository_projects?: boolean;
          /**
           * Default permission level members have for organization repositories:
           * \* `read` - can pull, but not push to or administer this repository.
           * \* `write` - can pull and push, but not administer this repository.
           * \* `admin` - can pull, push, and administer this repository.
           * \* `none` - no permissions granted by default.
           */
          readonly default_repository_permission?:
            | "read"
            | "write"
            | "admin"
            | "none";
          /**
           * Toggles the ability of non-admin organization members to create repositories. Can be one of:
           * \* `true` - all organization members can create repositories.
           * \* `false` - only organization owners can create repositories.
           * Default: `true`
           * **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
           */
          readonly members_can_create_repositories?: boolean;
          /**
           * Toggles whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of:
           * \* `true` - all organization members can create internal repositories.
           * \* `false` - only organization owners can create internal repositories.
           * Default: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
           */
          readonly members_can_create_internal_repositories?: boolean;
          /**
           * Toggles whether organization members can create private repositories, which are visible to organization members with permission. Can be one of:
           * \* `true` - all organization members can create private repositories.
           * \* `false` - only organization owners can create private repositories.
           * Default: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
           */
          readonly members_can_create_private_repositories?: boolean;
          /**
           * Toggles whether organization members can create public repositories, which are visible to anyone. Can be one of:
           * \* `true` - all organization members can create public repositories.
           * \* `false` - only organization owners can create public repositories.
           * Default: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
           */
          readonly members_can_create_public_repositories?: boolean;
          /**
           * Specifies which types of repositories non-admin organization members can create. Can be one of:
           * \* `all` - all organization members can create public and private repositories.
           * \* `private` - members can create private repositories. This option is only available to repositories that are part of an organization on GitHub Enterprise Cloud.
           * \* `none` - only admin members can create repositories.
           * **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
           */
          readonly members_allowed_repository_creation_type?:
            | "all"
            | "private"
            | "none";
          /**
           * Toggles whether organization members can create GitHub Pages sites. Can be one of:
           * \* `true` - all organization members can create GitHub Pages sites.
           * \* `false` - no organization members can create GitHub Pages sites. Existing published sites will not be impacted.
           */
          readonly members_can_create_pages?: boolean;
          /**
           * Toggles whether organization members can create public GitHub Pages sites. Can be one of:
           * \* `true` - all organization members can create public GitHub Pages sites.
           * \* `false` - no organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
           */
          readonly members_can_create_public_pages?: boolean;
          /**
           * Toggles whether organization members can create private GitHub Pages sites. Can be one of:
           * \* `true` - all organization members can create private GitHub Pages sites.
           * \* `false` - no organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
           */
          readonly members_can_create_private_pages?: boolean;
          readonly blog?: string;
        };
      };
    };
  };
  /**
   * Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   */
  readonly "actions/get-github-actions-permissions-organization": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["actions-organization-permissions"];
        };
      };
    };
  };
  /**
   * Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
   *
   * If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as `allowed_actions` to `selected` actions, then you cannot override them for the organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   */
  readonly "actions/set-github-actions-permissions-organization": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          readonly enabled_repositories: components["schemas"]["enabled-repositories"];
          readonly allowed_actions?: components["schemas"]["allowed-actions"];
        };
      };
    };
  };
  /**
   * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   */
  readonly "actions/list-selected-repositories-enabled-github-actions-organization": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly repositories: readonly components["schemas"]["repository"][];
          };
        };
      };
    };
  };
  /**
   * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   */
  readonly "actions/set-selected-repositories-enabled-github-actions-organization": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** List of repository IDs to enable for GitHub Actions. */
          readonly selected_repository_ids: readonly number[];
        };
      };
    };
  };
  /**
   * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   */
  readonly "actions/enable-selected-repository-github-actions-organization": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        readonly repository_id: components["parameters"]["repository_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   */
  readonly "actions/disable-selected-repository-github-actions-organization": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        readonly repository_id: components["parameters"]["repository_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).""
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   */
  readonly "actions/get-allowed-actions-organization": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["selected-actions"];
        };
      };
    };
  };
  /**
   * Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
   *
   * If the organization belongs to an enterprise that has `selected` actions set at the enterprise level, then you cannot override any of the enterprise's allowed actions settings.
   *
   * To use the `patterns_allowed` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories in the organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   */
  readonly "actions/set-allowed-actions-organization": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["selected-actions"];
      };
    };
  };
  /**
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   * Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly "actions/list-self-hosted-runner-groups-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly runner_groups: readonly components["schemas"]["runner-groups-org"][];
          };
        };
      };
    };
  };
  /**
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   * Creates a new self-hosted runner group for an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly "actions/create-self-hosted-runner-group-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["runner-groups-org"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Name of the runner group. */
          readonly name: string;
          /** Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories. Can be one of: `all`, `selected`, or `private`. */
          readonly visibility?: "selected" | "all" | "private";
          /** List of repository IDs that can access the runner group. */
          readonly selected_repository_ids?: readonly number[];
          /** List of runner IDs to add to the runner group. */
          readonly runners?: readonly number[];
        };
      };
    };
  };
  /**
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   * Gets a specific self-hosted runner group for an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly "actions/get-self-hosted-runner-group-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components["parameters"]["runner_group_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["runner-groups-org"];
        };
      };
    };
  };
  /**
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   * Deletes a self-hosted runner group for an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly "actions/delete-self-hosted-runner-group-from-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components["parameters"]["runner_group_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   * Updates the `name` and `visibility` of a self-hosted runner group in an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly "actions/update-self-hosted-runner-group-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components["parameters"]["runner_group_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["runner-groups-org"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Name of the runner group. */
          readonly name?: string;
          /** Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories. Can be one of: `all`, `selected`, or `private`. */
          readonly visibility?: "selected" | "all" | "private";
        };
      };
    };
  };
  /**
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   * Lists the repositories with access to a self-hosted runner group configured in an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly "actions/list-repo-access-to-self-hosted-runner-group-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components["parameters"]["runner_group_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly repositories: readonly components["schemas"]["repository"][];
          };
        };
      };
    };
  };
  /**
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   * Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly "actions/set-repo-access-to-self-hosted-runner-group-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components["parameters"]["runner_group_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** List of repository IDs that can access the runner group. */
          readonly selected_repository_ids: readonly number[];
        };
      };
    };
  };
  /**
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   *
   * Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
   *
   * You must authenticate using an access token with the `admin:org`
   * scope to use this endpoint.
   */
  readonly "actions/add-repo-access-to-self-hosted-runner-group-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components["parameters"]["runner_group_id"];
        readonly repository_id: components["parameters"]["repository_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   *
   * Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly "actions/remove-repo-access-to-self-hosted-runner-group-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components["parameters"]["runner_group_id"];
        readonly repository_id: components["parameters"]["repository_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   * Lists self-hosted runners that are in a specific organization group.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly "actions/list-self-hosted-runners-in-group-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components["parameters"]["runner_group_id"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly runners: readonly components["schemas"]["runner"][];
          };
        };
      };
    };
  };
  /**
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   * Replaces the list of self-hosted runners that are part of an organization runner group.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly "actions/set-self-hosted-runners-in-group-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components["parameters"]["runner_group_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** List of runner IDs to add to the runner group. */
          readonly runners: readonly number[];
        };
      };
    };
  };
  /**
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   *
   * Adds a self-hosted runner to a runner group configured in an organization.
   *
   * You must authenticate using an access token with the `admin:org`
   * scope to use this endpoint.
   */
  readonly "actions/add-self-hosted-runner-to-group-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components["parameters"]["runner_group_id"];
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components["parameters"]["runner_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   *
   * Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly "actions/remove-self-hosted-runner-from-group-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** Unique identifier of the self-hosted runner group. */
        readonly runner_group_id: components["parameters"]["runner_group_id"];
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components["parameters"]["runner_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * Lists all self-hosted runners configured in an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly "actions/list-self-hosted-runners-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly runners: readonly components["schemas"]["runner"][];
          };
        };
      };
    };
  };
  /**
   * Lists binaries for the runner application that you can download and run.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly "actions/list-runner-applications-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["runner-application"][];
        };
      };
    };
  };
  /**
   * Returns a token that you can pass to the `config` script. The token expires after one hour.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   *
   * #### Example using registration token
   *
   * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
   *
   * ```
   * ./config.sh --url https://github.com/octo-org --token TOKEN
   * ```
   */
  readonly "actions/create-registration-token-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["authentication-token"];
        };
      };
    };
  };
  /**
   * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   *
   * #### Example using remove token
   *
   * To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this
   * endpoint.
   *
   * ```
   * ./config.sh remove --token TOKEN
   * ```
   */
  readonly "actions/create-remove-token-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["authentication-token"];
        };
      };
    };
  };
  /**
   * Gets a specific self-hosted runner configured in an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly "actions/get-self-hosted-runner-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components["parameters"]["runner_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["runner"];
        };
      };
    };
  };
  /**
   * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   */
  readonly "actions/delete-self-hosted-runner-from-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components["parameters"]["runner_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /** Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
  readonly "actions/list-org-secrets": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly secrets: readonly components["schemas"]["organization-actions-secret"][];
          };
        };
      };
    };
  };
  /** Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
  readonly "actions/get-org-public-key": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["actions-public-key"];
        };
      };
    };
  };
  /** Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
  readonly "actions/get-org-secret": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** secret_name parameter */
        readonly secret_name: components["parameters"]["secret_name"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["organization-actions-secret"];
        };
      };
    };
  };
  /**
   * Creates or updates an organization secret with an encrypted value. Encrypt your secret using
   * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
   * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to
   * use this endpoint.
   *
   * #### Example encrypting a secret using Node.js
   *
   * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
   *
   * ```
   * const sodium = require('tweetsodium');
   *
   * const key = "base64-encoded-public-key";
   * const value = "plain-text-secret";
   *
   * // Convert the message and key to Uint8Array's (Buffer implements that interface)
   * const messageBytes = Buffer.from(value);
   * const keyBytes = Buffer.from(key, 'base64');
   *
   * // Encrypt using LibSodium.
   * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
   *
   * // Base64 the encrypted secret
   * const encrypted = Buffer.from(encryptedBytes).toString('base64');
   *
   * console.log(encrypted);
   * ```
   *
   *
   * #### Example encrypting a secret using Python
   *
   * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.
   *
   * ```
   * from base64 import b64encode
   * from nacl import encoding, public
   *
   * def encrypt(public_key: str, secret_value: str) -> str:
   *   """Encrypt a Unicode string using the public key."""
   *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
   *   sealed_box = public.SealedBox(public_key)
   *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
   *   return b64encode(encrypted).decode("utf-8")
   * ```
   *
   * #### Example encrypting a secret using C#
   *
   * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
   *
   * ```
   * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
   * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
   *
   * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
   *
   * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
   * ```
   *
   * #### Example encrypting a secret using Ruby
   *
   * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
   *
   * ```ruby
   * require "rbnacl"
   * require "base64"
   *
   * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
   * public_key = RbNaCl::PublicKey.new(key)
   *
   * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
   * encrypted_secret = box.encrypt("my_secret")
   *
   * # Print the base64 encoded secret
   * puts Base64.strict_encode64(encrypted_secret)
   * ```
   */
  readonly "actions/create-or-update-org-secret": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** secret_name parameter */
        readonly secret_name: components["parameters"]["secret_name"];
      };
    };
    readonly responses: {
      /** Response when creating a secret */
      readonly 201: unknown;
      /** Response when updating a secret */
      readonly 204: never;
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/actions#get-an-organization-public-key) endpoint. */
          readonly encrypted_value?: string;
          /** ID of the key you used to encrypt the secret. */
          readonly key_id?: string;
          /**
           * Configures the access that repositories have to the organization secret. Can be one of:
           * \- `all` - All repositories in an organization can access the secret.
           * \- `private` - Private repositories in an organization can access the secret.
           * \- `selected` - Only specific repositories can access the secret.
           */
          readonly visibility?: "all" | "private" | "selected";
          /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints. */
          readonly selected_repository_ids?: readonly string[];
        };
      };
    };
  };
  /** Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
  readonly "actions/delete-org-secret": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** secret_name parameter */
        readonly secret_name: components["parameters"]["secret_name"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /** Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
  readonly "actions/list-selected-repos-for-org-secret": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** secret_name parameter */
        readonly secret_name: components["parameters"]["secret_name"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly repositories: readonly components["schemas"]["minimal-repository"][];
          };
        };
      };
    };
  };
  /** Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
  readonly "actions/set-selected-repos-for-org-secret": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** secret_name parameter */
        readonly secret_name: components["parameters"]["secret_name"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints. */
          readonly selected_repository_ids?: readonly number[];
        };
      };
    };
  };
  /** Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
  readonly "actions/add-selected-repo-to-org-secret": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** secret_name parameter */
        readonly secret_name: components["parameters"]["secret_name"];
        readonly repository_id: number;
      };
    };
    readonly responses: {
      /** Response when repository was added to the selected list */
      readonly 204: never;
      /** Response when visibility type is not set to selected */
      readonly 409: unknown;
    };
  };
  /** Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint. */
  readonly "actions/remove-selected-repo-from-org-secret": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** secret_name parameter */
        readonly secret_name: components["parameters"]["secret_name"];
        readonly repository_id: number;
      };
    };
    readonly responses: {
      /** Response when repository was removed from the selected list */
      readonly 204: never;
      /** Response when visibility type not set to selected */
      readonly 409: unknown;
    };
  };
  /**
   * **Note:** The audit log REST API is currently in beta and is subject to change.
   *
   * Gets the audit log for an organization. For more information, see "[Reviewing the audit log for your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization)."
   *
   * To use this endpoint, you must be an organization owner, and you must use an access token with the `admin:org` scope. GitHub Apps must have the `organization_administration` read permission to use this endpoint.
   */
  readonly "orgs/get-audit-log": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
      readonly query: {
        /** A search phrase. For more information, see [Searching the audit log](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization#searching-the-audit-log). */
        readonly phrase?: components["parameters"]["audit-log-phrase"];
        /**
         * The event types to include:
         *
         * - `web` - returns web (non-Git) events
         * - `git` - returns Git events
         * - `all` - returns both web and Git events
         *
         * The default is `web`.
         */
        readonly include?: components["parameters"]["audit-log-include"];
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events after this cursor. */
        readonly after?: components["parameters"]["audit-log-after"];
        /** A cursor, as given in the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header). If specified, the query only searches for events before this cursor. */
        readonly before?: components["parameters"]["audit-log-before"];
        /**
         * The order of audit log events. To list newest events first, specify `desc`. To list oldest events first, specify `asc`.
         *
         * The default is `desc`.
         */
        readonly order?: components["parameters"]["audit-log-order"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
      };
    };
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["audit-log-event"][];
        };
      };
    };
  };
  /** List the users blocked by an organization. */
  readonly "orgs/list-blocked-users": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["simple-user"][];
        };
      };
      readonly 415: components["responses"]["preview_header_missing"];
    };
  };
  readonly "orgs/check-blocked-user": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** If the user is blocked: */
      readonly 204: never;
      /** If the user is not blocked: */
      readonly 404: {
        readonly content: {
          readonly "application/json": components["schemas"]["basic-error"];
        };
      };
    };
  };
  readonly "orgs/block-user": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  readonly "orgs/unblock-user": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).
   *
   * An authenticated organization owner with the `read:org` scope can list all credential authorizations for an organization that uses SAML single sign-on (SSO). The credentials are either personal access tokens or SSH keys that organization members have authorized for the organization. For more information, see [About authentication with SAML single sign-on](https://help.github.com/en/articles/about-authentication-with-saml-single-sign-on).
   */
  readonly "orgs/list-saml-sso-authorizations": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["credential-authorization"][];
        };
      };
    };
  };
  /**
   * Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).
   *
   * An authenticated organization owner with the `admin:org` scope can remove a credential authorization for an organization that uses SAML SSO. Once you remove someone's credential authorization, they will need to create a new personal access token or SSH key and authorize it for the organization they want to access.
   */
  readonly "orgs/remove-saml-sso-authorization": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        readonly credential_id: number;
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 404: components["responses"]["not_found"];
    };
  };
  readonly "activity/list-public-org-events": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["event"][];
        };
      };
    };
  };
  /** The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure. */
  readonly "orgs/list-failed-invitations": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["organization-invitation"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  readonly "orgs/list-webhooks": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["org-hook"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Here's how you can create a hook that posts payloads in JSON format: */
  readonly "orgs/create-webhook": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["org-hook"];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Must be passed as "web". */
          readonly name: string;
          /** Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#create-hook-config-params). */
          readonly config: {
            readonly url: components["schemas"]["webhook-config-url"];
            readonly content_type?: components["schemas"]["webhook-config-content-type"];
            readonly secret?: components["schemas"]["webhook-config-secret"];
            readonly insecure_ssl?: components["schemas"]["webhook-config-insecure-ssl"];
            readonly username?: string;
            readonly password?: string;
          };
          /** Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. */
          readonly events?: readonly string[];
          /** Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. */
          readonly active?: boolean;
        };
      };
    };
  };
  /** Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)." */
  readonly "orgs/get-webhook": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        readonly hook_id: components["parameters"]["hook-id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["org-hook"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  readonly "orgs/delete-webhook": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        readonly hook_id: components["parameters"]["hook-id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization)." */
  readonly "orgs/update-webhook": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        readonly hook_id: components["parameters"]["hook-id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["org-hook"];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#update-hook-config-params). */
          readonly config?: {
            readonly url: components["schemas"]["webhook-config-url"];
            readonly content_type?: components["schemas"]["webhook-config-content-type"];
            readonly secret?: components["schemas"]["webhook-config-secret"];
            readonly insecure_ssl?: components["schemas"]["webhook-config-insecure-ssl"];
          };
          /** Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. */
          readonly events?: readonly string[];
          /** Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. */
          readonly active?: boolean;
          readonly name?: string;
        };
      };
    };
  };
  /**
   * Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook)."
   *
   * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.
   */
  readonly "orgs/get-webhook-config-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        readonly hook_id: components["parameters"]["hook-id"];
      };
    };
    readonly responses: {
      /** Default response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["webhook-config"];
        };
      };
    };
  };
  /**
   * Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook)."
   *
   * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.
   */
  readonly "orgs/update-webhook-config-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        readonly hook_id: components["parameters"]["hook-id"];
      };
    };
    readonly responses: {
      /** Default response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["webhook-config"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          readonly url?: components["schemas"]["webhook-config-url"];
          readonly content_type?: components["schemas"]["webhook-config-content-type"];
          readonly secret?: components["schemas"]["webhook-config-secret"];
          readonly insecure_ssl?: components["schemas"]["webhook-config-insecure-ssl"];
        };
      };
    };
  };
  /** This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook. */
  readonly "orgs/ping-webhook": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        readonly hook_id: components["parameters"]["hook-id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Enables an authenticated GitHub App to find the organization's installation information.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   */
  readonly "apps/get-org-installation": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["installation"];
        };
      };
    };
  };
  /** Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint. */
  readonly "orgs/list-app-installations": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly installations: readonly components["schemas"]["installation"][];
          };
        };
      };
    };
  };
  /** Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response. */
  readonly "interactions/get-restrictions-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["interaction-limit-response"];
        };
      };
    };
  };
  /** Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization. */
  readonly "interactions/set-restrictions-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["interaction-limit-response"];
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["interaction-limit"];
      };
    };
  };
  /** Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions. */
  readonly "interactions/remove-restrictions-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /** The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`. */
  readonly "orgs/list-pending-invitations": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["organization-invitation"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
   */
  readonly "orgs/create-invitation": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["organization-invitation"];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** **Required unless you provide `email`**. GitHub user ID for the person you are inviting. */
          readonly invitee_id?: number;
          /** **Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user. */
          readonly email?: string;
          /**
           * Specify role for new member. Can be one of:
           * \* `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.
           * \* `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.
           * \* `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.
           */
          readonly role?: "admin" | "direct_member" | "billing_manager";
          /** Specify IDs for the teams you want to invite new members to. */
          readonly team_ids?: readonly number[];
        };
      };
    };
  };
  /**
   * Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications).
   */
  readonly "orgs/cancel-invitation": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** invitation_id parameter */
        readonly invitation_id: components["parameters"]["invitation_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  /** List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner. */
  readonly "orgs/list-invitation-teams": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** invitation_id parameter */
        readonly invitation_id: components["parameters"]["invitation_id"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["team"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * List issues in an organization assigned to the authenticated user.
   *
   * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
   * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
   * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
   * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
   */
  readonly "issues/list-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
      readonly query: {
        /**
         * Indicates which sorts of issues to return. Can be one of:
         * \* `assigned`: Issues assigned to you
         * \* `created`: Issues created by you
         * \* `mentioned`: Issues mentioning you
         * \* `subscribed`: Issues you're subscribed to updates for
         * \* `all`: All issues the authenticated user can see, regardless of participation or creation
         */
        readonly filter?:
          | "assigned"
          | "created"
          | "mentioned"
          | "subscribed"
          | "all";
        /** Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`. */
        readonly state?: "open" | "closed" | "all";
        /** A list of comma separated label names. Example: `bug,ui,@high` */
        readonly labels?: components["parameters"]["labels"];
        /** What to sort results by. Can be either `created`, `updated`, `comments`. */
        readonly sort?: "created" | "updated" | "comments";
        /** One of `asc` (ascending) or `desc` (descending). */
        readonly direction?: components["parameters"]["direction"];
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components["parameters"]["since"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["issue"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned. */
  readonly "orgs/list-members": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
      readonly query: {
        /**
         * Filter members returned in the list. Can be one of:
         * \* `2fa_disabled` - Members without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled. Available for organization owners.
         * \* `all` - All members the authenticated user can see.
         */
        readonly filter?: "2fa_disabled" | "all";
        /**
         * Filter members returned by their role. Can be one of:
         * \* `all` - All members of the organization, regardless of role.
         * \* `admin` - Organization owners.
         * \* `member` - Non-owner organization members.
         */
        readonly role?: "all" | "admin" | "member";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["simple-user"][];
        };
      };
      /** Response if requester is not an organization member */
      readonly 302: never;
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  /** Check if a user is, publicly or privately, a member of the organization. */
  readonly "orgs/check-membership-for-user": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** Response if requester is an organization member and user is a member */
      readonly 204: never;
      /** Response if requester is not an organization member */
      readonly 302: never;
      /** Response if requester is an organization member and user is not a member */
      readonly 404: unknown;
    };
  };
  /** Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories. */
  readonly "orgs/remove-member": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 403: components["responses"]["forbidden"];
    };
  };
  /** In order to get a user's membership with an organization, the authenticated user must be an organization member. */
  readonly "orgs/get-membership-for-user": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["org-membership"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Only authenticated organization owners can add a member to the organization or update the member's role.
   *
   * *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
   *
   * *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.
   *
   * **Rate limits**
   *
   * To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
   */
  readonly "orgs/set-membership-for-user": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["org-membership"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /**
           * The role to give the user in the organization. Can be one of:
           * \* `admin` - The user will become an owner of the organization.
           * \* `member` - The user will become a non-owner member of the organization.
           */
          readonly role?: "admin" | "member";
        };
      };
    };
  };
  /**
   * In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
   *
   * If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
   */
  readonly "orgs/remove-membership-for-user": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Lists the most recent migrations. */
  readonly "migrations/list-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["migration"][];
        };
      };
    };
  };
  /** Initiates the generation of a migration archive. */
  readonly "migrations/start-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["migration"];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** A list of arrays indicating which repositories should be migrated. */
          readonly repositories: readonly string[];
          /** Indicates whether repositories should be locked (to prevent manipulation) while migrating data. */
          readonly lock_repositories?: boolean;
          /** Indicates whether attachments should be excluded from the migration (to reduce migration archive file size). */
          readonly exclude_attachments?: boolean;
          readonly exclude?: readonly string[];
        };
      };
    };
  };
  /**
   * Fetches the status of a migration.
   *
   * The `state` of a migration can be one of the following values:
   *
   * *   `pending`, which means the migration hasn't started yet.
   * *   `exporting`, which means the migration is in progress.
   * *   `exported`, which means the migration finished successfully.
   * *   `failed`, which means the migration failed.
   */
  readonly "migrations/get-status-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** migration_id parameter */
        readonly migration_id: components["parameters"]["migration_id"];
      };
    };
    readonly responses: {
      /**
       * *   `pending`, which means the migration hasn't started yet.
       * *   `exporting`, which means the migration is in progress.
       * *   `exported`, which means the migration finished successfully.
       * *   `failed`, which means the migration failed.
       */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["migration"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Fetches the URL to a migration archive. */
  readonly "migrations/download-archive-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** migration_id parameter */
        readonly migration_id: components["parameters"]["migration_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 302: never;
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Deletes a previous migration archive. Migration archives are automatically deleted after seven days. */
  readonly "migrations/delete-archive-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** migration_id parameter */
        readonly migration_id: components["parameters"]["migration_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/reference/repos#delete-a-repository) when the migration is complete and you no longer need the source data. */
  readonly "migrations/unlock-repo-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** migration_id parameter */
        readonly migration_id: components["parameters"]["migration_id"];
        /** repo_name parameter */
        readonly repo_name: components["parameters"]["repo_name"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** List all the repositories for this organization migration. */
  readonly "migrations/list-repos-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** migration_id parameter */
        readonly migration_id: components["parameters"]["migration_id"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["minimal-repository"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** List all users who are outside collaborators of an organization. */
  readonly "orgs/list-outside-collaborators": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
      readonly query: {
        /**
         * Filter the list of outside collaborators. Can be one of:
         * \* `2fa_disabled`: Outside collaborators without [two-factor authentication](https://github.com/blog/1614-two-factor-authentication) enabled.
         * \* `all`: All outside collaborators.
         */
        readonly filter?: "2fa_disabled" | "all";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["simple-user"][];
        };
      };
    };
  };
  /** When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)". */
  readonly "orgs/convert-member-to-outside-collaborator": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** User is getting converted asynchronously */
      readonly 202: unknown;
      /** User was converted */
      readonly 204: never;
      /** response */
      readonly 403: {
        readonly content: {
          readonly "application/json": {
            readonly message?: string;
            readonly documentation_url?: string;
          };
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Removing a user from this list will remove them from all the organization's repositories. */
  readonly "orgs/remove-outside-collaborator": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      /** Response if user is a member of the organization */
      readonly 422: {
        readonly content: {
          readonly "application/json": {
            readonly message?: string;
            readonly documentation_url?: string;
          };
        };
      };
    };
  };
  /**
   * Gets a specific package in an organization.
   *
   * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
   * If `package_type` is not `container`, your token must also include the `repo` scope.
   */
  readonly "packages/get-package-for-organization": {
    readonly parameters: {
      readonly path: {
        /** The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`. */
        readonly package_type: components["parameters"]["package_type"];
        /** The name of the package. */
        readonly package_name: components["parameters"]["package_name"];
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["package"];
        };
      };
    };
  };
  /**
   * Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 25 downloads. In this scenario, contact GitHub support for further assistance.
   *
   * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` scope. In addition:
   * - If `package_type` is not `container`, your token must also include the `repo` scope.
   * - If `package_type` is `container`, you must also have admin permissions to the container you want to delete.
   */
  readonly "packages/delete-package-for-org": {
    readonly parameters: {
      readonly path: {
        /** The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`. */
        readonly package_type: components["parameters"]["package_type"];
        /** The name of the package. */
        readonly package_name: components["parameters"]["package_name"];
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Restores an entire package in an organization.
   *
   * You can restore a deleted package under the following conditions:
   *   - The package was deleted within the last 30 days.
   *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
   *
   * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:write` scope. In addition:
   * - If `package_type` is not `container`, your token must also include the `repo` scope.
   * - If `package_type` is `container`, you must also have admin permissions to the container that you want to restore.
   */
  readonly "packages/restore-package-for-org": {
    readonly parameters: {
      readonly path: {
        /** The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`. */
        readonly package_type: components["parameters"]["package_type"];
        /** The name of the package. */
        readonly package_name: components["parameters"]["package_name"];
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Returns all package versions for a package owned by an organization.
   *
   * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
   * If `package_type` is not `container`, your token must also include the `repo` scope.
   */
  readonly "packages/get-all-package-versions-for-a-package-owned-by-an-org": {
    readonly parameters: {
      readonly path: {
        /** The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`. */
        readonly package_type: components["parameters"]["package_type"];
        /** The name of the package. */
        readonly package_name: components["parameters"]["package_name"];
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["package-version"][];
        };
      };
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Gets a specific package version in an organization.
   *
   * You must authenticate using an access token with the `packages:read` scope.
   * If `package_type` is not `container`, your token must also include the `repo` scope.
   */
  readonly "packages/get-package-version-for-organization": {
    readonly parameters: {
      readonly path: {
        /** The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`. */
        readonly package_type: components["parameters"]["package_type"];
        /** The name of the package. */
        readonly package_name: components["parameters"]["package_name"];
        readonly org: components["parameters"]["org"];
        /** Unique identifier of the package version. */
        readonly package_version_id: components["parameters"]["package_version_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["package-version"];
        };
      };
    };
  };
  /**
   * Deletes a specific package version in an organization. If the package is public and the package version has more than 25 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
   *
   * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` scope. In addition:
   * - If `package_type` is not `container`, your token must also include the `repo` scope.
   * - If `package_type` is `container`, you must also have admin permissions to the container you want to delete.
   */
  readonly "packages/delete-package-version-for-org": {
    readonly parameters: {
      readonly path: {
        /** The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`. */
        readonly package_type: components["parameters"]["package_type"];
        /** The name of the package. */
        readonly package_name: components["parameters"]["package_name"];
        readonly org: components["parameters"]["org"];
        /** Unique identifier of the package version. */
        readonly package_version_id: components["parameters"]["package_version_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Restores a specific package version in an organization.
   *
   * You can restore a deleted package under the following conditions:
   *   - The package was deleted within the last 30 days.
   *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
   *
   * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:write` scope. In addition:
   * - If `package_type` is not `container`, your token must also include the `repo` scope.
   * - If `package_type` is `container`, you must also have admin permissions to the container that you want to restore.
   */
  readonly "packages/restore-package-version-for-org": {
    readonly parameters: {
      readonly path: {
        /** The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`. */
        readonly package_type: components["parameters"]["package_type"];
        /** The name of the package. */
        readonly package_name: components["parameters"]["package_name"];
        readonly org: components["parameters"]["org"];
        /** Unique identifier of the package version. */
        readonly package_version_id: components["parameters"]["package_version_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
  readonly "projects/list-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
      readonly query: {
        /** Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`. */
        readonly state?: "open" | "closed" | "all";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["project"][];
        };
      };
      readonly 422: components["responses"]["validation_failed_simple"];
    };
  };
  /** Creates an organization project board. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
  readonly "projects/create-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["project"];
        };
      };
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 410: components["responses"]["gone"];
      readonly 422: components["responses"]["validation_failed_simple"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The name of the project. */
          readonly name: string;
          /** The description of the project. */
          readonly body?: string;
        };
      };
    };
  };
  /** Members of an organization can choose to have their membership publicized or not. */
  readonly "orgs/list-public-members": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["simple-user"][];
        };
      };
    };
  };
  readonly "orgs/check-public-membership-for-user": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** Response if user is a public member */
      readonly 204: never;
      /** Response if user is not a public member */
      readonly 404: unknown;
    };
  };
  /**
   * The user can publicize their own membership. (A user cannot publicize the membership for another user.)
   *
   * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
   */
  readonly "orgs/set-public-membership-for-authenticated-user": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 403: components["responses"]["forbidden"];
    };
  };
  readonly "orgs/remove-public-membership-for-authenticated-user": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /** Lists repositories for the specified organization. */
  readonly "repos/list-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
      readonly query: {
        /** Specifies the types of repositories you want returned. Can be one of `all`, `public`, `private`, `forks`, `sources`, `member`, `internal`. Default: `all`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `type` can also be `internal`. */
        readonly type?:
          | "all"
          | "public"
          | "private"
          | "forks"
          | "sources"
          | "member"
          | "internal";
        /** Can be one of `created`, `updated`, `pushed`, `full_name`. */
        readonly sort?: "created" | "updated" | "pushed" | "full_name";
        /** Can be one of `asc` or `desc`. Default: when using `full_name`: `asc`, otherwise `desc` */
        readonly direction?: "asc" | "desc";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["minimal-repository"][];
        };
      };
    };
  };
  /**
   * Creates a new repository in the specified organization. The authenticated user must be a member of the organization.
   *
   * **OAuth scope requirements**
   *
   * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
   *
   * *   `public_repo` scope or `repo` scope to create a public repository
   * *   `repo` scope to create a private repository
   */
  readonly "repos/create-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["repository"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The name of the repository. */
          readonly name: string;
          /** A short description of the repository. */
          readonly description?: string;
          /** A URL with more information about the repository. */
          readonly homepage?: string;
          /** Either `true` to create a private repository or `false` to create a public one. */
          readonly private?: boolean;
          /**
           * Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. For more information, see "[Creating an internal repository](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)" in the GitHub Help documentation.
           * The `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.
           */
          readonly visibility?:
            | "public"
            | "private"
            | "visibility"
            | "internal";
          /** Either `true` to enable issues for this repository or `false` to disable them. */
          readonly has_issues?: boolean;
          /** Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error. */
          readonly has_projects?: boolean;
          /** Either `true` to enable the wiki for this repository or `false` to disable it. */
          readonly has_wiki?: boolean;
          /** Either `true` to make this repo available as a template repository or `false` to prevent it. */
          readonly is_template?: boolean;
          /** The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */
          readonly team_id?: number;
          /** Pass `true` to create an initial commit with empty README. */
          readonly auto_init?: boolean;
          /** Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell". */
          readonly gitignore_template?: string;
          /** Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0". */
          readonly license_template?: string;
          /** Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging. */
          readonly allow_squash_merge?: boolean;
          /** Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits. */
          readonly allow_merge_commit?: boolean;
          /** Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging. */
          readonly allow_rebase_merge?: boolean;
          /** Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. */
          readonly delete_branch_on_merge?: boolean;
        };
      };
    };
  };
  /**
   * Gets the summary of the free and paid GitHub Actions minutes used.
   *
   * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
   *
   * Access tokens must have the `repo` or `admin:org` scope.
   */
  readonly "billing/get-github-actions-billing-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["actions-billing-usage"];
        };
      };
    };
  };
  /**
   * Gets the free and paid storage usued for GitHub Packages in gigabytes.
   *
   * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
   *
   * Access tokens must have the `repo` or `admin:org` scope.
   */
  readonly "billing/get-github-packages-billing-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["packages-billing-usage"];
        };
      };
    };
  };
  /**
   * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
   *
   * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
   *
   * Access tokens must have the `repo` or `admin:org` scope.
   */
  readonly "billing/get-shared-storage-billing-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["combined-billing-usage"];
        };
      };
    };
  };
  /**
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * List IdP groups available in an organization. You can limit your page results using the `per_page` parameter. GitHub generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see "[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89)."
   *
   * The `per_page` parameter provides pagination for a list of IdP groups the authenticated user can access in an organization. For example, if the user `octocat` wants to see two groups per page in `octo-org` via cURL, it would look like this:
   */
  readonly "teams/list-idp-groups-for-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {
          readonly Link?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["group-mapping"];
        };
      };
    };
  };
  /** Lists all teams in an organization that are visible to the authenticated user. */
  readonly "teams/list": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["team"][];
        };
      };
      readonly 403: components["responses"]["forbidden"];
    };
  };
  /**
   * To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://help.github.com/en/articles/setting-team-creation-permissions-in-your-organization)."
   *
   * When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)".
   */
  readonly "teams/create": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["team-full"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The name of the team. */
          readonly name: string;
          /** The description of the team. */
          readonly description?: string;
          /** List GitHub IDs for organization members who will become team maintainers. */
          readonly maintainers?: readonly string[];
          /** The full name (e.g., "organization-name/repository-name") of repositories to add the team to. */
          readonly repo_names?: readonly string[];
          /**
           * The level of privacy this team should have. The options are:
           * **For a non-nested team:**
           * \* `secret` - only visible to organization owners and members of this team.
           * \* `closed` - visible to all members of this organization.
           * Default: `secret`
           * **For a parent or child team:**
           * \* `closed` - visible to all members of this organization.
           * Default for child team: `closed`
           */
          readonly privacy?: "secret" | "closed";
          /**
           * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
           * \* `pull` - team members can pull, but not push to or administer newly-added repositories.
           * \* `push` - team members can pull and push, but not administer newly-added repositories.
           * \* `admin` - team members can pull, push and administer newly-added repositories.
           */
          readonly permission?: "pull" | "push" | "admin";
          /** The ID of a team to set as the parent team. */
          readonly parent_team_id?: number;
        };
      };
    };
  };
  /**
   * Gets a team using the team's `slug`. GitHub generates the `slug` from the team `name`.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
   */
  readonly "teams/get-by-name": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["team-full"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * To delete a team, the authenticated user must be an organization owner or team maintainer.
   *
   * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
   */
  readonly "teams/delete-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
   */
  readonly "teams/update-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["team-full"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The name of the team. */
          readonly name?: string;
          /** The description of the team. */
          readonly description?: string;
          /**
           * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:
           * **For a non-nested team:**
           * \* `secret` - only visible to organization owners and members of this team.
           * \* `closed` - visible to all members of this organization.
           * **For a parent or child team:**
           * \* `closed` - visible to all members of this organization.
           */
          readonly privacy?: "secret" | "closed";
          /**
           * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
           * \* `pull` - team members can pull, but not push to or administer newly-added repositories.
           * \* `push` - team members can pull and push, but not administer newly-added repositories.
           * \* `admin` - team members can pull, push and administer newly-added repositories.
           */
          readonly permission?: "pull" | "push" | "admin";
          /** The ID of a team to set as the parent team. */
          readonly parent_team_id?: number | null;
        };
      };
    };
  };
  /**
   * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
   */
  readonly "teams/list-discussions-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
      };
      readonly query: {
        /** One of `asc` (ascending) or `desc` (descending). */
        readonly direction?: components["parameters"]["direction"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["team-discussion"][];
        };
      };
    };
  };
  /**
   * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
   */
  readonly "teams/create-discussion-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["team-discussion"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The discussion post's title. */
          readonly title: string;
          /** The discussion post's body text. */
          readonly body: string;
          /** Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post. */
          readonly private?: boolean;
        };
      };
    };
  };
  /**
   * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
   */
  readonly "teams/get-discussion-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
        readonly discussion_number: components["parameters"]["discussion-number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["team-discussion"];
        };
      };
    };
  };
  /**
   * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
   */
  readonly "teams/delete-discussion-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
        readonly discussion_number: components["parameters"]["discussion-number"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
   */
  readonly "teams/update-discussion-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
        readonly discussion_number: components["parameters"]["discussion-number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["team-discussion"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The discussion post's title. */
          readonly title?: string;
          /** The discussion post's body text. */
          readonly body?: string;
        };
      };
    };
  };
  /**
   * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
   */
  readonly "teams/list-discussion-comments-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
        readonly discussion_number: components["parameters"]["discussion-number"];
      };
      readonly query: {
        /** One of `asc` (ascending) or `desc` (descending). */
        readonly direction?: components["parameters"]["direction"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["team-discussion-comment"][];
        };
      };
    };
  };
  /**
   * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
   */
  readonly "teams/create-discussion-comment-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
        readonly discussion_number: components["parameters"]["discussion-number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["team-discussion-comment"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The discussion comment's body text. */
          readonly body: string;
        };
      };
    };
  };
  /**
   * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
   */
  readonly "teams/get-discussion-comment-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
        readonly discussion_number: components["parameters"]["discussion-number"];
        readonly comment_number: components["parameters"]["comment-number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["team-discussion-comment"];
        };
      };
    };
  };
  /**
   * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
   */
  readonly "teams/delete-discussion-comment-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
        readonly discussion_number: components["parameters"]["discussion-number"];
        readonly comment_number: components["parameters"]["comment-number"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
   */
  readonly "teams/update-discussion-comment-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
        readonly discussion_number: components["parameters"]["discussion-number"];
        readonly comment_number: components["parameters"]["comment-number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["team-discussion-comment"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The discussion comment's body text. */
          readonly body: string;
        };
      };
    };
  };
  /**
   * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
   */
  readonly "reactions/list-for-team-discussion-comment-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
        readonly discussion_number: components["parameters"]["discussion-number"];
        readonly comment_number: components["parameters"]["comment-number"];
      };
      readonly query: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. */
        readonly content?:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["reaction"][];
        };
      };
    };
  };
  /**
   * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
   */
  readonly "reactions/create-for-team-discussion-comment-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
        readonly discussion_number: components["parameters"]["discussion-number"];
        readonly comment_number: components["parameters"]["comment-number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["reaction"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment. */
          readonly content:
            | "+1"
            | "-1"
            | "laugh"
            | "confused"
            | "heart"
            | "hooray"
            | "rocket"
            | "eyes";
        };
      };
    };
  };
  /**
   * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
   *
   * Delete a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   */
  readonly "reactions/delete-for-team-discussion-comment": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
        readonly discussion_number: components["parameters"]["discussion-number"];
        readonly comment_number: components["parameters"]["comment-number"];
        readonly reaction_id: components["parameters"]["reaction-id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
   */
  readonly "reactions/list-for-team-discussion-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
        readonly discussion_number: components["parameters"]["discussion-number"];
      };
      readonly query: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. */
        readonly content?:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["reaction"][];
        };
      };
    };
  };
  /**
   * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
   */
  readonly "reactions/create-for-team-discussion-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
        readonly discussion_number: components["parameters"]["discussion-number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["reaction"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion. */
          readonly content:
            | "+1"
            | "-1"
            | "laugh"
            | "confused"
            | "heart"
            | "hooray"
            | "rocket"
            | "eyes";
        };
      };
    };
  };
  /**
   * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
   *
   * Delete a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   */
  readonly "reactions/delete-for-team-discussion": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
        readonly discussion_number: components["parameters"]["discussion-number"];
        readonly reaction_id: components["parameters"]["reaction-id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
   */
  readonly "teams/list-pending-invitations-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["organization-invitation"][];
        };
      };
    };
  };
  /**
   * Team members will include the members of child teams.
   *
   * To list members in a team, the team must be visible to the authenticated user.
   */
  readonly "teams/list-members-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
      };
      readonly query: {
        /**
         * Filters members returned by their role in the team. Can be one of:
         * \* `member` - normal members of the team.
         * \* `maintainer` - team maintainers.
         * \* `all` - all members of the team.
         */
        readonly role?: "member" | "maintainer" | "all";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["simple-user"][];
        };
      };
    };
  };
  /**
   * Team members will include the members of child teams.
   *
   * To get a user's membership with a team, the team must be visible to the authenticated user.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.
   *
   * **Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
   */
  readonly "teams/get-membership-for-user-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["team-membership"];
        };
      };
      /** Response if user has no team membership */
      readonly 404: unknown;
    };
  };
  /**
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.
   *
   * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   *
   * An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.
   *
   * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
   */
  readonly "teams/add-or-update-membership-for-user-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["team-membership"];
        };
      };
      /** Response if team synchronization is set up */
      readonly 403: unknown;
      /** Response if you attempt to add an organization to a team */
      readonly 422: {
        readonly content: {
          readonly "application/json": {
            readonly message?: string;
            readonly errors?: readonly {
              readonly code?: string;
              readonly field?: string;
              readonly resource?: string;
            }[];
          };
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /**
           * The role that this user should have in the team. Can be one of:
           * \* `member` - a normal member of the team.
           * \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.
           */
          readonly role?: "member" | "maintainer";
        };
      };
    };
  };
  /**
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
   *
   * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
   */
  readonly "teams/remove-membership-for-user-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      /** Response if team synchronization is set up */
      readonly 403: unknown;
    };
  };
  /**
   * Lists the organization projects for a team.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
   */
  readonly "teams/list-projects-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["team-project"][];
        };
      };
    };
  };
  /**
   * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
   */
  readonly "teams/check-permissions-for-project-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
        readonly project_id: components["parameters"]["project-id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["team-project"];
        };
      };
      /** Response if project is not managed by this team */
      readonly 404: unknown;
    };
  };
  /**
   * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
   */
  readonly "teams/add-or-update-project-permissions-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
        readonly project_id: components["parameters"]["project-id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      /** Response if the project is not owned by the organization */
      readonly 403: {
        readonly content: {
          readonly "application/json": {
            readonly message?: string;
            readonly documentation_url?: string;
          };
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /**
           * The permission to grant to the team for this project. Can be one of:
           * \* `read` - team members can read, but not write to or administer this project.
           * \* `write` - team members can read and write, but not administer this project.
           * \* `admin` - team members can read, write and administer this project.
           * Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
           */
          readonly permission?: "read" | "write" | "admin";
        } | null;
      };
    };
  };
  /**
   * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
   */
  readonly "teams/remove-project-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
        readonly project_id: components["parameters"]["project-id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * Lists a team's repositories visible to the authenticated user.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
   */
  readonly "teams/list-repos-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["minimal-repository"][];
        };
      };
    };
  };
  /**
   * Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
   *
   * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.
   *
   * If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
   */
  readonly "teams/check-permissions-for-repo-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** Alternative response with repository permissions */
      readonly 200: {
        readonly content: {
          readonly "application/vnd.github.v3.repository+json": components["schemas"]["team-repository"];
        };
      };
      /** Response if team has permission for the repository */
      readonly 204: never;
      /** Response if team does not have permission for the repository */
      readonly 404: unknown;
    };
  };
  /**
   * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
   *
   * For more information about the permission levels, see "[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
   */
  readonly "teams/add-or-update-repo-permissions-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /**
           * The permission to grant the team on this repository. Can be one of:
           * \* `pull` - team members can pull, but not push to or administer this repository.
           * \* `push` - team members can pull and push, but not administer this repository.
           * \* `admin` - team members can pull, push and administer this repository.
           * \* `maintain` - team members can manage the repository without access to sensitive or destructive actions. Recommended for project managers. Only applies to repositories owned by organizations.
           * \* `triage` - team members can proactively manage issues and pull requests without write access. Recommended for contributors who triage a repository. Only applies to repositories owned by organizations.
           *
           * If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
           */
          readonly permission?:
            | "pull"
            | "push"
            | "admin"
            | "maintain"
            | "triage";
        };
      };
    };
  };
  /**
   * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
   */
  readonly "teams/remove-repo-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * List IdP groups connected to a team on GitHub.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
   */
  readonly "teams/list-idp-groups-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["group-mapping"];
        };
      };
    };
  };
  /**
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
   */
  readonly "teams/create-or-update-idp-group-connections-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["group-mapping"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove. */
          readonly groups: readonly {
            /** ID of the IdP group. */
            readonly group_id: string;
            /** Name of the IdP group. */
            readonly group_name: string;
            /** Description of the IdP group. */
            readonly group_description: string;
          }[];
        };
      };
    };
  };
  /**
   * Lists the child teams of the team specified by `{team_slug}`.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
   */
  readonly "teams/list-child-in-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** team_slug parameter */
        readonly team_slug: components["parameters"]["team_slug"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** Response if child teams exist */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["team"][];
        };
      };
    };
  };
  readonly "projects/get-card": {
    readonly parameters: {
      readonly path: {
        /** card_id parameter */
        readonly card_id: components["parameters"]["card_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["project-card"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  readonly "projects/delete-card": {
    readonly parameters: {
      readonly path: {
        /** card_id parameter */
        readonly card_id: components["parameters"]["card_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      /** Forbidden */
      readonly 403: {
        readonly content: {
          readonly "application/json": {
            readonly message?: string;
            readonly documentation_url?: string;
            readonly errors?: readonly string[];
          };
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  readonly "projects/update-card": {
    readonly parameters: {
      readonly path: {
        /** card_id parameter */
        readonly card_id: components["parameters"]["card_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["project-card"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed_simple"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The project card's note */
          readonly note?: string | null;
          /** Whether or not the card is archived */
          readonly archived?: boolean;
        };
      };
    };
  };
  readonly "projects/move-card": {
    readonly parameters: {
      readonly path: {
        /** card_id parameter */
        readonly card_id: components["parameters"]["card_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": { readonly [key: string]: any };
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      /** Forbidden */
      readonly 403: {
        readonly content: {
          readonly "application/json": {
            readonly message?: string;
            readonly documentation_url?: string;
            readonly errors?: readonly {
              readonly code?: string;
              readonly message?: string;
              readonly resource?: string;
              readonly field?: string;
            }[];
          };
        };
      };
      readonly 422: components["responses"]["validation_failed"];
      /** Service Unavailable */
      readonly 503: {
        readonly content: {
          readonly "application/json": {
            readonly code?: string;
            readonly message?: string;
            readonly documentation_url?: string;
            readonly errors?: readonly {
              readonly code?: string;
              readonly message?: string;
            }[];
          };
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The position of the card in a column */
          readonly position: string;
          /** The unique identifier of the column the card should be moved to */
          readonly column_id?: number;
        };
      };
    };
  };
  readonly "projects/get-column": {
    readonly parameters: {
      readonly path: {
        /** column_id parameter */
        readonly column_id: components["parameters"]["column_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["project-column"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  readonly "projects/delete-column": {
    readonly parameters: {
      readonly path: {
        /** column_id parameter */
        readonly column_id: components["parameters"]["column_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
    };
  };
  readonly "projects/update-column": {
    readonly parameters: {
      readonly path: {
        /** column_id parameter */
        readonly column_id: components["parameters"]["column_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["project-column"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Name of the project column */
          readonly name: string;
        };
      };
    };
  };
  readonly "projects/list-cards": {
    readonly parameters: {
      readonly path: {
        /** column_id parameter */
        readonly column_id: components["parameters"]["column_id"];
      };
      readonly query: {
        /** Filters the project cards that are returned by the card's state. Can be one of `all`,`archived`, or `not_archived`. */
        readonly archived_state?: "all" | "archived" | "not_archived";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["project-card"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
    };
  };
  /**
   * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by the `pull_request` key.
   *
   * Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
   */
  readonly "projects/create-card": {
    readonly parameters: {
      readonly path: {
        /** column_id parameter */
        readonly column_id: components["parameters"]["column_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["project-card"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      /** Validation Failed */
      readonly 422: {
        readonly content: {
          readonly "application/json":
            | components["schemas"]["validation-error"]
            | components["schemas"]["validation-error-simple"];
        };
      };
      /** Service Unavailable */
      readonly 503: {
        readonly content: {
          readonly "application/json": {
            readonly code?: string;
            readonly message?: string;
            readonly documentation_url?: string;
            readonly errors?: readonly {
              readonly code?: string;
              readonly message?: string;
            }[];
          };
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json":
          | {
              /** The project card's note */
              readonly note: string | null;
            }
          | {
              /** The unique identifier of the content associated with the card */
              readonly content_id: number;
              /** The piece of content associated with the card */
              readonly content_type: string;
            };
      };
    };
  };
  readonly "projects/move-column": {
    readonly parameters: {
      readonly path: {
        /** column_id parameter */
        readonly column_id: components["parameters"]["column_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": { readonly [key: string]: any };
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 422: components["responses"]["validation_failed_simple"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The position of the column in a project */
          readonly position: string;
        };
      };
    };
  };
  /** Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
  readonly "projects/get": {
    readonly parameters: {
      readonly path: {
        readonly project_id: components["parameters"]["project-id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["project"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
    };
  };
  /** Deletes a project board. Returns a `404 Not Found` status if projects are disabled. */
  readonly "projects/delete": {
    readonly parameters: {
      readonly path: {
        readonly project_id: components["parameters"]["project-id"];
      };
    };
    readonly responses: {
      /** Delete Success */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      /** Forbidden */
      readonly 403: {
        readonly content: {
          readonly "application/json": {
            readonly message?: string;
            readonly documentation_url?: string;
            readonly errors?: readonly string[];
          };
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 410: components["responses"]["gone"];
    };
  };
  /** Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
  readonly "projects/update": {
    readonly parameters: {
      readonly path: {
        readonly project_id: components["parameters"]["project-id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["project"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      /** Forbidden */
      readonly 403: {
        readonly content: {
          readonly "application/json": {
            readonly message?: string;
            readonly documentation_url?: string;
            readonly errors?: readonly string[];
          };
        };
      };
      /** Response if the authenticated user does not have access to the project */
      readonly 404: unknown;
      readonly 410: components["responses"]["gone"];
      readonly 422: components["responses"]["validation_failed_simple"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Name of the project */
          readonly name?: string;
          /** Body of the project */
          readonly body?: string | null;
          /** State of the project; either 'open' or 'closed' */
          readonly state?: string;
          /** The baseline permission that all organization members have on this project */
          readonly organization_permission?:
            | "read"
            | "write"
            | "admin"
            | "none";
          /** Whether or not this project can be seen by everyone. */
          readonly private?: boolean;
        };
      };
    };
  };
  /** Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators. */
  readonly "projects/list-collaborators": {
    readonly parameters: {
      readonly path: {
        readonly project_id: components["parameters"]["project-id"];
      };
      readonly query: {
        /**
         * Filters the collaborators by their affiliation. Can be one of:
         * \* `outside`: Outside collaborators of a project that are not a member of the project's organization.
         * \* `direct`: Collaborators with permissions to a project, regardless of organization membership status.
         * \* `all`: All collaborators the authenticated user can see.
         */
        readonly affiliation?: "outside" | "direct" | "all";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["simple-user"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 415: components["responses"]["preview_header_missing"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  /** Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator. */
  readonly "projects/add-collaborator": {
    readonly parameters: {
      readonly path: {
        readonly project_id: components["parameters"]["project-id"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 415: components["responses"]["preview_header_missing"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The permission to grant the collaborator. */
          readonly permission?: "read" | "write" | "admin";
        };
      };
    };
  };
  /** Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator. */
  readonly "projects/remove-collaborator": {
    readonly parameters: {
      readonly path: {
        readonly project_id: components["parameters"]["project-id"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 415: components["responses"]["preview_header_missing"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  /** Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level. */
  readonly "projects/get-permission-for-user": {
    readonly parameters: {
      readonly path: {
        readonly project_id: components["parameters"]["project-id"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["repository-collaborator-permission"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 415: components["responses"]["preview_header_missing"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  readonly "projects/list-columns": {
    readonly parameters: {
      readonly path: {
        readonly project_id: components["parameters"]["project-id"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["project-column"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
    };
  };
  readonly "projects/create-column": {
    readonly parameters: {
      readonly path: {
        readonly project_id: components["parameters"]["project-id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["project-column"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 422: components["responses"]["validation_failed_simple"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Name of the project column */
          readonly name: string;
        };
      };
    };
  };
  /**
   * **Note:** Accessing this endpoint does not count against your REST API rate limit.
   *
   * **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
   */
  readonly "rate-limit/get": {
    readonly parameters: {};
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": components["schemas"]["rate-limit-overview"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/).
   *
   * OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments).
   */
  readonly "reactions/delete-legacy": {
    readonly parameters: {
      readonly path: {
        readonly reaction_id: components["parameters"]["reaction-id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 410: components["responses"]["gone"];
      readonly 415: components["responses"]["preview_header_missing"];
    };
  };
  /**
   * When you pass the `scarlet-witch-preview` media type, requests to get a repository will also return the repository's code of conduct if it can be detected from the repository's code of conduct file.
   *
   * The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
   */
  readonly "repos/get": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["full-repository"];
        };
      };
      readonly 301: components["responses"]["moved_permanently"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.
   *
   * If an organization owner has configured the organization to prevent members from deleting organization-owned
   * repositories, you will get a `403 Forbidden` response.
   */
  readonly "repos/delete": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      /** If an organization owner has configured the organization to prevent members from deleting organization-owned repositories, a member will get this response: */
      readonly 403: {
        readonly content: {
          readonly "application/json": {
            readonly message?: string;
            readonly documentation_url?: string;
          };
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/reference/repos#replace-all-repository-topics) endpoint. */
  readonly "repos/update": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["full-repository"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The name of the repository. */
          readonly name?: string;
          /** A short description of the repository. */
          readonly description?: string;
          /** A URL with more information about the repository. */
          readonly homepage?: string;
          /**
           * Either `true` to make the repository private or `false` to make it public. Default: `false`.
           * **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
           */
          readonly private?: boolean;
          /** Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. The `visibility` parameter overrides the `private` parameter when you use both along with the `nebula-preview` preview header. */
          readonly visibility?:
            | "public"
            | "private"
            | "visibility"
            | "internal";
          /** Either `true` to enable issues for this repository or `false` to disable them. */
          readonly has_issues?: boolean;
          /** Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error. */
          readonly has_projects?: boolean;
          /** Either `true` to enable the wiki for this repository or `false` to disable it. */
          readonly has_wiki?: boolean;
          /** Either `true` to make this repo available as a template repository or `false` to prevent it. */
          readonly is_template?: boolean;
          /** Updates the default branch for this repository. */
          readonly default_branch?: string;
          /** Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging. */
          readonly allow_squash_merge?: boolean;
          /** Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits. */
          readonly allow_merge_commit?: boolean;
          /** Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging. */
          readonly allow_rebase_merge?: boolean;
          /** Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. */
          readonly delete_branch_on_merge?: boolean;
          /** `true` to archive this repository. **Note**: You cannot unarchive repositories through the API. */
          readonly archived?: boolean;
        };
      };
    };
  };
  /** Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
  readonly "actions/list-artifacts-for-repo": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly artifacts: readonly components["schemas"]["artifact"][];
          };
        };
      };
    };
  };
  /** Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
  readonly "actions/get-artifact": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** artifact_id parameter */
        readonly artifact_id: components["parameters"]["artifact_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["artifact"];
        };
      };
    };
  };
  /** Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */
  readonly "actions/delete-artifact": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** artifact_id parameter */
        readonly artifact_id: components["parameters"]["artifact_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
   * the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to
   * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
   * GitHub Apps must have the `actions:read` permission to use this endpoint.
   */
  readonly "actions/download-artifact": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** artifact_id parameter */
        readonly artifact_id: components["parameters"]["artifact_id"];
        readonly archive_format: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 302: never;
    };
  };
  /** Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
  readonly "actions/get-job-for-workflow-run": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** job_id parameter */
        readonly job_id: components["parameters"]["job_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 202: {
        readonly content: {
          readonly "application/json": components["schemas"]["job"];
        };
      };
    };
  };
  /**
   * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
   * for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can
   * use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must
   * have the `actions:read` permission to use this endpoint.
   */
  readonly "actions/download-job-logs-for-workflow-run": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** job_id parameter */
        readonly job_id: components["parameters"]["job_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 302: never;
    };
  };
  /**
   * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.
   *
   * You must authenticate using an access token with the `repo` scope to use this
   * endpoint. GitHub Apps must have the `administration` repository permission to use this API.
   */
  readonly "actions/get-github-actions-permissions-repository": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["actions-repository-permissions"];
        };
      };
    };
  };
  /**
   * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository.
   *
   * If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as `allowed_actions` to `selected` actions, then you cannot override them for the repository.
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
   */
  readonly "actions/set-github-actions-permissions-repository": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          readonly enabled: components["schemas"]["actions-enabled"];
          readonly allowed_actions?: components["schemas"]["allowed-actions"];
        };
      };
    };
  };
  /**
   * Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
   */
  readonly "actions/get-allowed-actions-repository": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["selected-actions"];
        };
      };
    };
  };
  /**
   * Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
   *
   * If the repository belongs to an organization or enterprise that has `selected` actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.
   *
   * To use the `patterns_allowed` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories.
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
   */
  readonly "actions/set-allowed-actions-repository": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["selected-actions"];
      };
    };
  };
  /** Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint. */
  readonly "actions/list-self-hosted-runners-for-repo": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly runners: readonly components["schemas"]["runner"][];
          };
        };
      };
    };
  };
  /**
   * Lists binaries for the runner application that you can download and run.
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint.
   */
  readonly "actions/list-runner-applications-for-repo": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["runner-application"][];
        };
      };
    };
  };
  /**
   * Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate
   * using an access token with the `repo` scope to use this endpoint.
   *
   * #### Example using registration token
   *
   * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
   *
   * ```
   * ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN
   * ```
   */
  readonly "actions/create-registration-token-for-repo": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["authentication-token"];
        };
      };
    };
  };
  /**
   * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.
   * You must authenticate using an access token with the `repo` scope to use this endpoint.
   *
   * #### Example using remove token
   *
   * To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.
   *
   * ```
   * ./config.sh remove --token TOKEN
   * ```
   */
  readonly "actions/create-remove-token-for-repo": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["authentication-token"];
        };
      };
    };
  };
  /**
   * Gets a specific self-hosted runner configured in a repository.
   *
   * You must authenticate using an access token with the `repo` scope to use this
   * endpoint.
   */
  readonly "actions/get-self-hosted-runner-for-repo": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components["parameters"]["runner_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["runner"];
        };
      };
    };
  };
  /**
   * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
   *
   * You must authenticate using an access token with the `repo`
   * scope to use this endpoint.
   */
  readonly "actions/delete-self-hosted-runner-from-repo": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** Unique identifier of the self-hosted runner. */
        readonly runner_id: components["parameters"]["runner_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
   *
   * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   */
  readonly "actions/list-workflow-runs-for-repo": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */
        readonly actor?: components["parameters"]["actor"];
        /** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */
        readonly branch?: components["parameters"]["workflow-run-branch"];
        /** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)." */
        readonly event?: components["parameters"]["event"];
        /** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see "[Create a check run](https://docs.github.com/rest/reference/checks#create-a-check-run)." */
        readonly status?: components["parameters"]["workflow-run-status"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly workflow_runs: readonly components["schemas"]["workflow-run"][];
          };
        };
      };
    };
  };
  /** Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
  readonly "actions/get-workflow-run": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The id of the workflow run */
        readonly run_id: components["parameters"]["run-id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["workflow-run"];
        };
      };
    };
  };
  /**
   * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is
   * private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use
   * this endpoint.
   */
  readonly "actions/delete-workflow-run": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The id of the workflow run */
        readonly run_id: components["parameters"]["run-id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /** Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
  readonly "actions/get-reviews-for-run": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The id of the workflow run */
        readonly run_id: components["parameters"]["run-id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["environment-approvals"][];
        };
      };
    };
  };
  /** Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
  readonly "actions/list-workflow-run-artifacts": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The id of the workflow run */
        readonly run_id: components["parameters"]["run-id"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly artifacts: readonly components["schemas"]["artifact"][];
          };
        };
      };
    };
  };
  /** Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */
  readonly "actions/cancel-workflow-run": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The id of the workflow run */
        readonly run_id: components["parameters"]["run-id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 202: unknown;
    };
  };
  /** Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters). */
  readonly "actions/list-jobs-for-workflow-run": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The id of the workflow run */
        readonly run_id: components["parameters"]["run-id"];
      };
      readonly query: {
        /**
         * Filters jobs by their `completed_at` timestamp. Can be one of:
         * \* `latest`: Returns jobs from the most recent execution of the workflow run.
         * \* `all`: Returns all jobs for a workflow run, including from old executions of the workflow run.
         */
        readonly filter?: "latest" | "all";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly jobs: readonly components["schemas"]["job"][];
          };
        };
      };
    };
  };
  /**
   * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
   * `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use
   * this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have
   * the `actions:read` permission to use this endpoint.
   */
  readonly "actions/download-workflow-run-logs": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The id of the workflow run */
        readonly run_id: components["parameters"]["run-id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 302: never;
    };
  };
  /** Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */
  readonly "actions/delete-workflow-run-logs": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The id of the workflow run */
        readonly run_id: components["parameters"]["run-id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * Get all deployment environments for a workflow run that are waiting for protection rules to pass.
   *
   * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   */
  readonly "actions/get-pending-deployments-for-run": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The id of the workflow run */
        readonly run_id: components["parameters"]["run-id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["pending-deployment"][];
        };
      };
    };
  };
  /**
   * Approve or reject pending deployments that are waiting on approval by a required reviewer.
   *
   * Anyone with read access to the repository contents and deployments can use this endpoint.
   */
  readonly "actions/review-pending-deployments-for-run": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The id of the workflow run */
        readonly run_id: components["parameters"]["run-id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["deployment"][];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The list of environment ids to approve or reject */
          readonly environment_ids: readonly number[];
          /** Whether to approve or reject deployment to the specified environments. Must be one of: `approved` or `rejected` */
          readonly state: "approved" | "rejected";
          /** A comment to accompany the deployment review */
          readonly comment: string;
        };
      };
    };
  };
  /** Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. */
  readonly "actions/re-run-workflow": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The id of the workflow run */
        readonly run_id: components["parameters"]["run-id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: unknown;
    };
  };
  /**
   * Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
   *
   * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   */
  readonly "actions/get-workflow-run-usage": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The id of the workflow run */
        readonly run_id: components["parameters"]["run-id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["workflow-run-usage"];
        };
      };
    };
  };
  /** Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
  readonly "actions/list-repo-secrets": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly secrets: readonly components["schemas"]["actions-secret"][];
          };
        };
      };
    };
  };
  /** Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
  readonly "actions/get-repo-public-key": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["actions-public-key"];
        };
      };
    };
  };
  /** Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
  readonly "actions/get-repo-secret": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** secret_name parameter */
        readonly secret_name: components["parameters"]["secret_name"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["actions-secret"];
        };
      };
    };
  };
  /**
   * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
   * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
   * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
   * this endpoint.
   *
   * #### Example encrypting a secret using Node.js
   *
   * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
   *
   * ```
   * const sodium = require('tweetsodium');
   *
   * const key = "base64-encoded-public-key";
   * const value = "plain-text-secret";
   *
   * // Convert the message and key to Uint8Array's (Buffer implements that interface)
   * const messageBytes = Buffer.from(value);
   * const keyBytes = Buffer.from(key, 'base64');
   *
   * // Encrypt using LibSodium.
   * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
   *
   * // Base64 the encrypted secret
   * const encrypted = Buffer.from(encryptedBytes).toString('base64');
   *
   * console.log(encrypted);
   * ```
   *
   *
   * #### Example encrypting a secret using Python
   *
   * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.
   *
   * ```
   * from base64 import b64encode
   * from nacl import encoding, public
   *
   * def encrypt(public_key: str, secret_value: str) -> str:
   *   """Encrypt a Unicode string using the public key."""
   *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
   *   sealed_box = public.SealedBox(public_key)
   *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
   *   return b64encode(encrypted).decode("utf-8")
   * ```
   *
   * #### Example encrypting a secret using C#
   *
   * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
   *
   * ```
   * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
   * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
   *
   * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
   *
   * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
   * ```
   *
   * #### Example encrypting a secret using Ruby
   *
   * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
   *
   * ```ruby
   * require "rbnacl"
   * require "base64"
   *
   * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
   * public_key = RbNaCl::PublicKey.new(key)
   *
   * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
   * encrypted_secret = box.encrypt("my_secret")
   *
   * # Print the base64 encoded secret
   * puts Base64.strict_encode64(encrypted_secret)
   * ```
   */
  readonly "actions/create-or-update-repo-secret": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** secret_name parameter */
        readonly secret_name: components["parameters"]["secret_name"];
      };
    };
    readonly responses: {
      /** Response when creating a secret */
      readonly 201: unknown;
      /** Response when updating a secret */
      readonly 204: never;
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/actions#get-a-repository-public-key) endpoint. */
          readonly encrypted_value?: string;
          /** ID of the key you used to encrypt the secret. */
          readonly key_id?: string;
        };
      };
    };
  };
  /** Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
  readonly "actions/delete-repo-secret": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** secret_name parameter */
        readonly secret_name: components["parameters"]["secret_name"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /** Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
  readonly "actions/list-repo-workflows": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly workflows: readonly components["schemas"]["workflow"][];
          };
        };
      };
    };
  };
  /** Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
  readonly "actions/get-workflow": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The ID of the workflow. You can also pass the workflow file name as a string. */
        readonly workflow_id: components["parameters"]["workflow-id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["workflow"];
        };
      };
    };
  };
  /**
   * Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
   */
  readonly "actions/disable-workflow": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The ID of the workflow. You can also pass the workflow file name as a string. */
        readonly workflow_id: components["parameters"]["workflow-id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
   *
   * You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see "[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)."
   */
  readonly "actions/create-workflow-dispatch": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The ID of the workflow. You can also pass the workflow file name as a string. */
        readonly workflow_id: components["parameters"]["workflow-id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The git reference for the workflow. The reference can be a branch or tag name. */
          readonly ref: string;
          /** Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted. */
          readonly inputs?: { readonly [key: string]: string };
        };
      };
    };
  };
  /**
   * Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
   */
  readonly "actions/enable-workflow": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The ID of the workflow. You can also pass the workflow file name as a string. */
        readonly workflow_id: components["parameters"]["workflow-id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
   *
   * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
   */
  readonly "actions/list-workflow-runs": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The ID of the workflow. You can also pass the workflow file name as a string. */
        readonly workflow_id: components["parameters"]["workflow-id"];
      };
      readonly query: {
        /** Returns someone's workflow runs. Use the login for the user who created the `push` associated with the check suite or workflow run. */
        readonly actor?: components["parameters"]["actor"];
        /** Returns workflow runs associated with a branch. Use the name of the branch of the `push`. */
        readonly branch?: components["parameters"]["workflow-run-branch"];
        /** Returns workflow run triggered by the event you specify. For example, `push`, `pull_request` or `issue`. For more information, see "[Events that trigger workflows](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/events-that-trigger-workflows)." */
        readonly event?: components["parameters"]["event"];
        /** Returns workflow runs with the check run `status` or `conclusion` that you specify. For example, a conclusion can be `success` or a status can be `in_progress`. Only GitHub can set a status of `waiting` or `requested`. For a list of the possible `status` and `conclusion` options, see "[Create a check run](https://docs.github.com/rest/reference/checks#create-a-check-run)." */
        readonly status?: components["parameters"]["workflow-run-status"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly workflow_runs: readonly components["schemas"]["workflow-run"][];
          };
        };
      };
    };
  };
  /**
   * Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
   *
   * You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   */
  readonly "actions/get-workflow-usage": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The ID of the workflow. You can also pass the workflow file name as a string. */
        readonly workflow_id: components["parameters"]["workflow-id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["workflow-usage"];
        };
      };
    };
  };
  /** Lists the [available assignees](https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository. */
  readonly "issues/list-assignees": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["simple-user"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Checks if a user has permission to be assigned to an issue in this repository.
   *
   * If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
   *
   * Otherwise a `404` status code is returned.
   */
  readonly "issues/check-user-can-be-assigned": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly assignee: string;
      };
    };
    readonly responses: {
      /** If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned. */
      readonly 204: never;
      /** Otherwise a `404` status code is returned. */
      readonly 404: {
        readonly content: {
          readonly "application/json": components["schemas"]["basic-error"];
        };
      };
    };
  };
  /** Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)". */
  readonly "repos/enable-automated-security-fixes": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /** Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)". */
  readonly "repos/disable-automated-security-fixes": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  readonly "repos/list-branches": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** Setting to `true` returns only protected branches. When set to `false`, only unprotected branches are returned. Omitting this parameter returns all branches. */
        readonly protected?: boolean;
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["short-branch"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  readonly "repos/get-branch": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["branch-with-protection"];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 415: components["responses"]["preview_header_missing"];
    };
  };
  /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
  readonly "repos/get-branch-protection": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["branch-protection"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Protecting a branch requires admin or owner permissions to the repository.
   *
   * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
   *
   * **Note**: The list of users, apps, and teams in total is limited to 100 items.
   */
  readonly "repos/update-branch-protection": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["protected-branch"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 415: components["responses"]["preview_header_missing"];
      readonly 422: components["responses"]["validation_failed_simple"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Require status checks to pass before merging. Set to `null` to disable. */
          readonly required_status_checks: {
            /** Require branches to be up to date before merging. */
            readonly strict: boolean;
            /** The list of status checks to require in order to merge into this branch */
            readonly contexts: readonly string[];
          } | null;
          /** Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable. */
          readonly enforce_admins: boolean | null;
          /** Require at least one approving review on a pull request, before merging. Set to `null` to disable. */
          readonly required_pull_request_reviews: {
            /** Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories. */
            readonly dismissal_restrictions?: {
              /** The list of user `login`s with dismissal access */
              readonly users?: readonly string[];
              /** The list of team `slug`s with dismissal access */
              readonly teams?: readonly string[];
            };
            /** Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit. */
            readonly dismiss_stale_reviews?: boolean;
            /** Blocks merging pull requests until [code owners](https://help.github.com/articles/about-code-owners/) review them. */
            readonly require_code_owner_reviews?: boolean;
            /** Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6. */
            readonly required_approving_review_count?: number;
          } | null;
          /** Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable. */
          readonly restrictions: {
            /** The list of user `login`s with push access */
            readonly users: readonly string[];
            /** The list of team `slug`s with push access */
            readonly teams: readonly string[];
            /** The list of app `slug`s with push access */
            readonly apps?: readonly string[];
          } | null;
          /** Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://help.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation. */
          readonly required_linear_history?: boolean;
          /** Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation." */
          readonly allow_force_pushes?: boolean | null;
          /** Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation. */
          readonly allow_deletions?: boolean;
        };
      };
    };
  };
  /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
  readonly "repos/delete-branch-protection": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 403: components["responses"]["forbidden"];
    };
  };
  /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
  readonly "repos/get-admin-branch-protection": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["protected-branch-admin-enforced"];
        };
      };
    };
  };
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
   */
  readonly "repos/set-admin-branch-protection": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["protected-branch-admin-enforced"];
        };
      };
    };
  };
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
   */
  readonly "repos/delete-admin-branch-protection": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** No Content */
      readonly 204: never;
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
  readonly "repos/get-pull-request-review-protection": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/vnd.github.luke-cage-preview+json": components["schemas"]["protected-branch-pull-request-review"];
        };
      };
    };
  };
  /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
  readonly "repos/delete-pull-request-review-protection": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** No Content */
      readonly 204: never;
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
   *
   * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
   */
  readonly "repos/update-pull-request-review-protection": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["protected-branch-pull-request-review"];
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories. */
          readonly dismissal_restrictions?: {
            /** The list of user `login`s with dismissal access */
            readonly users?: readonly string[];
            /** The list of team `slug`s with dismissal access */
            readonly teams?: readonly string[];
          };
          /** Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit. */
          readonly dismiss_stale_reviews?: boolean;
          /** Blocks merging pull requests until [code owners](https://help.github.com/articles/about-code-owners/) have reviewed. */
          readonly require_code_owner_reviews?: boolean;
          /** Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6. */
          readonly required_approving_review_count?: number;
        };
      };
    };
  };
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://help.github.com/articles/signing-commits-with-gpg) in GitHub Help.
   *
   * **Note**: You must enable branch protection to require signed commits.
   */
  readonly "repos/get-commit-signature-protection": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["protected-branch-admin-enforced"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
   */
  readonly "repos/create-commit-signature-protection": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["protected-branch-admin-enforced"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
   */
  readonly "repos/delete-commit-signature-protection": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** No Content */
      readonly 204: never;
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
  readonly "repos/get-status-checks-protection": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["status-check-policy"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
  readonly "repos/remove-status-check-protection": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** No Content */
      readonly 204: never;
    };
  };
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
   */
  readonly "repos/update-status-check-protection": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["status-check-policy"];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Require branches to be up to date before merging. */
          readonly strict?: boolean;
          /** The list of status checks to require in order to merge into this branch */
          readonly contexts?: readonly string[];
        };
      };
    };
  };
  /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
  readonly "repos/get-all-status-check-contexts": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly string[];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
  readonly "repos/set-status-check-contexts": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly string[];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** contexts parameter */
          readonly contexts: readonly string[];
        };
      };
    };
  };
  /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
  readonly "repos/add-status-check-contexts": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly string[];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** contexts parameter */
          readonly contexts: readonly string[];
        };
      };
    };
  };
  /** Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
  readonly "repos/remove-status-check-contexts": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly string[];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** contexts parameter */
          readonly contexts: readonly string[];
        };
      };
    };
  };
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Lists who has access to this protected branch.
   *
   * **Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.
   */
  readonly "repos/get-access-restrictions": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["branch-restriction-policy"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Disables the ability to restrict who can push to this branch.
   */
  readonly "repos/delete-access-restrictions": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** No Content */
      readonly 204: never;
    };
  };
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
   */
  readonly "repos/get-apps-with-access-to-protected-branch": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["integration"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
   *
   * | Type    | Description                                                                                                                                                |
   * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   */
  readonly "repos/set-app-access-restrictions": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["integration"][];
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** apps parameter */
          readonly apps: readonly string[];
        };
      };
    };
  };
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Grants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
   *
   * | Type    | Description                                                                                                                                                |
   * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   */
  readonly "repos/add-app-access-restrictions": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["integration"][];
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** apps parameter */
          readonly apps: readonly string[];
        };
      };
    };
  };
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
   *
   * | Type    | Description                                                                                                                                                |
   * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   */
  readonly "repos/remove-app-access-restrictions": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["integration"][];
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** apps parameter */
          readonly apps: readonly string[];
        };
      };
    };
  };
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Lists the teams who have push access to this branch. The list includes child teams.
   */
  readonly "repos/get-teams-with-access-to-protected-branch": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["team"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
   *
   * | Type    | Description                                                                                                                                |
   * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
   * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   */
  readonly "repos/set-team-access-restrictions": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["team"][];
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** teams parameter */
          readonly teams: readonly string[];
        };
      };
    };
  };
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Grants the specified teams push access for this branch. You can also give push access to child teams.
   *
   * | Type    | Description                                                                                                                                |
   * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
   * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   */
  readonly "repos/add-team-access-restrictions": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["team"][];
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** teams parameter */
          readonly teams: readonly string[];
        };
      };
    };
  };
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Removes the ability of a team to push to this branch. You can also remove push access for child teams.
   *
   * | Type    | Description                                                                                                                                         |
   * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   */
  readonly "repos/remove-team-access-restrictions": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["team"][];
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** teams parameter */
          readonly teams: readonly string[];
        };
      };
    };
  };
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Lists the people who have push access to this branch.
   */
  readonly "repos/get-users-with-access-to-protected-branch": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["simple-user"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
   *
   * | Type    | Description                                                                                                                   |
   * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   */
  readonly "repos/set-user-access-restrictions": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["simple-user"][];
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** users parameter */
          readonly users: readonly string[];
        };
      };
    };
  };
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Grants the specified people push access for this branch.
   *
   * | Type    | Description                                                                                                                   |
   * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   */
  readonly "repos/add-user-access-restrictions": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["simple-user"][];
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** users parameter */
          readonly users: readonly string[];
        };
      };
    };
  };
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Removes the ability of a user to push to this branch.
   *
   * | Type    | Description                                                                                                                                   |
   * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   */
  readonly "repos/remove-user-access-restrictions": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["simple-user"][];
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** users parameter */
          readonly users: readonly string[];
        };
      };
    };
  };
  /**
   * Renames a branch in a repository.
   *
   * **Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)".
   *
   * The permissions required to use this endpoint depends on whether you are renaming the default branch.
   *
   * To rename a non-default branch:
   *
   * * Users must have push access.
   * * GitHub Apps must have the `contents:write` repository permission.
   *
   * To rename the default branch:
   *
   * * Users must have admin or owner permissions.
   * * GitHub Apps must have the `administration:write` repository permission.
   */
  readonly "repos/rename-branch": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the branch. */
        readonly branch: components["parameters"]["branch"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["branch-with-protection"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The new name of the branch. */
          readonly new_name: string;
        };
      };
    };
  };
  /**
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
   *
   * Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.
   *
   * In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
   */
  readonly "checks/create": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["check-run"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": (Partial<
          {
            readonly status?: "completed";
          } & { readonly [key: string]: any }
        > &
          Partial<
            {
              readonly status?: "queued" | "in_progress";
            } & { readonly [key: string]: any }
          >) & {
          /** The name of the check. For example, "code-coverage". */
          readonly name: string;
          /** The SHA of the commit. */
          readonly head_sha: string;
          /** The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then the homepage of the GitHub app is used. */
          readonly details_url?: string;
          /** A reference for the run on the integrator's system. */
          readonly external_id?: string;
          /** The current status. Can be one of `queued`, `in_progress`, or `completed`. */
          readonly status?: "queued" | "in_progress" | "completed";
          /** The time that the check run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
          readonly started_at?: string;
          /**
           * **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `action_required`, `cancelled`, `failure`, `neutral`, `success`, `skipped`, `stale`, or `timed_out`. When the conclusion is `action_required`, additional details should be provided on the site specified by `details_url`.
           * **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
           */
          readonly conclusion?:
            | "action_required"
            | "cancelled"
            | "failure"
            | "neutral"
            | "success"
            | "skipped"
            | "stale"
            | "timed_out";
          /** The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
          readonly completed_at?: string;
          /** Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://docs.github.com/rest/reference/checks#output-object) description. */
          readonly output?: {
            /** The title of the check run. */
            readonly title: string;
            /** The summary of the check run. This parameter supports Markdown. */
            readonly summary: string;
            /** The details of the check run. This parameter supports Markdown. */
            readonly text?: string;
            /** Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the **Checks** and **Files changed** tab of the pull request. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about how you can view annotations on GitHub, see "[About status checks](https://help.github.com/articles/about-status-checks#checks)". See the [`annotations` object](https://docs.github.com/rest/reference/checks#annotations-object) description for details about how to use this parameter. */
            readonly annotations?: readonly {
              /** The path of the file to add an annotation to. For example, `assets/css/main.css`. */
              readonly path: string;
              /** The start line of the annotation. */
              readonly start_line: number;
              /** The end line of the annotation. */
              readonly end_line: number;
              /** The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */
              readonly start_column?: number;
              /** The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */
              readonly end_column?: number;
              /** The level of the annotation. Can be one of `notice`, `warning`, or `failure`. */
              readonly annotation_level: "notice" | "warning" | "failure";
              /** A short description of the feedback for these lines of code. The maximum size is 64 KB. */
              readonly message: string;
              /** The title that represents the annotation. The maximum size is 255 characters. */
              readonly title?: string;
              /** Details about this annotation. The maximum size is 64 KB. */
              readonly raw_details?: string;
            }[];
            /** Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://docs.github.com/rest/reference/checks#images-object) description for details. */
            readonly images?: readonly {
              /** The alternative text for the image. */
              readonly alt: string;
              /** The full URL of the image. */
              readonly image_url: string;
              /** A short image description. */
              readonly caption?: string;
            }[];
          };
          /** Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app can display a button that automatically fixes detected errors. The button created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the [`check_run.requested_action` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) to your app. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://docs.github.com/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions)." To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions)." */
          readonly actions?: readonly {
            /** The text to be displayed on a button in the web UI. The maximum size is 20 characters. */
            readonly label: string;
            /** A short explanation of what this action would do. The maximum size is 40 characters. */
            readonly description: string;
            /** A reference for the action on the integrator's system. The maximum size is 20 characters. */
            readonly identifier: string;
          }[];
        };
      };
    };
  };
  /**
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
   *
   * Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
   */
  readonly "checks/get": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** check_run_id parameter */
        readonly check_run_id: components["parameters"]["check_run_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["check-run"];
        };
      };
    };
  };
  /**
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
   *
   * Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.
   */
  readonly "checks/update": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** check_run_id parameter */
        readonly check_run_id: components["parameters"]["check_run_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["check-run"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": (Partial<
          {
            readonly status?: "completed";
          } & { readonly [key: string]: any }
        > &
          Partial<
            {
              readonly status?: "queued" | "in_progress";
            } & { readonly [key: string]: any }
          >) & {
          /** The name of the check. For example, "code-coverage". */
          readonly name?: string;
          /** The URL of the integrator's site that has the full details of the check. */
          readonly details_url?: string;
          /** A reference for the run on the integrator's system. */
          readonly external_id?: string;
          /** This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
          readonly started_at?: string;
          /** The current status. Can be one of `queued`, `in_progress`, or `completed`. */
          readonly status?: "queued" | "in_progress" | "completed";
          /**
           * **Required if you provide `completed_at` or a `status` of `completed`**. The final conclusion of the check. Can be one of `action_required`, `cancelled`, `failure`, `neutral`, `success`, `skipped`, `stale`, or `timed_out`.
           * **Note:** Providing `conclusion` will automatically set the `status` parameter to `completed`. You cannot change a check run conclusion to `stale`, only GitHub can set this.
           */
          readonly conclusion?:
            | "action_required"
            | "cancelled"
            | "failure"
            | "neutral"
            | "success"
            | "skipped"
            | "stale"
            | "timed_out";
          /** The time the check completed. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
          readonly completed_at?: string;
          /** Check runs can accept a variety of data in the `output` object, including a `title` and `summary` and can optionally provide descriptive details about the run. See the [`output` object](https://docs.github.com/rest/reference/checks#output-object-1) description. */
          readonly output?: {
            /** **Required**. */
            readonly title?: string;
            /** Can contain Markdown. */
            readonly summary: string;
            /** Can contain Markdown. */
            readonly text?: string;
            /** Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations are visible in GitHub's pull request UI. The Checks API limits the number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests to the [Update a check run](https://docs.github.com/rest/reference/checks#update-a-check-run) endpoint. Each time you update the check run, annotations are appended to the list of annotations that already exist for the check run. For details about annotations in the UI, see "[About status checks](https://help.github.com/articles/about-status-checks#checks)". See the [`annotations` object](https://docs.github.com/rest/reference/checks#annotations-object-1) description for details. */
            readonly annotations?: readonly {
              /** The path of the file to add an annotation to. For example, `assets/css/main.css`. */
              readonly path: string;
              /** The start line of the annotation. */
              readonly start_line: number;
              /** The end line of the annotation. */
              readonly end_line: number;
              /** The start column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */
              readonly start_column?: number;
              /** The end column of the annotation. Annotations only support `start_column` and `end_column` on the same line. Omit this parameter if `start_line` and `end_line` have different values. */
              readonly end_column?: number;
              /** The level of the annotation. Can be one of `notice`, `warning`, or `failure`. */
              readonly annotation_level: "notice" | "warning" | "failure";
              /** A short description of the feedback for these lines of code. The maximum size is 64 KB. */
              readonly message: string;
              /** The title that represents the annotation. The maximum size is 255 characters. */
              readonly title?: string;
              /** Details about this annotation. The maximum size is 64 KB. */
              readonly raw_details?: string;
            }[];
            /** Adds images to the output displayed in the GitHub pull request UI. See the [`images` object](https://docs.github.com/rest/reference/checks#annotations-object-1) description for details. */
            readonly images?: readonly {
              /** The alternative text for the image. */
              readonly alt: string;
              /** The full URL of the image. */
              readonly image_url: string;
              /** A short image description. */
              readonly caption?: string;
            }[];
          };
          /** Possible further actions the integrator can perform, which a user may trigger. Each action includes a `label`, `identifier` and `description`. A maximum of three actions are accepted. See the [`actions` object](https://docs.github.com/rest/reference/checks#actions-object) description. To learn more about check runs and requested actions, see "[Check runs and requested actions](https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions)." */
          readonly actions?: readonly {
            /** The text to be displayed on a button in the web UI. The maximum size is 20 characters. */
            readonly label: string;
            /** A short explanation of what this action would do. The maximum size is 40 characters. */
            readonly description: string;
            /** A reference for the action on the integrator's system. The maximum size is 20 characters. */
            readonly identifier: string;
          }[];
        };
      };
    };
  };
  /** Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository. */
  readonly "checks/list-annotations": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** check_run_id parameter */
        readonly check_run_id: components["parameters"]["check_run_id"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["check-annotation"][];
        };
      };
    };
  };
  /**
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
   *
   * By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites)". Your GitHub App must have the `checks:write` permission to create check suites.
   */
  readonly "checks/create-suite": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["check-suite"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The sha of the head commit. */
          readonly head_sha: string;
        };
      };
    };
  };
  /** Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites. */
  readonly "checks/set-suites-preferences": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["check-suite-preference"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. See the [`auto_trigger_checks` object](https://docs.github.com/rest/reference/checks#auto_trigger_checks-object) description for details. */
          readonly auto_trigger_checks?: readonly {
            /** The `id` of the GitHub App. */
            readonly app_id: number;
            /** Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them. */
            readonly setting: boolean;
          }[];
        };
      };
    };
  };
  /**
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
   *
   * Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
   */
  readonly "checks/get-suite": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** check_suite_id parameter */
        readonly check_suite_id: components["parameters"]["check_suite_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["check-suite"];
        };
      };
    };
  };
  /**
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
   *
   * Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
   */
  readonly "checks/list-for-suite": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** check_suite_id parameter */
        readonly check_suite_id: components["parameters"]["check_suite_id"];
      };
      readonly query: {
        /** Returns check runs with the specified `name`. */
        readonly check_name?: components["parameters"]["check_name"];
        /** Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`. */
        readonly status?: components["parameters"]["status"];
        /** Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`. */
        readonly filter?: "latest" | "all";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly check_runs: readonly components["schemas"]["check-run"][];
          };
        };
      };
    };
  };
  /**
   * Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
   *
   * To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
   */
  readonly "checks/rerequest-suite": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** check_suite_id parameter */
        readonly check_suite_id: components["parameters"]["check_suite_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: unknown;
    };
  };
  /**
   * Lists all open code scanning alerts for the default branch (usually `main`
   * or `master`). You must use an access token with the `security_events` scope to use
   * this endpoint. GitHub Apps must have the `security_events` read permission to use
   * this endpoint.
   *
   * The response includes a `most_recent_instance` object.
   * This provides details of the most recent instance of this alert
   * for the the default branch or for the specified Git reference
   * (if you used `ref` in the request).
   */
  readonly "code-scanning/list-alerts-for-repo": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */
        readonly tool_name?: components["parameters"]["tool_name"];
        /** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */
        readonly tool_guid?: components["parameters"]["tool_guid"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
        readonly ref?: components["parameters"]["git_ref"];
        /** Set to `open`, `fixed`, or `dismissed` to list code scanning alerts in a specific state. */
        readonly state?: components["schemas"]["code-scanning-alert-state"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["code-scanning-alert-items"][];
        };
      };
      readonly 403: components["responses"]["code_scanning_forbidden_read"];
      readonly 404: components["responses"]["not_found"];
      readonly 503: components["responses"]["service_unavailable"];
    };
  };
  /**
   * Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
   *
   * **Deprecation notice**:
   * The instances field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The same information can now be retrieved via a GET request to the URL specified by `instances_url`.
   */
  readonly "code-scanning/get-alert": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
        readonly alert_number: components["parameters"]["alert_number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["code-scanning-alert"];
        };
      };
      readonly 403: components["responses"]["code_scanning_forbidden_read"];
      readonly 404: components["responses"]["not_found"];
      readonly 503: components["responses"]["service_unavailable"];
    };
  };
  /** Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint. */
  readonly "code-scanning/update-alert": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
        readonly alert_number: components["parameters"]["alert_number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["code-scanning-alert"];
        };
      };
      readonly 403: components["responses"]["code_scanning_forbidden_write"];
      readonly 404: components["responses"]["not_found"];
      readonly 503: components["responses"]["service_unavailable"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          readonly state: components["schemas"]["code-scanning-alert-set-state"];
          readonly dismissed_reason?: components["schemas"]["code-scanning-alert-dismissed-reason"];
        };
      };
    };
  };
  /** Lists all instances of the specified code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint. */
  readonly "code-scanning/list-alerts-instances": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
        readonly alert_number: components["parameters"]["alert_number"];
      };
      readonly query: {
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** The Git reference for the results you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
        readonly ref?: components["parameters"]["git_ref"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["code-scanning-alert-instance"][];
        };
      };
      readonly 403: components["responses"]["code_scanning_forbidden_read"];
      readonly 404: components["responses"]["not_found"];
      readonly 503: components["responses"]["service_unavailable"];
    };
  };
  /**
   * Lists the details of all code scanning analyses for a repository,
   * starting with the most recent.
   * The response is paginated and you can use the `page` and `per_page` parameters
   * to list the analyses you're interested in.
   * By default 30 analyses are listed per page.
   *
   * The `rules_count` field in the response give the number of rules
   * that were run in the analysis.
   * For very old analyses this data is not available,
   * and `0` is returned in this field.
   *
   * You must use an access token with the `security_events` scope to use this endpoint.
   * GitHub Apps must have the `security_events` read permission to use this endpoint.
   *
   * **Deprecation notice**:
   * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
   */
  readonly "code-scanning/list-recent-analyses": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** The name of a code scanning tool. Only results by this tool will be listed. You can specify the tool by using either `tool_name` or `tool_guid`, but not both. */
        readonly tool_name?: components["parameters"]["tool_name"];
        /** The GUID of a code scanning tool. Only results by this tool will be listed. Note that some code scanning tools may not include a GUID in their analysis data. You can specify the tool by using either `tool_guid` or `tool_name`, but not both. */
        readonly tool_guid?: components["parameters"]["tool_guid"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** The Git reference for the analyses you want to list. The `ref` for a branch can be formatted either as `refs/heads/<branch name>` or simply `<branch name>`. To reference a pull request use `refs/pull/<number>/merge`. */
        readonly ref?: components["schemas"]["code-scanning-ref"];
        /** Filter analyses belonging to the same SARIF upload. */
        readonly sarif_id?: components["schemas"]["code-scanning-analysis-sarif-id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["code-scanning-analysis"][];
        };
      };
      readonly 403: components["responses"]["code_scanning_forbidden_read"];
      readonly 404: components["responses"]["not_found"];
      readonly 503: components["responses"]["service_unavailable"];
    };
  };
  /**
   * Gets a specified code scanning analysis for a repository.
   * You must use an access token with the `security_events` scope to use this endpoint.
   * GitHub Apps must have the `security_events` read permission to use this endpoint.
   *
   * The default JSON response contains fields that describe the analysis.
   * This includes the Git reference and commit SHA to which the analysis relates,
   * the datetime of the analysis, the name of the code scanning tool,
   * and the number of alerts.
   *
   * The `rules_count` field in the default response give the number of rules
   * that were run in the analysis.
   * For very old analyses this data is not available,
   * and `0` is returned in this field.
   *
   * If you use the Accept header `application/sarif+json`,
   * the response contains the analysis data that was uploaded.
   * This is formatted as
   * [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).
   * For an example response, see "[Custom media type for code scanning](#custom-media-type-for-code-scanning)."
   *
   * **Deprecation notice**:
   * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
   */
  readonly "code-scanning/get-analysis": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation. */
        readonly analysis_id: number;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["code-scanning-analysis"];
        };
      };
      readonly 403: components["responses"]["code_scanning_forbidden_read"];
      readonly 404: components["responses"]["not_found"];
      readonly 503: components["responses"]["service_unavailable"];
    };
  };
  /**
   * Deletes a specified code scanning analysis from a repository. For
   * private repositories, you must use an access token with the `repo` scope. For public repositories,
   * you must use an access token with `public_repo` and `repo:security_events` scopes.
   * GitHub Apps must have the `security_events` write permission to use this endpoint.
   *
   * You can delete one analysis at a time.
   * To delete a series of analyses, start with the most recent analysis and work backwards.
   * Conceptually, the process is similar to the undo function in a text editor.
   *
   * When you list the analyses for a repository,
   * one or more will be identified as deletable in the response:
   *
   * ```
   * "deletable": true
   * ```
   *
   * An analysis is deletable when it's the most recent in a set of analyses.
   * Typically, a repository will have multiple sets of analyses
   * for each enabled code scanning tool,
   * where a set is determined by a unique combination of analysis values:
   *
   * * `ref`
   * * `tool`
   * * `analysis_key`
   * * `environment`
   *
   * If you attempt to delete an analysis that is not the most recent in a set,
   * you'll get a 400 response with the message:
   *
   * ```
   * Analysis specified is not deletable.
   * ```
   *
   * The response from a successful `DELETE` operation provides you with
   * two alternative URLs for deleting the next analysis in the set
   * (see the example default response below).
   * Use the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis
   * in the set. This is a useful option if you want to preserve at least one analysis
   * for the specified tool in your repository.
   * Use the `confirm_delete_url` URL if you are content to remove all analyses for a tool.
   * When you delete the last analysis in a set the value of `next_analysis_url` and `confirm_delete_url`
   * in the 200 response is `null`.
   *
   * As an example of the deletion process,
   * let's imagine that you added a workflow that configured a particular code scanning tool
   * to analyze the code in a repository. This tool has added 15 analyses:
   * 10 on the default branch, and another 5 on a topic branch.
   * You therefore have two separate sets of analyses for this tool.
   * You've now decided that you want to remove all of the analyses for the tool.
   * To do this you must make 15 separate deletion requests.
   * To start, you must find the deletable analysis for one of the sets,
   * step through deleting the analyses in that set,
   * and then repeat the process for the second set.
   * The procedure therefore consists of a nested loop:
   *
   * **Outer loop**:
   * * List the analyses for the repository, filtered by tool.
   * * Parse this list to find a deletable analysis. If found:
   *
   *   **Inner loop**:
   *   * Delete the identified analysis.
   *   * Parse the response for the value of `next_analysis_url` and, if found, use this in the next iteration.
   *
   * The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `next_analysis_url` value. Alternatively, you could use the `confirm_delete_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.
   */
  readonly "code-scanning/delete-analysis": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The ID of the analysis, as returned from the `GET /repos/{owner}/{repo}/code-scanning/analyses` operation. */
        readonly analysis_id: number;
      };
      readonly query: {
        /** Allow deletion if the specified analysis is the last in a set. The parameter can be used without a value as the parameter value is not considered. If you attempt to delete the final analysis in a set without using this parameter you'll get a 400 response with the message: `Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.` */
        readonly confirm_delete?: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["code-scanning-analysis-deletion"];
        };
      };
      readonly 400: components["responses"]["bad_request"];
      readonly 403: components["responses"]["code_scanning_forbidden_write"];
      readonly 404: components["responses"]["not_found"];
      readonly 503: components["responses"]["service_unavailable"];
    };
  };
  /**
   * Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.
   *
   * You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:
   *
   * ```
   * gzip -c analysis-data.sarif | base64
   * ```
   *
   * SARIF upload supports a maximum of 1000 results per analysis run. Any results over this limit are ignored. Typically, but not necessarily, a SARIF file contains a single run of a single tool. If a code scanning tool generates too many results, you should update the analysis configuration to run only the most important rules or queries.
   *
   * The `202 Accepted`, response includes an `id` value.
   * You can use this ID to check the status of the upload by using this for the `/sarifs/{sarif_id}` endpoint.
   * For more information, see "[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload)."
   */
  readonly "code-scanning/upload-sarif": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 202: {
        readonly content: {
          readonly "application/json": components["schemas"]["code-scanning-sarifs-receipt"];
        };
      };
      /** Response if the sarif field is invalid */
      readonly 400: unknown;
      readonly 403: components["responses"]["code_scanning_forbidden_write"];
      readonly 404: components["responses"]["not_found"];
      /** Response if the sarif field is too large */
      readonly 413: unknown;
      readonly 503: components["responses"]["service_unavailable"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          readonly commit_sha: components["schemas"]["code-scanning-analysis-commit-sha"];
          readonly ref: components["schemas"]["code-scanning-ref"];
          readonly sarif: components["schemas"]["code-scanning-analysis-sarif-file"];
          /**
           * The base directory used in the analysis, as it appears in the SARIF file.
           * This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
           */
          readonly checkout_uri?: string;
          /** The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
          readonly started_at?: string;
          /** The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`. */
          readonly tool_name?: string;
        };
      };
    };
  };
  /** Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository)." You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint. */
  readonly "code-scanning/get-sarif": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The SARIF ID obtained after uploading. */
        readonly sarif_id: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["code-scanning-sarifs-status"];
        };
      };
      readonly 403: components["responses"]["code_scanning_forbidden_read"];
      /** Response if the sarif id does not match any upload */
      readonly 404: unknown;
      readonly 503: components["responses"]["service_unavailable"];
    };
  };
  /**
   * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
   *
   * Team members will include the members of child teams.
   */
  readonly "repos/list-collaborators": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /**
         * Filter collaborators returned by their affiliation. Can be one of:
         * \* `outside`: All outside collaborators of an organization-owned repository.
         * \* `direct`: All collaborators with permissions to an organization-owned repository, regardless of organization membership status.
         * \* `all`: All collaborators the authenticated user can see.
         */
        readonly affiliation?: "outside" | "direct" | "all";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["collaborator"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
   *
   * Team members will include the members of child teams.
   */
  readonly "repos/check-collaborator": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** Response if user is a collaborator */
      readonly 204: never;
      /** Response if user is not a collaborator */
      readonly 404: unknown;
    };
  };
  /**
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
   *
   * For more information the permission levels, see "[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
   *
   * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
   *
   * The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/rest/reference/repos#invitations).
   *
   * **Rate limits**
   *
   * To prevent abuse, you are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
   */
  readonly "repos/add-collaborator": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** Response when a new invitation is created */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["repository-invitation"];
        };
      };
      /** Response when person is already a collaborator */
      readonly 204: never;
      readonly 403: components["responses"]["forbidden"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /**
           * The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:
           * \* `pull` - can pull, but not push to or administer this repository.
           * \* `push` - can pull and push, but not administer this repository.
           * \* `admin` - can pull, push and administer this repository.
           * \* `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.
           * \* `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.
           */
          readonly permission?:
            | "pull"
            | "push"
            | "admin"
            | "maintain"
            | "triage";
          readonly permissions?: string;
        };
      };
    };
  };
  readonly "repos/remove-collaborator": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /** Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`. */
  readonly "repos/get-collaborator-permission-level": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** Response if user has admin permissions */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["repository-collaborator-permission"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Commit Comments use [these custom media types](https://docs.github.com/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/rest/overview/media-types/).
   *
   * Comments are ordered by ascending ID.
   */
  readonly "repos/list-commit-comments-for-repo": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["commit-comment"][];
        };
      };
    };
  };
  readonly "repos/get-commit-comment": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** comment_id parameter */
        readonly comment_id: components["parameters"]["comment_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["commit-comment"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  readonly "repos/delete-commit-comment": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** comment_id parameter */
        readonly comment_id: components["parameters"]["comment_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 404: components["responses"]["not_found"];
    };
  };
  readonly "repos/update-commit-comment": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** comment_id parameter */
        readonly comment_id: components["parameters"]["comment_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["commit-comment"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The contents of the comment */
          readonly body: string;
        };
      };
    };
  };
  /** List the reactions to a [commit comment](https://docs.github.com/rest/reference/repos#comments). */
  readonly "reactions/list-for-commit-comment": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** comment_id parameter */
        readonly comment_id: components["parameters"]["comment_id"];
      };
      readonly query: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a commit comment. */
        readonly content?:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["reaction"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 415: components["responses"]["preview_header_missing"];
    };
  };
  /** Create a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this commit comment. */
  readonly "reactions/create-for-commit-comment": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** comment_id parameter */
        readonly comment_id: components["parameters"]["comment_id"];
      };
    };
    readonly responses: {
      /** Reaction exists */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["reaction"];
        };
      };
      /** Reaction created */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["reaction"];
        };
      };
      readonly 415: components["responses"]["preview_header_missing"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the commit comment. */
          readonly content:
            | "+1"
            | "-1"
            | "laugh"
            | "confused"
            | "heart"
            | "hooray"
            | "rocket"
            | "eyes";
        };
      };
    };
  };
  /**
   * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.
   *
   * Delete a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
   */
  readonly "reactions/delete-for-commit-comment": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** comment_id parameter */
        readonly comment_id: components["parameters"]["comment_id"];
        readonly reaction_id: components["parameters"]["reaction-id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   */
  readonly "repos/list-commits": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** SHA or branch to start listing commits from. Default: the repository’s default branch (usually `master`). */
        readonly sha?: string;
        /** Only commits containing this file path will be returned. */
        readonly path?: string;
        /** GitHub login or email address by which to filter by commit author. */
        readonly author?: string;
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components["parameters"]["since"];
        /** Only commits before this date will be returned. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly until?: string;
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["commit"][];
        };
      };
      readonly 400: components["responses"]["bad_request"];
      readonly 404: components["responses"]["not_found"];
      readonly 409: components["responses"]["conflict"];
      readonly 500: components["responses"]["internal_error"];
    };
  };
  /**
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
   */
  readonly "repos/list-branches-for-head-commit": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** commit_sha parameter */
        readonly commit_sha: components["parameters"]["commit_sha"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["branch-short"][];
        };
      };
      readonly 415: components["responses"]["preview_header_missing"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  /** Use the `:commit_sha` to specify the commit that will have its comments listed. */
  readonly "repos/list-comments-for-commit": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** commit_sha parameter */
        readonly commit_sha: components["parameters"]["commit_sha"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["commit-comment"][];
        };
      };
    };
  };
  /**
   * Create a comment for a commit using its `:commit_sha`.
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
   */
  readonly "repos/create-commit-comment": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** commit_sha parameter */
        readonly commit_sha: components["parameters"]["commit_sha"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["commit-comment"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The contents of the comment. */
          readonly body: string;
          /** Relative path of the file to comment on. */
          readonly path?: string;
          /** Line index in the diff to comment on. */
          readonly position?: number;
          /** **Deprecated**. Use **position** parameter instead. Line number in the file to comment on. */
          readonly line?: number;
        };
      };
    };
  };
  /** Lists all pull requests containing the provided commit SHA, which can be from any point in the commit history. The results will include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests) endpoint. */
  readonly "repos/list-pull-requests-associated-with-commit": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** commit_sha parameter */
        readonly commit_sha: components["parameters"]["commit_sha"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["pull-request-simple"][];
        };
      };
      readonly 415: components["responses"]["preview_header_missing"];
    };
  };
  /**
   * Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
   *
   * **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
   *
   * You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.
   *
   * To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
   *
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   */
  readonly "repos/get-commit": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** ref+ parameter */
        readonly ref: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["commit"];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
      readonly 500: components["responses"]["internal_error"];
    };
  };
  /**
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
   *
   * Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
   */
  readonly "checks/list-for-ref": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** ref+ parameter */
        readonly ref: string;
      };
      readonly query: {
        /** Returns check runs with the specified `name`. */
        readonly check_name?: components["parameters"]["check_name"];
        /** Returns check runs with the specified `status`. Can be one of `queued`, `in_progress`, or `completed`. */
        readonly status?: components["parameters"]["status"];
        /** Filters check runs by their `completed_at` timestamp. Can be one of `latest` (returning the most recent check runs) or `all`. */
        readonly filter?: "latest" | "all";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly check_runs: readonly components["schemas"]["check-run"][];
          };
        };
      };
    };
  };
  /**
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
   *
   * Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
   */
  readonly "checks/list-suites-for-ref": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** ref+ parameter */
        readonly ref: string;
      };
      readonly query: {
        /** Filters check suites by GitHub App `id`. */
        readonly app_id?: number;
        /** Returns check runs with the specified `name`. */
        readonly check_name?: components["parameters"]["check_name"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly check_suites: readonly components["schemas"]["check-suite"][];
          };
        };
      };
    };
  };
  /**
   * Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
   *
   * The most recent status for each context is returned, up to 100. This field [paginates](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination) if there are over 100 contexts.
   *
   * Additionally, a combined `state` is returned. The `state` is one of:
   *
   * *   **failure** if any of the contexts report as `error` or `failure`
   * *   **pending** if there are no statuses or a context is `pending`
   * *   **success** if the latest status for all contexts is `success`
   */
  readonly "repos/get-combined-status-for-ref": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** ref+ parameter */
        readonly ref: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["combined-commit-status"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
   *
   * This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
   */
  readonly "repos/list-commit-statuses-for-ref": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** ref+ parameter */
        readonly ref: string;
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["status"][];
        };
      };
      readonly 301: components["responses"]["moved_permanently"];
    };
  };
  /**
   * Returns the contents of the repository's code of conduct file, if one is detected.
   *
   * A code of conduct is detected if there is a file named `CODE_OF_CONDUCT` in the root directory of the repository. GitHub detects which code of conduct it is using fuzzy matching.
   */
  readonly "codes-of-conduct/get-for-repo": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["code-of-conduct"];
        };
      };
    };
  };
  /**
   * This endpoint will return all community profile metrics, including an
   * overall health score, repository description, the presence of documentation, detected
   * code of conduct, detected license, and the presence of ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE,
   * README, and CONTRIBUTING files.
   *
   * The `health_percentage` score is defined as a percentage of how many of
   * these four documents are present: README, CONTRIBUTING, LICENSE, and
   * CODE_OF_CONDUCT. For example, if all four documents are present, then
   * the `health_percentage` is `100`. If only one is present, then the
   * `health_percentage` is `25`.
   *
   * `content_reports_enabled` is only returned for organization-owned repositories.
   */
  readonly "repos/get-community-profile-metrics": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["community-profile"];
        };
      };
    };
  };
  /**
   * Both `:base` and `:head` must be branch names in `:repo`. To compare branches across other repositories in the same network as `:repo`, use the format `<USERNAME>:branch`.
   *
   * The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
   *
   * The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
   *
   * **Working with large comparisons**
   *
   * The response will include a comparison of up to 250 commits. If you are working with a larger commit range, you can use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) to enumerate all commits in the range.
   *
   * For comparisons with extremely large diffs, you may receive an error response indicating that the diff took too long
   * to generate. You can typically resolve this error by using a smaller commit range.
   *
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   */
  readonly "repos/compare-commits": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly base: string;
        readonly head: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["commit-comparison"];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 500: components["responses"]["internal_error"];
    };
  };
  /**
   * Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit
   * `:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories.
   *
   * Files and symlinks support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) for
   * retrieving the raw content or rendered HTML (when supported). All content types support [a custom media
   * type](https://docs.github.com/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent
   * object format.
   *
   * **Note**:
   * *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/reference/git#trees).
   * *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees
   * API](https://docs.github.com/rest/reference/git#get-a-tree).
   * *   This API supports files up to 1 megabyte in size.
   *
   * #### If the content is a directory
   * The response will be an array of objects, one object for each item in the directory.
   * When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value
   * _should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).
   * In the next major version of the API, the type will be returned as "submodule".
   *
   * #### If the content is a symlink
   * If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the
   * API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object
   * describing the symlink itself.
   *
   * #### If the content is a submodule
   * The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific
   * commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out
   * the submodule at that specific commit.
   *
   * If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the
   * github.com URLs (`html_url` and `_links["html"]`) will have null values.
   */
  readonly "repos/get-content": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** path+ parameter */
        readonly path: string;
      };
      readonly query: {
        /** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */
        readonly ref?: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/vnd.github.v3.object": components["schemas"]["content-tree"];
          readonly "application/json":
            | components["schemas"]["content-directory"]
            | components["schemas"]["content-file"]
            | components["schemas"]["content-symlink"]
            | components["schemas"]["content-submodule"];
        };
      };
      readonly 302: components["responses"]["found"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Creates a new file or replaces an existing file in a repository. */
  readonly "repos/create-or-update-file-contents": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** path+ parameter */
        readonly path: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["file-commit"];
        };
      };
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["file-commit"];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 409: components["responses"]["conflict"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The commit message. */
          readonly message: string;
          /** The new file content, using Base64 encoding. */
          readonly content: string;
          /** **Required if you are updating a file**. The blob SHA of the file being replaced. */
          readonly sha?: string;
          /** The branch name. Default: the repository’s default branch (usually `master`) */
          readonly branch?: string;
          /** The person that committed the file. Default: the authenticated user. */
          readonly committer?: {
            /** The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted. */
            readonly name: string;
            /** The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted. */
            readonly email: string;
            readonly date?: string;
          };
          /** The author of the file. Default: The `committer` or the authenticated user if you omit `committer`. */
          readonly author?: {
            /** The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted. */
            readonly name: string;
            /** The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted. */
            readonly email: string;
            readonly date?: string;
          };
        };
      };
    };
  };
  /**
   * Deletes a file in a repository.
   *
   * You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
   *
   * The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
   *
   * You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
   */
  readonly "repos/delete-file": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** path+ parameter */
        readonly path: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["file-commit"];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 409: components["responses"]["conflict"];
      readonly 422: components["responses"]["validation_failed"];
      readonly 503: components["responses"]["service_unavailable"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The commit message. */
          readonly message: string;
          /** The blob SHA of the file being replaced. */
          readonly sha: string;
          /** The branch name. Default: the repository’s default branch (usually `master`) */
          readonly branch?: string;
          /** object containing information about the committer. */
          readonly committer?: {
            /** The name of the author (or committer) of the commit */
            readonly name?: string;
            /** The email of the author (or committer) of the commit */
            readonly email?: string;
          };
          /** object containing information about the author. */
          readonly author?: {
            /** The name of the author (or committer) of the commit */
            readonly name?: string;
            /** The email of the author (or committer) of the commit */
            readonly email?: string;
          };
        };
      };
    };
  };
  /**
   * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.
   *
   * GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
   */
  readonly "repos/list-contributors": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** Set to `1` or `true` to include anonymous contributors in results. */
        readonly anon?: string;
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** Response if repository contains content */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["contributor"][];
        };
      };
      /** Response if repository is empty */
      readonly 204: never;
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Simple filtering of deployments is available via query parameters: */
  readonly "repos/list-deployments": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** The SHA recorded at creation time. */
        readonly sha?: string;
        /** The name of the ref. This can be a branch, tag, or SHA. */
        readonly ref?: string;
        /** The name of the task for the deployment (e.g., `deploy` or `deploy:migrations`). */
        readonly task?: string;
        /** The name of the environment that was deployed to (e.g., `staging` or `production`). */
        readonly environment?: string;
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["deployment"][];
        };
      };
    };
  };
  /**
   * Deployments offer a few configurable parameters with certain defaults.
   *
   * The `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them
   * before we merge a pull request.
   *
   * The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have
   * multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter
   * makes it easier to track which environments have requested deployments. The default environment is `production`.
   *
   * The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
   * the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
   * the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
   * return a failure response.
   *
   * By default, [commit statuses](https://docs.github.com/rest/reference/repos#statuses) for every submitted context must be in a `success`
   * state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to
   * specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
   * not require any contexts or create any commit statuses, the deployment will always succeed.
   *
   * The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text
   * field that will be passed on when a deployment event is dispatched.
   *
   * The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might
   * be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an
   * application with debugging enabled.
   *
   * Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref.
   *
   * #### Merged branch response
   * You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
   * a deployment. This auto-merge happens when:
   * *   Auto-merge option is enabled in the repository
   * *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
   * *   There are no merge conflicts
   *
   * If there are no new commits in the base branch, a new request to create a deployment should give a successful
   * response.
   *
   * #### Merge conflict response
   * This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't
   * be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.
   *
   * #### Failed commit status checks
   * This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`
   * status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.
   */
  readonly "repos/create-deployment": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["deployment"];
        };
      };
      /** Merged branch response */
      readonly 202: {
        readonly content: {
          readonly "application/json": {
            readonly message?: string;
          };
        };
      };
      /** response */
      readonly 409: {
        readonly content: {
          readonly "application/json": {
            readonly message?: string;
            readonly documentation_url?: string;
          };
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The ref to deploy. This can be a branch, tag, or SHA. */
          readonly ref: string;
          /** Specifies a task to execute (e.g., `deploy` or `deploy:migrations`). */
          readonly task?: string;
          /** Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch. */
          readonly auto_merge?: boolean;
          /** The [status](https://docs.github.com/rest/reference/repos#statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts. */
          readonly required_contexts?: readonly string[];
          readonly payload?: { readonly [key: string]: any } | string;
          /** Name for the target deployment environment (e.g., `production`, `staging`, `qa`). */
          readonly environment?: string;
          /** Short description of the deployment. */
          readonly description?: string | null;
          /**
           * Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
           * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
           */
          readonly transient_environment?: boolean;
          /**
           * Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.
           * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
           */
          readonly production_environment?: boolean;
          readonly created_at?: string;
        };
      };
    };
  };
  readonly "repos/get-deployment": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** deployment_id parameter */
        readonly deployment_id: components["parameters"]["deployment_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deployment"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * To ensure there can always be an active deployment, you can only delete an _inactive_ deployment. Anyone with `repo` or `repo_deployment` scopes can delete an inactive deployment.
   *
   * To set a deployment as inactive, you must:
   *
   * *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
   * *   Mark the active deployment as inactive by adding any non-successful deployment status.
   *
   * For more information, see "[Create a deployment](https://docs.github.com/rest/reference/repos/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/rest/reference/repos#create-a-deployment-status)."
   */
  readonly "repos/delete-deployment": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** deployment_id parameter */
        readonly deployment_id: components["parameters"]["deployment_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed_simple"];
    };
  };
  /** Users with pull access can view deployment statuses for a deployment: */
  readonly "repos/list-deployment-statuses": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** deployment_id parameter */
        readonly deployment_id: components["parameters"]["deployment_id"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["deployment-status"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Users with `push` access can create deployment statuses for a given deployment.
   *
   * GitHub Apps require `read & write` access to "Deployments" and `read-only` access to "Repo contents" (for private repos). OAuth Apps require the `repo_deployment` scope.
   */
  readonly "repos/create-deployment-status": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** deployment_id parameter */
        readonly deployment_id: components["parameters"]["deployment_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["deployment-status"];
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued` `pending`, or `success`. **Note:** To use the `inactive` state, you must provide the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type. To use the `in_progress` and `queued` states, you must provide the [`application/vnd.github.flash-preview+json`](https://docs.github.com/rest/overview/api-previews#deployment-statuses) custom media type. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub. */
          readonly state:
            | "error"
            | "failure"
            | "inactive"
            | "in_progress"
            | "queued"
            | "pending"
            | "success";
          /** The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`. */
          readonly target_url?: string;
          /**
           * The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
           * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
           */
          readonly log_url?: string;
          /** A short description of the status. The maximum description length is 140 characters. */
          readonly description?: string;
          /** Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. **Note:** This parameter requires you to use the [`application/vnd.github.flash-preview+json`](https://docs.github.com/rest/overview/api-previews#deployment-statuses) custom media type. */
          readonly environment?: "production" | "staging" | "qa";
          /**
           * Sets the URL for accessing your environment. Default: `""`
           * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type. **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
           */
          readonly environment_url?: string;
          /**
           * Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`
           * **Note:** To add an `inactive` status to `production` environments, you must use the [`application/vnd.github.flash-preview+json`](https://docs.github.com/rest/overview/api-previews#deployment-statuses) custom media type.
           * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
           */
          readonly auto_inactive?: boolean;
        };
      };
    };
  };
  /** Users with pull access can view a deployment status for a deployment: */
  readonly "repos/get-deployment-status": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** deployment_id parameter */
        readonly deployment_id: components["parameters"]["deployment_id"];
        readonly status_id: number;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deployment-status"];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 415: components["responses"]["preview_header_missing"];
    };
  };
  /**
   * You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch)."
   *
   * The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.
   *
   * This endpoint requires write access to the repository by providing either:
   *
   *   - Personal access tokens with `repo` scope. For more information, see "[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)" in the GitHub Help documentation.
   *   - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.
   *
   * This input example shows how you can use the `client_payload` as a test to debug your workflow.
   */
  readonly "repos/create-dispatch-event": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** A custom webhook event name. */
          readonly event_type: string;
          /** JSON payload with extra information about the webhook event that your action or worklow may use. */
          readonly client_payload?: { readonly [key: string]: any };
        };
      };
    };
  };
  /**
   * Get all environments for a repository.
   *
   * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   */
  readonly "repos/get-all-environments": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            /** The number of environments in this repository */
            readonly total_count?: number;
            readonly environments?: readonly components["schemas"]["environment"][];
          };
        };
      };
    };
  };
  /** Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. */
  readonly "repos/get-environment": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the environment */
        readonly environment_name: components["parameters"]["environment_name"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["environment"];
        };
      };
    };
  };
  /**
   * Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)."
   *
   * **Note:** Although you can use this operation to specify that only branches that match specified name patterns can deploy to this environment, you must use the UI to set the name patterns. For more information, see "[Environments](/actions/reference/environments#deployment-branches)."
   *
   * **Note:** To create or update secrets for an environment, see "[Secrets](/rest/reference/actions#secrets)."
   *
   * You must authenticate using an access token with the repo scope to use this endpoint.
   */
  readonly "repos/create-or-update-environment": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the environment */
        readonly environment_name: components["parameters"]["environment_name"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["environment"];
        };
      };
      /** Validation error when the environment name is invalid or when `protected_branches` and `custom_branch_policies` in `deployment_branch_policy` are set to the same value */
      readonly 422: {
        readonly content: {
          readonly "application/json": components["schemas"]["basic-error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          readonly wait_timer?: components["schemas"]["wait-timer"];
          /** The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed. */
          readonly reviewers?: readonly {
            readonly type?: components["schemas"]["deployment-reviewer-type"];
            /** The id of the user or team who can review the deployment */
            readonly id?: number;
          }[];
          readonly deployment_branch_policy?: components["schemas"]["deployment_branch_policy"];
        };
      };
    };
  };
  /** You must authenticate using an access token with the repo scope to use this endpoint. */
  readonly "repos/delete-an-environment": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The name of the environment */
        readonly environment_name: components["parameters"]["environment_name"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  readonly "activity/list-repo-events": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["event"][];
        };
      };
    };
  };
  readonly "repos/list-forks": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** The sort order. Can be either `newest`, `oldest`, or `stargazers`. */
        readonly sort?: "newest" | "oldest" | "stargazers";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["minimal-repository"][];
        };
      };
      readonly 400: components["responses"]["bad_request"];
    };
  };
  /**
   * Create a fork for the authenticated user.
   *
   * **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com).
   */
  readonly "repos/create-fork": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 202: {
        readonly content: {
          readonly "application/json": components["schemas"]["repository"];
        };
      };
      readonly 400: components["responses"]["bad_request"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Optional parameter to specify the organization name if forking into an organization. */
          readonly organization?: string;
        };
      };
    };
  };
  readonly "git/create-blob": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["short-blob"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 409: components["responses"]["conflict"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The new blob's content. */
          readonly content: string;
          /** The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported. */
          readonly encoding?: string;
        };
      };
    };
  };
  /**
   * The `content` in the response will always be Base64 encoded.
   *
   * _Note_: This API supports blobs up to 100 megabytes in size.
   */
  readonly "git/get-blob": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly file_sha: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["blob"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  /**
   * Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
   *
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   */
  readonly "git/create-commit": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["git-commit"];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The commit message */
          readonly message: string;
          /** The SHA of the tree object this commit points to */
          readonly tree: string;
          /** The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided. */
          readonly parents?: readonly string[];
          /** Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details. */
          readonly author?: {
            /** The name of the author (or committer) of the commit */
            readonly name?: string;
            /** The email of the author (or committer) of the commit */
            readonly email?: string;
            /** Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
            readonly date?: string;
          };
          /** Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details. */
          readonly committer?: {
            /** The name of the author (or committer) of the commit */
            readonly name?: string;
            /** The email of the author (or committer) of the commit */
            readonly email?: string;
            /** Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
            readonly date?: string;
          };
          /** The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits. */
          readonly signature?: string;
        };
      };
    };
  };
  /**
   * Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
   *
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   */
  readonly "git/get-commit": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** commit_sha parameter */
        readonly commit_sha: components["parameters"]["commit_sha"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["git-commit"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.
   *
   * When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.
   *
   * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
   *
   * If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
   */
  readonly "git/list-matching-refs": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** ref+ parameter */
        readonly ref: string;
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["git-ref"][];
        };
      };
    };
  };
  /**
   * Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.
   *
   * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
   */
  readonly "git/get-ref": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** ref+ parameter */
        readonly ref: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["git-ref"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches. */
  readonly "git/create-ref": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["git-ref"];
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected. */
          readonly ref: string;
          /** The SHA1 value for this reference. */
          readonly sha: string;
          readonly key?: string;
        };
      };
    };
  };
  readonly "git/delete-ref": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** ref+ parameter */
        readonly ref: string;
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  readonly "git/update-ref": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** ref+ parameter */
        readonly ref: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["git-ref"];
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The SHA1 value to set this reference to */
          readonly sha: string;
          /** Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work. */
          readonly force?: boolean;
        };
      };
    };
  };
  /**
   * Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/reference/git#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.
   *
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   */
  readonly "git/create-tag": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["git-tag"];
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The tag's name. This is typically a version (e.g., "v0.0.1"). */
          readonly tag: string;
          /** The tag message. */
          readonly message: string;
          /** The SHA of the git object this is tagging. */
          readonly object: string;
          /** The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`. */
          readonly type: "commit" | "tree" | "blob";
          /** An object with information about the individual creating the tag. */
          readonly tagger?: {
            /** The name of the author of the tag */
            readonly name?: string;
            /** The email of the author of the tag */
            readonly email?: string;
            /** When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
            readonly date?: string;
          };
        };
      };
    };
  };
  /**
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   */
  readonly "git/get-tag": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly tag_sha: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["git-tag"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.
   *
   * If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/rest/reference/git#create-a-commit)" and "[Update a reference](https://docs.github.com/rest/reference/git#update-a-reference)."
   */
  readonly "git/create-tree": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["git-tree"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure. */
          readonly tree: readonly {
            /** The file referenced in the tree. */
            readonly path?: string;
            /** The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink. */
            readonly mode?:
              | "100644"
              | "100755"
              | "040000"
              | "160000"
              | "120000";
            /** Either `blob`, `tree`, or `commit`. */
            readonly type?: "blob" | "tree" | "commit";
            /**
             * The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.
             *
             * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
             */
            readonly sha?: string | null;
            /**
             * The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.
             *
             * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
             */
            readonly content?: string;
          }[];
          /**
           * The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
           * If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.
           */
          readonly base_tree?: string;
        };
      };
    };
  };
  /**
   * Returns a single tree using the SHA1 value for that tree.
   *
   * If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
   */
  readonly "git/get-tree": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly tree_sha: string;
      };
      readonly query: {
        /** Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in `:tree_sha`. For example, setting `recursive` to any of the following will enable returning objects or subtrees: `0`, `1`, `"true"`, and `"false"`. Omit this parameter to prevent recursively returning objects or subtrees. */
        readonly recursive?: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["git-tree"];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  readonly "repos/list-webhooks": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["hook"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
   * share the same `config` as long as those webhooks do not have any `events` that overlap.
   */
  readonly "repos/create-webhook": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["hook"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`. */
          readonly name?: string;
          /** Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params). */
          readonly config: {
            readonly url: components["schemas"]["webhook-config-url"];
            readonly content_type?: components["schemas"]["webhook-config-content-type"];
            readonly secret?: components["schemas"]["webhook-config-secret"];
            readonly insecure_ssl?: components["schemas"]["webhook-config-insecure-ssl"];
            readonly token?: string;
            readonly digest?: string;
          };
          /** Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. */
          readonly events?: readonly string[];
          /** Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. */
          readonly active?: boolean;
        };
      };
    };
  };
  /** Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository)." */
  readonly "repos/get-webhook": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly hook_id: components["parameters"]["hook-id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["hook"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  readonly "repos/delete-webhook": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly hook_id: components["parameters"]["hook-id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository)." */
  readonly "repos/update-webhook": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly hook_id: components["parameters"]["hook-id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["hook"];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params). */
          readonly config?: {
            readonly url: components["schemas"]["webhook-config-url"];
            readonly content_type?: components["schemas"]["webhook-config-content-type"];
            readonly secret?: components["schemas"]["webhook-config-secret"];
            readonly insecure_ssl?: components["schemas"]["webhook-config-insecure-ssl"];
            readonly address?: string;
            readonly room?: string;
          };
          /** Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events. */
          readonly events?: readonly string[];
          /** Determines a list of events to be added to the list of events that the Hook triggers for. */
          readonly add_events?: readonly string[];
          /** Determines a list of events to be removed from the list of events that the Hook triggers for. */
          readonly remove_events?: readonly string[];
          /** Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications. */
          readonly active?: boolean;
        };
      };
    };
  };
  /**
   * Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook)."
   *
   * Access tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.
   */
  readonly "repos/get-webhook-config-for-repo": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly hook_id: components["parameters"]["hook-id"];
      };
    };
    readonly responses: {
      /** Default response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["webhook-config"];
        };
      };
    };
  };
  /**
   * Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook)."
   *
   * Access tokens must have the `write:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:write` permission.
   */
  readonly "repos/update-webhook-config-for-repo": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly hook_id: components["parameters"]["hook-id"];
      };
    };
    readonly responses: {
      /** Default response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["webhook-config"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          readonly url?: components["schemas"]["webhook-config-url"];
          readonly content_type?: components["schemas"]["webhook-config-content-type"];
          readonly secret?: components["schemas"]["webhook-config-secret"];
          readonly insecure_ssl?: components["schemas"]["webhook-config-insecure-ssl"];
        };
      };
    };
  };
  /** This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook. */
  readonly "repos/ping-webhook": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly hook_id: components["parameters"]["hook-id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.
   *
   * **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`
   */
  readonly "repos/test-push-webhook": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly hook_id: components["parameters"]["hook-id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * View the progress of an import.
   *
   * **Import status**
   *
   * This section includes details about the possible values of the `status` field of the Import Progress response.
   *
   * An import that does not have errors will progress through these steps:
   *
   * *   `detecting` - the "detection" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.
   * *   `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).
   * *   `mapping` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.
   * *   `pushing` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is "Writing objects".
   * *   `complete` - the import is complete, and the repository is ready on GitHub.
   *
   * If there are problems, you will see one of these in the `status` field:
   *
   * *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
   * *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact) or [GitHub Premium Support](https://premium.githubsupport.com) for more information.
   * *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
   * *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/reference/migrations#cancel-an-import) and [retry](https://docs.github.com/rest/reference/migrations#start-an-import) with the correct URL.
   * *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
   *
   * **The project_choices field**
   *
   * When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.
   *
   * **Git LFS related fields**
   *
   * This section includes details about Git LFS related fields that may be present in the Import Progress response.
   *
   * *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.
   * *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.
   * *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.
   * *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.
   */
  readonly "migrations/get-import-status": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["import"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Start a source import to a GitHub repository using GitHub Importer. */
  readonly "migrations/start-import": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["import"];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The URL of the originating repository. */
          readonly vcs_url: string;
          /** The originating VCS type. Can be one of `subversion`, `git`, `mercurial`, or `tfvc`. Please be aware that without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response. */
          readonly vcs?: "subversion" | "git" | "mercurial" | "tfvc";
          /** If authentication is required, the username to provide to `vcs_url`. */
          readonly vcs_username?: string;
          /** If authentication is required, the password to provide to `vcs_url`. */
          readonly vcs_password?: string;
          /** For a tfvc import, the name of the project that is being imported. */
          readonly tfvc_project?: string;
        };
      };
    };
  };
  /** Stop an import for a repository. */
  readonly "migrations/cancel-import": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API
   * request. If no parameters are provided, the import will be restarted.
   */
  readonly "migrations/update-import": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["import"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The username to provide to the originating repository. */
          readonly vcs_username?: string;
          /** The password to provide to the originating repository. */
          readonly vcs_password?: string;
          readonly vcs?: string;
          readonly tfvc_project?: string;
        };
      };
    };
  };
  /**
   * Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.
   *
   * This endpoint and the [Map a commit author](https://docs.github.com/rest/reference/migrations#map-a-commit-author) endpoint allow you to provide correct Git author information.
   */
  readonly "migrations/get-commit-authors": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** A user ID. Only return users with an ID greater than this ID. */
        readonly since?: components["parameters"]["since-user"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["porter-author"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository. */
  readonly "migrations/map-commit-author": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly author_id: number;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["porter-author"];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The new Git author email. */
          readonly email?: string;
          /** The new Git author name. */
          readonly name?: string;
          readonly remote_id?: string;
        };
      };
    };
  };
  /** List files larger than 100MB found during the import */
  readonly "migrations/get-large-files": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["porter-large-file"][];
        };
      };
    };
  };
  /** You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.github.com). You can learn more about our LFS feature and working with large files [on our help site](https://help.github.com/articles/versioning-large-files/). */
  readonly "migrations/set-lfs-preference": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["import"];
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Can be one of `opt_in` (large files will be stored using Git LFS) or `opt_out` (large files will be removed during the import). */
          readonly use_lfs: "opt_in" | "opt_out";
        };
      };
    };
  };
  /**
   * Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   */
  readonly "apps/get-repo-installation": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["installation"];
        };
      };
      readonly 301: components["responses"]["moved_permanently"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response. */
  readonly "interactions/get-restrictions-for-repo": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["interaction-limit-response"];
        };
      };
    };
  };
  /** Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository. */
  readonly "interactions/set-restrictions-for-repo": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["interaction-limit-response"];
        };
      };
      /** Conflict */
      readonly 409: unknown;
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["interaction-limit"];
      };
    };
  };
  /** Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository. */
  readonly "interactions/remove-restrictions-for-repo": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      /** Conflict */
      readonly 409: unknown;
    };
  };
  /** When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations. */
  readonly "repos/list-invitations": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["repository-invitation"][];
        };
      };
    };
  };
  readonly "repos/delete-invitation": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** invitation_id parameter */
        readonly invitation_id: components["parameters"]["invitation_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  readonly "repos/update-invitation": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** invitation_id parameter */
        readonly invitation_id: components["parameters"]["invitation_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["repository-invitation"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`. */
          readonly permissions?:
            | "read"
            | "write"
            | "maintain"
            | "triage"
            | "admin";
        };
      };
    };
  };
  /**
   * List issues in a repository.
   *
   * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
   * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
   * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
   * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
   */
  readonly "issues/list-for-repo": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** If an `integer` is passed, it should refer to a milestone by its `number` field. If the string `*` is passed, issues with any milestone are accepted. If the string `none` is passed, issues without milestones are returned. */
        readonly milestone?: string;
        /** Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`. */
        readonly state?: "open" | "closed" | "all";
        /** Can be the name of a user. Pass in `none` for issues with no assigned user, and `*` for issues assigned to any user. */
        readonly assignee?: string;
        /** The user that created the issue. */
        readonly creator?: string;
        /** A user that's mentioned in the issue. */
        readonly mentioned?: string;
        /** A list of comma separated label names. Example: `bug,ui,@high` */
        readonly labels?: components["parameters"]["labels"];
        /** What to sort results by. Can be either `created`, `updated`, `comments`. */
        readonly sort?: "created" | "updated" | "comments";
        /** One of `asc` (ascending) or `desc` (descending). */
        readonly direction?: components["parameters"]["direction"];
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components["parameters"]["since"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["issue-simple"][];
        };
      };
      readonly 301: components["responses"]["moved_permanently"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  /**
   * Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://help.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)" for details.
   */
  readonly "issues/create": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["issue"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 410: components["responses"]["gone"];
      readonly 422: components["responses"]["validation_failed"];
      readonly 503: components["responses"]["service_unavailable"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The title of the issue. */
          readonly title: string | number;
          /** The contents of the issue. */
          readonly body?: string;
          /** Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_ */
          readonly assignee?: string | null;
          readonly milestone?: (string | number) | null;
          /** Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._ */
          readonly labels?: readonly (
            | string
            | {
                readonly id?: number;
                readonly name?: string;
                readonly description?: string | null;
                readonly color?: string | null;
              }
          )[];
          /** Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._ */
          readonly assignees?: readonly string[];
        };
      };
    };
  };
  /** By default, Issue Comments are ordered by ascending ID. */
  readonly "issues/list-comments-for-repo": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** One of `created` (when the repository was starred) or `updated` (when it was last pushed to). */
        readonly sort?: components["parameters"]["sort"];
        /** Either `asc` or `desc`. Ignored without the `sort` parameter. */
        readonly direction?: "asc" | "desc";
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components["parameters"]["since"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["issue-comment"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  readonly "issues/get-comment": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** comment_id parameter */
        readonly comment_id: components["parameters"]["comment_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["issue-comment"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  readonly "issues/delete-comment": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** comment_id parameter */
        readonly comment_id: components["parameters"]["comment_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  readonly "issues/update-comment": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** comment_id parameter */
        readonly comment_id: components["parameters"]["comment_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["issue-comment"];
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The contents of the comment. */
          readonly body: string;
        };
      };
    };
  };
  /** List the reactions to an [issue comment](https://docs.github.com/rest/reference/issues#comments). */
  readonly "reactions/list-for-issue-comment": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** comment_id parameter */
        readonly comment_id: components["parameters"]["comment_id"];
      };
      readonly query: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue comment. */
        readonly content?:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["reaction"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 415: components["responses"]["preview_header_missing"];
    };
  };
  /** Create a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this issue comment. */
  readonly "reactions/create-for-issue-comment": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** comment_id parameter */
        readonly comment_id: components["parameters"]["comment_id"];
      };
    };
    readonly responses: {
      /** Reaction exists */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["reaction"];
        };
      };
      /** Reaction created */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["reaction"];
        };
      };
      readonly 415: components["responses"]["preview_header_missing"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue comment. */
          readonly content:
            | "+1"
            | "-1"
            | "laugh"
            | "confused"
            | "heart"
            | "hooray"
            | "rocket"
            | "eyes";
        };
      };
    };
  };
  /**
   * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.
   *
   * Delete a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
   */
  readonly "reactions/delete-for-issue-comment": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** comment_id parameter */
        readonly comment_id: components["parameters"]["comment_id"];
        readonly reaction_id: components["parameters"]["reaction-id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  readonly "issues/list-events-for-repo": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["issue-event"][];
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  readonly "issues/get-event": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly event_id: number;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["issue-event"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 410: components["responses"]["gone"];
    };
  };
  /**
   * The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
   * [transferred](https://help.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
   * the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
   * returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
   * access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
   * to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
   *
   * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
   * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
   * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
   * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
   */
  readonly "issues/get": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** issue_number parameter */
        readonly issue_number: components["parameters"]["issue_number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["issue"];
        };
      };
      readonly 301: components["responses"]["moved_permanently"];
      readonly 304: components["responses"]["not_modified"];
      readonly 404: components["responses"]["not_found"];
      readonly 410: components["responses"]["gone"];
    };
  };
  /** Issue owners and users with push access can edit an issue. */
  readonly "issues/update": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** issue_number parameter */
        readonly issue_number: components["parameters"]["issue_number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["issue"];
        };
      };
      readonly 301: components["responses"]["moved_permanently"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 410: components["responses"]["gone"];
      readonly 422: components["responses"]["validation_failed"];
      readonly 503: components["responses"]["service_unavailable"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The title of the issue. */
          readonly title?: (string | number) | null;
          /** The contents of the issue. */
          readonly body?: string | null;
          /** Login for the user that this issue should be assigned to. **This field is deprecated.** */
          readonly assignee?: string | null;
          /** State of the issue. Either `open` or `closed`. */
          readonly state?: "open" | "closed";
          readonly milestone?: (string | number) | null;
          /** Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._ */
          readonly labels?: readonly (
            | string
            | {
                readonly id?: number;
                readonly name?: string;
                readonly description?: string | null;
                readonly color?: string | null;
              }
          )[];
          /** Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._ */
          readonly assignees?: readonly string[];
        };
      };
    };
  };
  /** Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced. */
  readonly "issues/add-assignees": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** issue_number parameter */
        readonly issue_number: components["parameters"]["issue_number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["issue-simple"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._ */
          readonly assignees?: readonly string[];
        };
      };
    };
  };
  /** Removes one or more assignees from an issue. */
  readonly "issues/remove-assignees": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** issue_number parameter */
        readonly issue_number: components["parameters"]["issue_number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["issue-simple"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._ */
          readonly assignees?: readonly string[];
        };
      };
    };
  };
  /** Issue Comments are ordered by ascending ID. */
  readonly "issues/list-comments": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** issue_number parameter */
        readonly issue_number: components["parameters"]["issue_number"];
      };
      readonly query: {
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components["parameters"]["since"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["issue-comment"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 410: components["responses"]["gone"];
    };
  };
  /** This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)" for details. */
  readonly "issues/create-comment": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** issue_number parameter */
        readonly issue_number: components["parameters"]["issue_number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["issue-comment"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 410: components["responses"]["gone"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The contents of the comment. */
          readonly body: string;
        };
      };
    };
  };
  readonly "issues/list-events": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** issue_number parameter */
        readonly issue_number: components["parameters"]["issue_number"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["issue-event-for-issue"][];
        };
      };
      readonly 410: components["responses"]["gone"];
    };
  };
  readonly "issues/list-labels-on-issue": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** issue_number parameter */
        readonly issue_number: components["parameters"]["issue_number"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["label"][];
        };
      };
      readonly 410: components["responses"]["gone"];
    };
  };
  /** Removes any previous labels and sets the new labels for an issue. */
  readonly "issues/set-labels": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** issue_number parameter */
        readonly issue_number: components["parameters"]["issue_number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["label"][];
        };
      };
      readonly 410: components["responses"]["gone"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The names of the labels to add to the issue. You can pass an empty array to remove all labels. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. */
          readonly labels?: readonly string[];
        };
      };
    };
  };
  readonly "issues/add-labels": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** issue_number parameter */
        readonly issue_number: components["parameters"]["issue_number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["label"][];
        };
      };
      readonly 410: components["responses"]["gone"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The name of the label to add to the issue. Must contain at least one label. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. */
          readonly labels: readonly string[];
        };
      };
    };
  };
  readonly "issues/remove-all-labels": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** issue_number parameter */
        readonly issue_number: components["parameters"]["issue_number"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 410: components["responses"]["gone"];
    };
  };
  /** Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist. */
  readonly "issues/remove-label": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** issue_number parameter */
        readonly issue_number: components["parameters"]["issue_number"];
        readonly name: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["label"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 410: components["responses"]["gone"];
    };
  };
  /**
   * Users with push access can lock an issue or pull request's conversation.
   *
   * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
   */
  readonly "issues/lock": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** issue_number parameter */
        readonly issue_number: components["parameters"]["issue_number"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 410: components["responses"]["gone"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /**
           * The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
           * \* `off-topic`
           * \* `too heated`
           * \* `resolved`
           * \* `spam`
           */
          readonly lock_reason?:
            | "off-topic"
            | "too heated"
            | "resolved"
            | "spam";
        } | null;
      };
    };
  };
  /** Users with push access can unlock an issue's conversation. */
  readonly "issues/unlock": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** issue_number parameter */
        readonly issue_number: components["parameters"]["issue_number"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** List the reactions to an [issue](https://docs.github.com/rest/reference/issues). */
  readonly "reactions/list-for-issue": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** issue_number parameter */
        readonly issue_number: components["parameters"]["issue_number"];
      };
      readonly query: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to an issue. */
        readonly content?:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["reaction"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 410: components["responses"]["gone"];
      readonly 415: components["responses"]["preview_header_missing"];
    };
  };
  /** Create a reaction to an [issue](https://docs.github.com/rest/reference/issues/). A response with a `Status: 200 OK` means that you already added the reaction type to this issue. */
  readonly "reactions/create-for-issue": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** issue_number parameter */
        readonly issue_number: components["parameters"]["issue_number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["reaction"];
        };
      };
      readonly 415: components["responses"]["preview_header_missing"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue. */
          readonly content:
            | "+1"
            | "-1"
            | "laugh"
            | "confused"
            | "heart"
            | "hooray"
            | "rocket"
            | "eyes";
        };
      };
    };
  };
  /**
   * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.
   *
   * Delete a reaction to an [issue](https://docs.github.com/rest/reference/issues/).
   */
  readonly "reactions/delete-for-issue": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** issue_number parameter */
        readonly issue_number: components["parameters"]["issue_number"];
        readonly reaction_id: components["parameters"]["reaction-id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  readonly "issues/list-events-for-timeline": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** issue_number parameter */
        readonly issue_number: components["parameters"]["issue_number"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["issue-event-for-issue"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 410: components["responses"]["gone"];
      readonly 415: components["responses"]["preview_header_missing"];
    };
  };
  readonly "repos/list-deploy-keys": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["deploy-key"][];
        };
      };
    };
  };
  /** You can create a read-only deploy key. */
  readonly "repos/create-deploy-key": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["deploy-key"];
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** A name for the key. */
          readonly title?: string;
          /** The contents of the key. */
          readonly key: string;
          /**
           * If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.
           *
           * Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://help.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://help.github.com/articles/permission-levels-for-a-user-account-repository/)."
           */
          readonly read_only?: boolean;
        };
      };
    };
  };
  readonly "repos/get-deploy-key": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** key_id parameter */
        readonly key_id: components["parameters"]["key_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["deploy-key"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead. */
  readonly "repos/delete-deploy-key": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** key_id parameter */
        readonly key_id: components["parameters"]["key_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  readonly "issues/list-labels-for-repo": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["label"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  readonly "issues/create-label": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["label"];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see [emoji-cheat-sheet.com](http://emoji-cheat-sheet.com/). */
          readonly name: string;
          /** The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`. */
          readonly color?: string;
          /** A short description of the label. */
          readonly description?: string;
        };
      };
    };
  };
  readonly "issues/get-label": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly name: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["label"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  readonly "issues/delete-label": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly name: string;
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  readonly "issues/update-label": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly name: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["label"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see [emoji-cheat-sheet.com](http://emoji-cheat-sheet.com/). */
          readonly new_name?: string;
          /** The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`. */
          readonly color?: string;
          /** A short description of the label. */
          readonly description?: string;
        };
      };
    };
  };
  /** Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language. */
  readonly "repos/list-languages": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["language"];
        };
      };
    };
  };
  /**
   * This method returns the contents of the repository's license file, if one is detected.
   *
   * Similar to [Get repository content](https://docs.github.com/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.
   */
  readonly "licenses/get-for-repo": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["license-content"];
        };
      };
    };
  };
  readonly "repos/merge": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** Successful Response (The resulting merge commit) */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["commit"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      /** response */
      readonly 404: {
        readonly content: {
          readonly "application/json": {
            readonly message?: string;
            readonly documentation_url?: string;
          };
        };
      };
      /** Merge conflict response */
      readonly 409: {
        readonly content: {
          readonly "application/json": {
            readonly message?: string;
            readonly documentation_url?: string;
          };
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The name of the base branch that the head will be merged into. */
          readonly base: string;
          /** The head to merge. This can be a branch name or a commit SHA1. */
          readonly head: string;
          /** Commit message to use for the merge commit. If omitted, a default message will be used. */
          readonly commit_message?: string;
        };
      };
    };
  };
  readonly "issues/list-milestones": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** The state of the milestone. Either `open`, `closed`, or `all`. */
        readonly state?: "open" | "closed" | "all";
        /** What to sort results by. Either `due_on` or `completeness`. */
        readonly sort?: "due_on" | "completeness";
        /** The direction of the sort. Either `asc` or `desc`. */
        readonly direction?: "asc" | "desc";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["milestone"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  readonly "issues/create-milestone": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["milestone"];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The title of the milestone. */
          readonly title: string;
          /** The state of the milestone. Either `open` or `closed`. */
          readonly state?: "open" | "closed";
          /** A description of the milestone. */
          readonly description?: string;
          /** The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
          readonly due_on?: string;
        };
      };
    };
  };
  readonly "issues/get-milestone": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** milestone_number parameter */
        readonly milestone_number: components["parameters"]["milestone_number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["milestone"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  readonly "issues/delete-milestone": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** milestone_number parameter */
        readonly milestone_number: components["parameters"]["milestone_number"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 404: components["responses"]["not_found"];
    };
  };
  readonly "issues/update-milestone": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** milestone_number parameter */
        readonly milestone_number: components["parameters"]["milestone_number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["milestone"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The title of the milestone. */
          readonly title?: string;
          /** The state of the milestone. Either `open` or `closed`. */
          readonly state?: "open" | "closed";
          /** A description of the milestone. */
          readonly description?: string;
          /** The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
          readonly due_on?: string;
        };
      };
    };
  };
  readonly "issues/list-labels-for-milestone": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** milestone_number parameter */
        readonly milestone_number: components["parameters"]["milestone_number"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["label"][];
        };
      };
    };
  };
  /** List all notifications for the current user. */
  readonly "activity/list-repo-notifications-for-authenticated-user": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** If `true`, show notifications marked as read. */
        readonly all?: components["parameters"]["all"];
        /** If `true`, only shows notifications in which the user is directly participating or mentioned. */
        readonly participating?: components["parameters"]["participating"];
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components["parameters"]["since"];
        /** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly before?: components["parameters"]["before"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["thread"][];
        };
      };
    };
  };
  /** Marks all notifications in a repository as "read" removes them from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`. */
  readonly "activity/mark-repo-notifications-as-read": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 202: unknown;
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp. */
          readonly last_read_at?: string;
        };
      };
    };
  };
  readonly "repos/get-pages": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["page"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Updates information for a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages). */
  readonly "repos/update-information-about-pages-site": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 400: components["responses"]["bad_request"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Specify a custom domain for the repository. Sending a `null` value will remove the custom domain. For more about custom domains, see "[Using a custom domain with GitHub Pages](https://help.github.com/articles/using-a-custom-domain-with-github-pages/)." */
          readonly cname?: string | null;
          /** Configures access controls for the GitHub Pages site. If public is set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site. This includes anyone in your Enterprise if the repository is set to `internal` visibility. This feature is only available to repositories in an organization on an Enterprise plan. */
          readonly public?: boolean;
          readonly source: Partial<"gh-pages" | "master" | "master /docs"> &
            Partial<{
              /** The repository branch used to publish your site's source files. */
              readonly branch: string;
              /** The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. */
              readonly path: "/" | "/docs";
            }>;
        };
      };
    };
  };
  /** Configures a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)." */
  readonly "repos/create-pages-site": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["page"];
        };
      };
      readonly 409: components["responses"]["conflict"];
      readonly 415: components["responses"]["preview_header_missing"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The source branch and directory used to publish your Pages site. */
          readonly source: {
            /** The repository branch used to publish your site's source files. */
            readonly branch: string;
            /** The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/` */
            readonly path?: "/" | "/docs";
          };
        };
      };
    };
  };
  readonly "repos/delete-pages-site": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 404: components["responses"]["not_found"];
      readonly 415: components["responses"]["preview_header_missing"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  readonly "repos/list-pages-builds": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["page-build"][];
        };
      };
    };
  };
  /**
   * You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
   *
   * Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
   */
  readonly "repos/request-pages-build": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["page-build-status"];
        };
      };
    };
  };
  readonly "repos/get-latest-pages-build": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["page-build"];
        };
      };
    };
  };
  readonly "repos/get-pages-build": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly build_id: number;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["page-build"];
        };
      };
    };
  };
  /** Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
  readonly "projects/list-for-repo": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`. */
        readonly state?: "open" | "closed" | "all";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["project"][];
        };
      };
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 410: components["responses"]["gone"];
      readonly 422: components["responses"]["validation_failed_simple"];
    };
  };
  /** Creates a repository project board. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned. */
  readonly "projects/create-for-repo": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["project"];
        };
      };
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 410: components["responses"]["gone"];
      readonly 422: components["responses"]["validation_failed_simple"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The name of the project. */
          readonly name: string;
          /** The description of the project. */
          readonly body?: string;
        };
      };
    };
  };
  /** Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation. */
  readonly "pulls/list": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** Either `open`, `closed`, or `all` to filter by state. */
        readonly state?: "open" | "closed" | "all";
        /** Filter pulls by head user or head organization and branch name in the format of `user:ref-name` or `organization:ref-name`. For example: `github:new-script-format` or `octocat:test-branch`. */
        readonly head?: string;
        /** Filter pulls by base branch name. Example: `gh-pages`. */
        readonly base?: string;
        /** What to sort results by. Can be either `created`, `updated`, `popularity` (comment count) or `long-running` (age, filtering by pulls updated in the last month). */
        readonly sort?: "created" | "updated" | "popularity" | "long-running";
        /** The direction of the sort. Can be either `asc` or `desc`. Default: `desc` when sort is `created` or sort is not specified, otherwise `asc`. */
        readonly direction?: "asc" | "desc";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["pull-request-simple"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  /**
   * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
   *
   * You can create a new pull request.
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
   */
  readonly "pulls/create": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["pull-request"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The title of the new pull request. */
          readonly title?: string;
          /** The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`. */
          readonly head: string;
          /** The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository. */
          readonly base: string;
          /** The contents of the pull request. */
          readonly body?: string;
          /** Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. */
          readonly maintainer_can_modify?: boolean;
          /** Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://help.github.com/en/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more. */
          readonly draft?: boolean;
          readonly issue?: number;
        };
      };
    };
  };
  /** Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID. */
  readonly "pulls/list-review-comments-for-repo": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** One of `created` (when the repository was starred) or `updated` (when it was last pushed to). */
        readonly sort?: components["parameters"]["sort"];
        /** Can be either `asc` or `desc`. Ignored without `sort` parameter. */
        readonly direction?: "asc" | "desc";
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components["parameters"]["since"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["pull-request-review-comment"][];
        };
      };
    };
  };
  /** Provides details for a review comment. */
  readonly "pulls/get-review-comment": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** comment_id parameter */
        readonly comment_id: components["parameters"]["comment_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["pull-request-review-comment"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Deletes a review comment. */
  readonly "pulls/delete-review-comment": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** comment_id parameter */
        readonly comment_id: components["parameters"]["comment_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Enables you to edit a review comment. */
  readonly "pulls/update-review-comment": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** comment_id parameter */
        readonly comment_id: components["parameters"]["comment_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["pull-request-review-comment"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The text of the reply to the review comment. */
          readonly body: string;
        };
      };
    };
  };
  /** List the reactions to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments). */
  readonly "reactions/list-for-pull-request-review-comment": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** comment_id parameter */
        readonly comment_id: components["parameters"]["comment_id"];
      };
      readonly query: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a pull request review comment. */
        readonly content?:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["reaction"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 415: components["responses"]["preview_header_missing"];
    };
  };
  /** Create a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#comments). A response with a `Status: 200 OK` means that you already added the reaction type to this pull request review comment. */
  readonly "reactions/create-for-pull-request-review-comment": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** comment_id parameter */
        readonly comment_id: components["parameters"]["comment_id"];
      };
    };
    readonly responses: {
      /** Reaction exists */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["reaction"];
        };
      };
      /** Reaction created */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["reaction"];
        };
      };
      readonly 415: components["responses"]["preview_header_missing"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the pull request review comment. */
          readonly content:
            | "+1"
            | "-1"
            | "laugh"
            | "confused"
            | "heart"
            | "hooray"
            | "rocket"
            | "eyes";
        };
      };
    };
  };
  /**
   * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`
   *
   * Delete a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
   */
  readonly "reactions/delete-for-pull-request-comment": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** comment_id parameter */
        readonly comment_id: components["parameters"]["comment_id"];
        readonly reaction_id: components["parameters"]["reaction-id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Lists details of a pull request by providing its number.
   *
   * When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
   *
   * The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
   *
   * The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
   *
   * *   If merged as a [merge commit](https://help.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
   * *   If merged via a [squash](https://help.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
   * *   If [rebased](https://help.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
   *
   * Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
   */
  readonly "pulls/get": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly pull_number: components["parameters"]["pull-number"];
      };
    };
    readonly responses: {
      /** Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["pull-request"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 404: components["responses"]["not_found"];
      readonly 500: components["responses"]["internal_error"];
    };
  };
  /**
   * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
   */
  readonly "pulls/update": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly pull_number: components["parameters"]["pull-number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["pull-request"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The title of the pull request. */
          readonly title?: string;
          /** The contents of the pull request. */
          readonly body?: string;
          /** State of this Pull Request. Either `open` or `closed`. */
          readonly state?: "open" | "closed";
          /** The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository. */
          readonly base?: string;
          /** Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request. */
          readonly maintainer_can_modify?: boolean;
        };
      };
    };
  };
  /** Lists all review comments for a pull request. By default, review comments are in ascending order by ID. */
  readonly "pulls/list-review-comments": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly pull_number: components["parameters"]["pull-number"];
      };
      readonly query: {
        /** One of `created` (when the repository was starred) or `updated` (when it was last pushed to). */
        readonly sort?: components["parameters"]["sort"];
        /** Can be either `asc` or `desc`. Ignored without `sort` parameter. */
        readonly direction?: "asc" | "desc";
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components["parameters"]["since"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["pull-request-review-comment"][];
        };
      };
    };
  };
  /**
   * Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/rest/reference/issues#create-an-issue-comment)." We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.
   *
   * You can still create a review comment using the `position` parameter. When you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required. For more information, see the [`comfort-fade` preview notice](https://docs.github.com/rest/reference/pulls#create-a-review-comment-for-a-pull-request-preview-notices).
   *
   * **Note:** The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
   */
  readonly "pulls/create-review-comment": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly pull_number: components["parameters"]["pull-number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["pull-request-review-comment"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The text of the review comment. */
          readonly body: string;
          /** The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`. */
          readonly commit_id?: string;
          /** The relative path to the file that necessitates a comment. */
          readonly path?: string;
          /** **Required without `comfort-fade` preview**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above. */
          readonly position?: number;
          /** **Required with `comfort-fade` preview**. In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://help.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation. */
          readonly side?: "LEFT" | "RIGHT";
          /** **Required with `comfort-fade` preview**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to. */
          readonly line?: number;
          /** **Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. */
          readonly start_line?: number;
          /** **Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context. */
          readonly start_side?: "LEFT" | "RIGHT" | "side";
          readonly in_reply_to?: number;
        };
      };
    };
  };
  /**
   * Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
   */
  readonly "pulls/create-reply-for-review-comment": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly pull_number: components["parameters"]["pull-number"];
        /** comment_id parameter */
        readonly comment_id: components["parameters"]["comment_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["pull-request-review-comment"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The text of the review comment. */
          readonly body: string;
        };
      };
    };
  };
  /** Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint. */
  readonly "pulls/list-commits": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly pull_number: components["parameters"]["pull-number"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["commit"][];
        };
      };
    };
  };
  /** **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default. */
  readonly "pulls/list-files": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly pull_number: components["parameters"]["pull-number"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["diff-entry"][];
        };
      };
      readonly 422: components["responses"]["validation_failed"];
      readonly 500: components["responses"]["internal_error"];
    };
  };
  readonly "pulls/check-if-merged": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly pull_number: components["parameters"]["pull-number"];
      };
    };
    readonly responses: {
      /** Response if pull request has been merged */
      readonly 204: never;
      /** Response if pull request has not been merged */
      readonly 404: unknown;
    };
  };
  /** This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)" for details. */
  readonly "pulls/merge": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly pull_number: components["parameters"]["pull-number"];
      };
    };
    readonly responses: {
      /** Response if merge was successful */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["pull-request-merge-result"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      /** Response if merge cannot be performed */
      readonly 405: {
        readonly content: {
          readonly "application/json": {
            readonly message?: string;
            readonly documentation_url?: string;
          };
        };
      };
      /** Response if sha was provided and pull request head did not match */
      readonly 409: {
        readonly content: {
          readonly "application/json": {
            readonly message?: string;
            readonly documentation_url?: string;
          };
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Title for the automatic commit message. */
          readonly commit_title?: string;
          /** Extra detail to append to automatic commit message. */
          readonly commit_message?: string;
          /** SHA that pull request head must match to allow merge. */
          readonly sha?: string;
          /** Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`. */
          readonly merge_method?: "merge" | "squash" | "rebase";
        } | null;
      };
    };
  };
  readonly "pulls/list-requested-reviewers": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly pull_number: components["parameters"]["pull-number"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": components["schemas"]["pull-request-review-request"];
        };
      };
    };
  };
  /** This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-abuse-rate-limits)" for details. */
  readonly "pulls/request-reviewers": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly pull_number: components["parameters"]["pull-number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["pull-request-simple"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      /** Response if user is not a collaborator */
      readonly 422: unknown;
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** An array of user `login`s that will be requested. */
          readonly reviewers?: readonly string[];
          /** An array of team `slug`s that will be requested. */
          readonly team_reviewers?: readonly string[];
        };
      };
    };
  };
  readonly "pulls/remove-requested-reviewers": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly pull_number: components["parameters"]["pull-number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: unknown;
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** An array of user `login`s that will be removed. */
          readonly reviewers: readonly string[];
          /** An array of team `slug`s that will be removed. */
          readonly team_reviewers?: readonly string[];
        };
      };
    };
  };
  /** The list of reviews returns in chronological order. */
  readonly "pulls/list-reviews": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly pull_number: components["parameters"]["pull-number"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** The list of reviews returns in chronological order. */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["pull-request-review"][];
        };
      };
    };
  };
  /**
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
   *
   * Pull request reviews created in the `PENDING` state do not include the `submitted_at` property in the response.
   *
   * **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) endpoint.
   *
   * The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
   */
  readonly "pulls/create-review": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly pull_number: components["parameters"]["pull-number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["pull-request-review"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 422: components["responses"]["validation_failed_simple"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value. */
          readonly commit_id?: string;
          /** **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review. */
          readonly body?: string;
          /** The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/reference/pulls#submit-a-review-for-a-pull-request) when you are ready. */
          readonly event?: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
          /** Use the following table to specify the location, destination, and contents of the draft review comment. */
          readonly comments?: readonly {
            /** The relative path to the file that necessitates a review comment. */
            readonly path: string;
            /** The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below. */
            readonly position?: number;
            /** Text of the review comment. */
            readonly body: string;
            readonly line?: number;
            readonly side?: string;
            readonly start_line?: number;
            readonly start_side?: string;
          }[];
        };
      };
    };
  };
  readonly "pulls/get-review": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly pull_number: components["parameters"]["pull-number"];
        /** review_id parameter */
        readonly review_id: components["parameters"]["review_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["pull-request-review"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Update the review summary comment with new text. */
  readonly "pulls/update-review": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly pull_number: components["parameters"]["pull-number"];
        /** review_id parameter */
        readonly review_id: components["parameters"]["review_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["pull-request-review"];
        };
      };
      readonly 422: components["responses"]["validation_failed_simple"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The body text of the pull request review. */
          readonly body: string;
        };
      };
    };
  };
  readonly "pulls/delete-pending-review": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly pull_number: components["parameters"]["pull-number"];
        /** review_id parameter */
        readonly review_id: components["parameters"]["review_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["pull-request-review"];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed_simple"];
    };
  };
  /** List comments for a specific pull request review. */
  readonly "pulls/list-comments-for-review": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly pull_number: components["parameters"]["pull-number"];
        /** review_id parameter */
        readonly review_id: components["parameters"]["review_id"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["review-comment"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews. */
  readonly "pulls/dismiss-review": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly pull_number: components["parameters"]["pull-number"];
        /** review_id parameter */
        readonly review_id: components["parameters"]["review_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["pull-request-review"];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed_simple"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The message for the pull request review dismissal */
          readonly message: string;
          readonly event?: string;
        };
      };
    };
  };
  readonly "pulls/submit-review": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly pull_number: components["parameters"]["pull-number"];
        /** review_id parameter */
        readonly review_id: components["parameters"]["review_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["pull-request-review"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed_simple"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The body text of the pull request review */
          readonly body?: string;
          /** The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action. */
          readonly event: "APPROVE" | "REQUEST_CHANGES" | "COMMENT";
        };
      };
    };
  };
  /** Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch. */
  readonly "pulls/update-branch": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly pull_number: components["parameters"]["pull-number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 202: {
        readonly content: {
          readonly "application/json": {
            readonly message?: string;
            readonly url?: string;
          };
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 415: components["responses"]["preview_header_missing"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/rest/reference/repos#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref. */
          readonly expected_head_sha?: string;
        } | null;
      };
    };
  };
  /**
   * Gets the preferred README for a repository.
   *
   * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
   */
  readonly "repos/get-readme": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** The name of the commit/branch/tag. Default: the repository’s default branch (usually `master`) */
        readonly ref?: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["content-file"];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  /**
   * This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).
   *
   * Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
   */
  readonly "repos/list-releases": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["release"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Users with push access to the repository can create a release.
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
   */
  readonly "repos/create-release": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["release"];
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The name of the tag. */
          readonly tag_name: string;
          /** Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`). */
          readonly target_commitish?: string;
          /** The name of the release. */
          readonly name?: string;
          /** Text describing the contents of the tag. */
          readonly body?: string;
          /** `true` to create a draft (unpublished) release, `false` to create a published one. */
          readonly draft?: boolean;
          /** `true` to identify the release as a prerelease. `false` to identify the release as a full release. */
          readonly prerelease?: boolean;
        };
      };
    };
  };
  /** To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response. */
  readonly "repos/get-release-asset": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** asset_id parameter */
        readonly asset_id: components["parameters"]["asset_id"];
      };
    };
    readonly responses: {
      /** To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["release-asset"];
        };
      };
      readonly 302: components["responses"]["found"];
      readonly 404: components["responses"]["not_found"];
      readonly 415: components["responses"]["preview_header_missing"];
    };
  };
  readonly "repos/delete-release-asset": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** asset_id parameter */
        readonly asset_id: components["parameters"]["asset_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /** Users with push access to the repository can edit a release asset. */
  readonly "repos/update-release-asset": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** asset_id parameter */
        readonly asset_id: components["parameters"]["asset_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["release-asset"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The file name of the asset. */
          readonly name?: string;
          /** An alternate short description of the asset. Used in place of the filename. */
          readonly label?: string;
          readonly state?: string;
        };
      };
    };
  };
  /**
   * View the latest published full release for the repository.
   *
   * The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
   */
  readonly "repos/get-latest-release": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["release"];
        };
      };
    };
  };
  /** Get a published release with the specified tag. */
  readonly "repos/get-release-by-tag": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** tag+ parameter */
        readonly tag: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["release"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia). */
  readonly "repos/get-release": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** release_id parameter */
        readonly release_id: components["parameters"]["release_id"];
      };
    };
    readonly responses: {
      /** **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia). */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["release"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Users with push access to the repository can delete a release. */
  readonly "repos/delete-release": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** release_id parameter */
        readonly release_id: components["parameters"]["release_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /** Users with push access to the repository can edit a release. */
  readonly "repos/update-release": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** release_id parameter */
        readonly release_id: components["parameters"]["release_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["release"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The name of the tag. */
          readonly tag_name?: string;
          /** Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`). */
          readonly target_commitish?: string;
          /** The name of the release. */
          readonly name?: string;
          /** Text describing the contents of the tag. */
          readonly body?: string;
          /** `true` makes the release a draft, and `false` publishes the release. */
          readonly draft?: boolean;
          /** `true` to identify the release as a prerelease, `false` to identify the release as a full release. */
          readonly prerelease?: boolean;
        };
      };
    };
  };
  readonly "repos/list-release-assets": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** release_id parameter */
        readonly release_id: components["parameters"]["release_id"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["release-asset"][];
        };
      };
    };
  };
  /**
   * This endpoint makes use of [a Hypermedia relation](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in
   * the response of the [Create a release endpoint](https://docs.github.com/rest/reference/repos#create-a-release) to upload a release asset.
   *
   * You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.
   *
   * Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:
   *
   * `application/zip`
   *
   * GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
   * you'll still need to pass your authentication to be able to upload an asset.
   *
   * When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.
   *
   * **Notes:**
   * *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List assets for a release](https://docs.github.com/rest/reference/repos#list-assets-for-a-release)"
   * endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact).
   * *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
   */
  readonly "repos/upload-release-asset": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** release_id parameter */
        readonly release_id: components["parameters"]["release_id"];
      };
      readonly query: {
        readonly name?: string;
        readonly label?: string;
      };
    };
    readonly responses: {
      /** Response for successful upload */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["release-asset"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "*/*": string;
      };
    };
  };
  /**
   * Lists all secret scanning alerts for a private repository, from newest to oldest. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
   *
   * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
   */
  readonly "secret-scanning/list-alerts-for-repo": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** Set to `open` or `resolved` to only list secret scanning alerts in a specific state. */
        readonly state?: "open" | "resolved";
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
      };
    };
    readonly responses: {
      /** Response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["secret-scanning-alert"][];
        };
      };
      /** Repository is public or secret scanning is disabled for the repository */
      readonly 404: unknown;
      readonly 503: components["responses"]["service_unavailable"];
    };
  };
  /**
   * Gets a single secret scanning alert detected in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
   *
   * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
   */
  readonly "secret-scanning/get-alert": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
        readonly alert_number: components["parameters"]["alert_number"];
      };
    };
    readonly responses: {
      /** Default response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["secret-scanning-alert"];
        };
      };
      /** Repository is public, or secret scanning is disabled for the repository, or the resource is not found */
      readonly 404: unknown;
      readonly 503: components["responses"]["service_unavailable"];
    };
  };
  /**
   * Updates the status of a secret scanning alert in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
   *
   * GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.
   */
  readonly "secret-scanning/update-alert": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        /** The number that identifies an alert. You can find this at the end of the URL for a code scanning alert within GitHub, and in the `number` field in the response from the `GET /repos/{owner}/{repo}/code-scanning/alerts` operation. */
        readonly alert_number: components["parameters"]["alert_number"];
      };
    };
    readonly responses: {
      /** Default response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["secret-scanning-alert"];
        };
      };
      /** Repository is public, or secret scanning is disabled for the repository, or the resource is not found */
      readonly 404: unknown;
      /** State does not match the resolution */
      readonly 422: unknown;
      readonly 503: components["responses"]["service_unavailable"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          readonly state: components["schemas"]["secret-scanning-alert-state"];
          readonly resolution?: components["schemas"]["secret-scanning-alert-resolution"];
        };
      };
    };
  };
  /**
   * Lists the people that have starred the repository.
   *
   * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
   */
  readonly "activity/list-stargazers-for-repo": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["simple-user"][];
          readonly "application/vnd.github.v3.star+json": readonly components["schemas"]["stargazer"][];
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  /** Returns a weekly aggregate of the number of additions and deletions pushed to a repository. */
  readonly "repos/get-code-frequency-stats": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** Returns a weekly aggregate of the number of additions and deletions pushed to a repository. */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["code-frequency-stat"][];
        };
      };
    };
  };
  /** Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`. */
  readonly "repos/get-commit-activity-stats": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["commit-activity"][];
        };
      };
    };
  };
  /**
   * Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:
   *
   * *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
   * *   `a` - Number of additions
   * *   `d` - Number of deletions
   * *   `c` - Number of commits
   */
  readonly "repos/get-contributors-stats": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /**
       * *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
       * *   `a` - Number of additions
       * *   `d` - Number of deletions
       * *   `c` - Number of commits
       */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["contributor-activity"][];
        };
      };
    };
  };
  /**
   * Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
   *
   * The array order is oldest week (index 0) to most recent week.
   */
  readonly "repos/get-participation-stats": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** The array order is oldest week (index 0) to most recent week. */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["participation-stats"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Each array contains the day number, hour number, and number of commits:
   *
   * *   `0-6`: Sunday - Saturday
   * *   `0-23`: Hour of day
   * *   Number of commits
   *
   * For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
   */
  readonly "repos/get-punch-card-stats": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits. */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["code-frequency-stat"][];
        };
      };
    };
  };
  /**
   * Users with push access in a repository can create commit statuses for a given SHA.
   *
   * Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
   */
  readonly "repos/create-commit-status": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly sha: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["status"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The state of the status. Can be one of `error`, `failure`, `pending`, or `success`. */
          readonly state: "error" | "failure" | "pending" | "success";
          /**
           * The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.
           * For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:
           * `http://ci.example.com/user/repo/build/sha`
           */
          readonly target_url?: string;
          /** A short description of the status. */
          readonly description?: string;
          /** A string label to differentiate this status from the status of other systems. This field is case-insensitive. */
          readonly context?: string;
        };
      };
    };
  };
  /** Lists the people watching the specified repository. */
  readonly "activity/list-watchers-for-repo": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["simple-user"][];
        };
      };
    };
  };
  readonly "activity/get-repo-subscription": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** Response if you subscribe to the repository */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["repository-subscription"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      /** Response if you don't subscribe to the repository */
      readonly 404: unknown;
    };
  };
  /** If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/reference/activity#delete-a-repository-subscription) completely. */
  readonly "activity/set-repo-subscription": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["repository-subscription"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Determines if notifications should be received from this repository. */
          readonly subscribed?: boolean;
          /** Determines if all notifications should be blocked from this repository. */
          readonly ignored?: boolean;
        };
      };
    };
  };
  /** This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/reference/activity#set-a-repository-subscription). */
  readonly "activity/delete-repo-subscription": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  readonly "repos/list-tags": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["tag"][];
        };
      };
    };
  };
  /**
   * Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
   * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
   * the `Location` header to make a second `GET` request.
   * **Note**: For private repositories, these links are temporary and expire after five minutes.
   */
  readonly "repos/download-tarball-archive": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly ref: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 302: never;
    };
  };
  readonly "repos/list-teams": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["team"][];
        };
      };
    };
  };
  readonly "repos/get-all-topics": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["topic"];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 415: components["responses"]["preview_header_missing"];
    };
  };
  readonly "repos/replace-all-topics": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["topic"];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 415: components["responses"]["preview_header_missing"];
      readonly 422: components["responses"]["validation_failed_simple"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters. */
          readonly names: readonly string[];
        };
      };
    };
  };
  /** Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday. */
  readonly "repos/get-clones": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** Must be one of: `day`, `week`. */
        readonly per?: components["parameters"]["per"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["clone-traffic"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
    };
  };
  /** Get the top 10 popular contents over the last 14 days. */
  readonly "repos/get-top-paths": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["content-traffic"][];
        };
      };
      readonly 403: components["responses"]["forbidden"];
    };
  };
  /** Get the top 10 referrers over the last 14 days. */
  readonly "repos/get-top-referrers": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["referrer-traffic"][];
        };
      };
      readonly 403: components["responses"]["forbidden"];
    };
  };
  /** Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday. */
  readonly "repos/get-views": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
      readonly query: {
        /** Must be one of: `day`, `week`. */
        readonly per?: components["parameters"]["per"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["view-traffic"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
    };
  };
  /** A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://help.github.com/articles/about-repository-transfers/). */
  readonly "repos/transfer": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 202: {
        readonly content: {
          readonly "application/json": components["schemas"]["repository"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The username or organization name the repository will be transferred to. */
          readonly new_owner: string;
          /** ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories. */
          readonly team_ids?: readonly number[];
        };
      };
    };
  };
  /** Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)". */
  readonly "repos/check-vulnerability-alerts": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** Response if repository is enabled with vulnerability alerts */
      readonly 204: never;
      /** Response if repository is not enabled with vulnerability alerts */
      readonly 404: unknown;
    };
  };
  /** Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)". */
  readonly "repos/enable-vulnerability-alerts": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /** Disables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)". */
  readonly "repos/disable-vulnerability-alerts": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
   * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
   * the `Location` header to make a second `GET` request.
   * **Note**: For private repositories, these links are temporary and expire after five minutes.
   */
  readonly "repos/download-zipball-archive": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
        readonly ref: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 302: never;
    };
  };
  /**
   * Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/reference/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.
   *
   * **OAuth scope requirements**
   *
   * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
   *
   * *   `public_repo` scope or `repo` scope to create a public repository
   * *   `repo` scope to create a private repository
   */
  readonly "repos/create-using-template": {
    readonly parameters: {
      readonly path: {
        readonly template_owner: string;
        readonly template_repo: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["repository"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization. */
          readonly owner?: string;
          /** The name of the new repository. */
          readonly name: string;
          /** A short description of the new repository. */
          readonly description?: string;
          /** Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`. */
          readonly include_all_branches?: boolean;
          /** Either `true` to create a new private repository or `false` to create a new public one. */
          readonly private?: boolean;
        };
      };
    };
  };
  /**
   * Lists all public repositories in the order that they were created.
   *
   * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
   */
  readonly "repos/list-public": {
    readonly parameters: {
      readonly query: {
        /** A repository ID. Only return repositories with an ID greater than this ID. */
        readonly since?: components["parameters"]["since-repo"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {
          readonly Link?: string;
        };
        readonly content: {
          readonly "application/json": readonly components["schemas"]["minimal-repository"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  /** Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
  readonly "actions/list-environment-secrets": {
    readonly parameters: {
      readonly path: {
        readonly repository_id: components["parameters"]["repository_id"];
        /** The name of the environment */
        readonly environment_name: components["parameters"]["environment_name"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly secrets: readonly components["schemas"]["actions-secret"][];
          };
        };
      };
    };
  };
  /** Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
  readonly "actions/get-environment-public-key": {
    readonly parameters: {
      readonly path: {
        readonly repository_id: components["parameters"]["repository_id"];
        /** The name of the environment */
        readonly environment_name: components["parameters"]["environment_name"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["actions-public-key"];
        };
      };
    };
  };
  /** Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
  readonly "actions/get-environment-secret": {
    readonly parameters: {
      readonly path: {
        readonly repository_id: components["parameters"]["repository_id"];
        /** The name of the environment */
        readonly environment_name: components["parameters"]["environment_name"];
        /** secret_name parameter */
        readonly secret_name: components["parameters"]["secret_name"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["actions-secret"];
        };
      };
    };
  };
  /**
   * Creates or updates an environment secret with an encrypted value. Encrypt your secret using
   * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
   * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
   * this endpoint.
   *
   * #### Example encrypting a secret using Node.js
   *
   * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
   *
   * ```
   * const sodium = require('tweetsodium');
   *
   * const key = "base64-encoded-public-key";
   * const value = "plain-text-secret";
   *
   * // Convert the message and key to Uint8Array's (Buffer implements that interface)
   * const messageBytes = Buffer.from(value);
   * const keyBytes = Buffer.from(key, 'base64');
   *
   * // Encrypt using LibSodium.
   * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
   *
   * // Base64 the encrypted secret
   * const encrypted = Buffer.from(encryptedBytes).toString('base64');
   *
   * console.log(encrypted);
   * ```
   *
   *
   * #### Example encrypting a secret using Python
   *
   * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.
   *
   * ```
   * from base64 import b64encode
   * from nacl import encoding, public
   *
   * def encrypt(public_key: str, secret_value: str) -> str:
   *   """Encrypt a Unicode string using the public key."""
   *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
   *   sealed_box = public.SealedBox(public_key)
   *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
   *   return b64encode(encrypted).decode("utf-8")
   * ```
   *
   * #### Example encrypting a secret using C#
   *
   * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
   *
   * ```
   * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
   * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
   *
   * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
   *
   * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
   * ```
   *
   * #### Example encrypting a secret using Ruby
   *
   * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
   *
   * ```ruby
   * require "rbnacl"
   * require "base64"
   *
   * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
   * public_key = RbNaCl::PublicKey.new(key)
   *
   * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
   * encrypted_secret = box.encrypt("my_secret")
   *
   * # Print the base64 encoded secret
   * puts Base64.strict_encode64(encrypted_secret)
   * ```
   */
  readonly "actions/create-or-update-environment-secret": {
    readonly parameters: {
      readonly path: {
        readonly repository_id: components["parameters"]["repository_id"];
        /** The name of the environment */
        readonly environment_name: components["parameters"]["environment_name"];
        /** secret_name parameter */
        readonly secret_name: components["parameters"]["secret_name"];
      };
    };
    readonly responses: {
      /** Response when creating a secret */
      readonly 201: unknown;
      /** Response when updating a secret */
      readonly 204: never;
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/reference/actions#get-an-environment-public-key) endpoint. */
          readonly encrypted_value?: string;
          /** ID of the key you used to encrypt the secret. */
          readonly key_id?: string;
        };
      };
    };
  };
  /** Deletes a secret in an environment using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint. */
  readonly "actions/delete-environment-secret": {
    readonly parameters: {
      readonly path: {
        readonly repository_id: components["parameters"]["repository_id"];
        /** The name of the environment */
        readonly environment_name: components["parameters"]["environment_name"];
        /** secret_name parameter */
        readonly secret_name: components["parameters"]["secret_name"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */
  readonly "enterprise-admin/list-provisioned-groups-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
      };
      readonly query: {
        /** Used for pagination: the index of the first result to return. */
        readonly startIndex?: components["parameters"]["start_index"];
        /** Used for pagination: the number of results to return. */
        readonly count?: components["parameters"]["count"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["scim-group-list-enterprise"];
        };
      };
    };
  };
  /**
   * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
   *
   * Provision an enterprise group, and invite users to the group. This sends invitation emails to the email address of the invited users to join the GitHub organization that the SCIM group corresponds to.
   */
  readonly "enterprise-admin/provision-and-invite-enterprise-group": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["scim-enterprise-group"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The SCIM schema URIs. */
          readonly schemas: readonly string[];
          /** The name of the SCIM group. This must match the GitHub organization that the group maps to. */
          readonly displayName: string;
          readonly members?: readonly {
            /** The SCIM user ID for a user. */
            readonly value: string;
          }[];
        };
      };
    };
  };
  /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */
  readonly "enterprise-admin/get-provisioning-information-for-enterprise-group": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
        /** Identifier generated by the GitHub SCIM endpoint. */
        readonly scim_group_id: components["parameters"]["scim_group_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["scim-enterprise-group"];
        };
      };
    };
  };
  /**
   * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
   *
   * Replaces an existing provisioned group’s information. You must provide all the information required for the group as if you were provisioning it for the first time. Any existing group information that you don't provide will be removed, including group membership. If you want to only update a specific attribute, use the [Update an attribute for a SCIM enterprise group](#update-an-attribute-for-a-scim-enterprise-group) endpoint instead.
   */
  readonly "enterprise-admin/set-information-for-provisioned-enterprise-group": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
        /** Identifier generated by the GitHub SCIM endpoint. */
        readonly scim_group_id: components["parameters"]["scim_group_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["scim-enterprise-group"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The SCIM schema URIs. */
          readonly schemas: readonly string[];
          /** The name of the SCIM group. This must match the GitHub organization that the group maps to. */
          readonly displayName: string;
          readonly members?: readonly {
            /** The SCIM user ID for a user. */
            readonly value: string;
          }[];
        };
      };
    };
  };
  /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */
  readonly "enterprise-admin/delete-scim-group-from-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
        /** Identifier generated by the GitHub SCIM endpoint. */
        readonly scim_group_id: components["parameters"]["scim_group_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
   *
   * Allows you to change a provisioned group’s individual attributes. To change a group’s values, you must provide a specific Operations JSON format that contains at least one of the add, remove, or replace operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
   */
  readonly "enterprise-admin/update-attribute-for-enterprise-group": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
        /** Identifier generated by the GitHub SCIM endpoint. */
        readonly scim_group_id: components["parameters"]["scim_group_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["scim-enterprise-group"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The SCIM schema URIs. */
          readonly schemas: readonly string[];
          /** Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2). */
          readonly Operations: readonly { readonly [key: string]: any }[];
        };
      };
    };
  };
  /**
   * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
   *
   * Retrieves a paginated list of all provisioned enterprise members, including pending invitations.
   *
   * When a user with a SAML-provisioned external identity leaves (or is removed from) an enterprise, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
   *   - When a user with a SCIM-provisioned external identity is removed from an enterprise, the account's metadata is preserved to allow the user to re-join the organization in the future.
   *   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
   *   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
   *
   * The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:
   *
   * 1. The user is granted access by the IdP and is not a member of the GitHub enterprise.
   *
   * 1. The user attempts to access the GitHub enterprise and initiates the SAML SSO process, and is not currently signed in to their GitHub account.
   *
   * 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:
   *    - If the user signs in, their GitHub account is linked to this entry.
   *    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub enterprise, and the external identity `null` entry remains in place.
   */
  readonly "enterprise-admin/list-provisioned-identities-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
      };
      readonly query: {
        /** Used for pagination: the index of the first result to return. */
        readonly startIndex?: components["parameters"]["start_index"];
        /** Used for pagination: the number of results to return. */
        readonly count?: components["parameters"]["count"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["scim-user-list-enterprise"];
        };
      };
    };
  };
  /**
   * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
   *
   * Provision enterprise membership for a user, and send organization invitation emails to the email address.
   *
   * You can optionally include the groups a user will be invited to join. If you do not provide a list of `groups`, the user is provisioned for the enterprise, but no organization invitation emails will be sent.
   */
  readonly "enterprise-admin/provision-and-invite-enterprise-user": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["scim-enterprise-user"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The SCIM schema URIs. */
          readonly schemas: readonly string[];
          /** The username for the user. */
          readonly userName: string;
          readonly name: {
            /** The first name of the user. */
            readonly givenName: string;
            /** The last name of the user. */
            readonly familyName: string;
          };
          /** List of user emails. */
          readonly emails: readonly {
            /** The email address. */
            readonly value: string;
            /** The type of email address. */
            readonly type: string;
            /** Whether this email address is the primary address. */
            readonly primary: boolean;
          }[];
          /** List of SCIM group IDs the user is a member of. */
          readonly groups?: readonly {
            readonly value?: string;
          }[];
        };
      };
    };
  };
  /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */
  readonly "enterprise-admin/get-provisioning-information-for-enterprise-user": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
        /** scim_user_id parameter */
        readonly scim_user_id: components["parameters"]["scim_user_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["scim-enterprise-user"];
        };
      };
    };
  };
  /**
   * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
   *
   * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](#update-an-attribute-for-an-enterprise-scim-user) endpoint instead.
   *
   * You must at least provide the required values for the user: `userName`, `name`, and `emails`.
   *
   * **Warning:** Setting `active: false` removes the user from the enterprise, deletes the external identity, and deletes the associated `{scim_user_id}`.
   */
  readonly "enterprise-admin/set-information-for-provisioned-enterprise-user": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
        /** scim_user_id parameter */
        readonly scim_user_id: components["parameters"]["scim_user_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["scim-enterprise-user"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The SCIM schema URIs. */
          readonly schemas: readonly string[];
          /** The username for the user. */
          readonly userName: string;
          readonly name: {
            /** The first name of the user. */
            readonly givenName: string;
            /** The last name of the user. */
            readonly familyName: string;
          };
          /** List of user emails. */
          readonly emails: readonly {
            /** The email address. */
            readonly value: string;
            /** The type of email address. */
            readonly type: string;
            /** Whether this email address is the primary address. */
            readonly primary: boolean;
          }[];
          /** List of SCIM group IDs the user is a member of. */
          readonly groups?: readonly {
            readonly value?: string;
          }[];
        };
      };
    };
  };
  /** **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change. */
  readonly "enterprise-admin/delete-user-from-enterprise": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
        /** scim_user_id parameter */
        readonly scim_user_id: components["parameters"]["scim_user_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
   *
   * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
   *
   * **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.
   *
   * **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the enterprise, deletes the external identity, and deletes the associated `:scim_user_id`.
   *
   * ```
   * {
   *   "Operations":[{
   *     "op":"replace",
   *     "value":{
   *       "active":false
   *     }
   *   }]
   * }
   * ```
   */
  readonly "enterprise-admin/update-attribute-for-enterprise-user": {
    readonly parameters: {
      readonly path: {
        /** The slug version of the enterprise name. You can also substitute this value with the enterprise id. */
        readonly enterprise: components["parameters"]["enterprise"];
        /** scim_user_id parameter */
        readonly scim_user_id: components["parameters"]["scim_user_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["scim-enterprise-user"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The SCIM schema URIs. */
          readonly schemas: readonly string[];
          /** Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2). */
          readonly Operations: readonly { readonly [key: string]: any }[];
        };
      };
    };
  };
  /**
   * Retrieves a paginated list of all provisioned organization members, including pending invitations. If you provide the `filter` parameter, the resources for all matching provisions members are returned.
   *
   * When a user with a SAML-provisioned external identity leaves (or is removed from) an organization, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
   *   - When a user with a SCIM-provisioned external identity is removed from an organization, the account's metadata is preserved to allow the user to re-join the organization in the future.
   *   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
   *   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
   *
   * The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:
   *
   * 1. The user is granted access by the IdP and is not a member of the GitHub organization.
   *
   * 1. The user attempts to access the GitHub organization and initiates the SAML SSO process, and is not currently signed in to their GitHub account.
   *
   * 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:
   *    - If the user signs in, their GitHub account is linked to this entry.
   *    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub organization, and the external identity `null` entry remains in place.
   */
  readonly "scim/list-provisioned-identities": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
      readonly query: {
        /** Used for pagination: the index of the first result to return. */
        readonly startIndex?: number;
        /** Used for pagination: the number of results to return. */
        readonly count?: number;
        /**
         * Filters results using the equals query parameter operator (`eq`). You can filter results that are equal to `id`, `userName`, `emails`, and `external_id`. For example, to search for an identity with the `userName` Octocat, you would use this query:
         *
         * `?filter=userName%20eq%20\"Octocat\"`.
         *
         * To filter results for the identity with the email `octocat@github.com`, you would use this query:
         *
         * `?filter=emails%20eq%20\"octocat@github.com\"`.
         */
        readonly filter?: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/scim+json": components["schemas"]["scim-user-list"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 400: components["responses"]["scim_bad_request"];
      readonly 403: components["responses"]["scim_forbidden"];
      readonly 404: components["responses"]["scim_not_found"];
    };
  };
  /** Provision organization membership for a user, and send an activation email to the email address. */
  readonly "scim/provision-and-invite-user": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/scim+json": components["schemas"]["scim-user"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 400: components["responses"]["scim_bad_request"];
      readonly 403: components["responses"]["scim_forbidden"];
      readonly 404: components["responses"]["scim_not_found"];
      readonly 409: components["responses"]["scim_conflict"];
      readonly 500: components["responses"]["scim_internal_error"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Configured by the admin. Could be an email, login, or username */
          readonly userName: string;
          /** The name of the user, suitable for display to end-users */
          readonly displayName?: string;
          readonly name: {
            readonly givenName: string;
            readonly familyName: string;
            readonly formatted?: string;
          };
          /** user emails */
          readonly emails: readonly {
            readonly value: string;
            readonly primary?: boolean;
            readonly type?: string;
          }[];
          readonly schemas?: readonly string[];
          readonly externalId?: string;
          readonly groups?: readonly string[];
          readonly active?: boolean;
        };
      };
    };
  };
  readonly "scim/get-provisioning-information-for-user": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** scim_user_id parameter */
        readonly scim_user_id: components["parameters"]["scim_user_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/scim+json": components["schemas"]["scim-user"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["scim_forbidden"];
      readonly 404: components["responses"]["scim_not_found"];
    };
  };
  /**
   * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](https://docs.github.com/rest/reference/scim#update-an-attribute-for-a-scim-user) endpoint instead.
   *
   * You must at least provide the required values for the user: `userName`, `name`, and `emails`.
   *
   * **Warning:** Setting `active: false` removes the user from the organization, deletes the external identity, and deletes the associated `{scim_user_id}`.
   */
  readonly "scim/set-information-for-provisioned-user": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** scim_user_id parameter */
        readonly scim_user_id: components["parameters"]["scim_user_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/scim+json": components["schemas"]["scim-user"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["scim_forbidden"];
      readonly 404: components["responses"]["scim_not_found"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          readonly schemas?: readonly string[];
          /** The name of the user, suitable for display to end-users */
          readonly displayName?: string;
          readonly externalId?: string;
          readonly groups?: readonly string[];
          readonly active?: boolean;
          /** Configured by the admin. Could be an email, login, or username */
          readonly userName: string;
          readonly name: {
            readonly givenName: string;
            readonly familyName: string;
            readonly formatted?: string;
          };
          /** user emails */
          readonly emails: readonly {
            readonly type?: string;
            readonly value: string;
            readonly primary?: boolean;
          }[];
        };
      };
    };
  };
  readonly "scim/delete-user-from-org": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** scim_user_id parameter */
        readonly scim_user_id: components["parameters"]["scim_user_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["scim_forbidden"];
      readonly 404: components["responses"]["scim_not_found"];
    };
  };
  /**
   * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
   *
   * **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.
   *
   * **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the organization, deletes the external identity, and deletes the associated `:scim_user_id`.
   *
   * ```
   * {
   *   "Operations":[{
   *     "op":"replace",
   *     "value":{
   *       "active":false
   *     }
   *   }]
   * }
   * ```
   */
  readonly "scim/update-attribute-for-user": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
        /** scim_user_id parameter */
        readonly scim_user_id: components["parameters"]["scim_user_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/scim+json": components["schemas"]["scim-user"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 400: components["responses"]["scim_bad_request"];
      readonly 403: components["responses"]["scim_forbidden"];
      readonly 404: components["responses"]["scim_not_found"];
      /** Too many requests */
      readonly 429: {
        readonly content: {
          readonly "application/json": components["schemas"]["basic-error"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          readonly schemas?: readonly string[];
          /** Set of operations to be performed */
          readonly Operations: readonly {
            readonly op: "add" | "remove" | "replace";
            readonly path?: string;
            readonly value?:
              | {
                  readonly active?: boolean | null;
                  readonly userName?: string | null;
                  readonly externalId?: string | null;
                  readonly givenName?: string | null;
                  readonly familyName?: string | null;
                }
              | readonly {
                  readonly value?: string;
                  readonly primary?: boolean;
                }[]
              | string;
          }[];
        };
      };
    };
  };
  /**
   * Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
   *
   * When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
   *
   * For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
   *
   * `q=addClass+in:file+language:js+repo:jquery/jquery`
   *
   * This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.
   *
   * #### Considerations for code search
   *
   * Due to the complexity of searching code, there are a few restrictions on how searches are performed:
   *
   * *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
   * *   Only files smaller than 384 KB are searchable.
   * *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
   * language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
   */
  readonly "search/code": {
    readonly parameters: {
      readonly query: {
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching code](https://help.github.com/articles/searching-code/)" for a detailed list of qualifiers. */
        readonly q: string;
        /** Sorts the results of your query. Can only be `indexed`, which indicates how recently a file has been indexed by the GitHub search infrastructure. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */
        readonly sort?: "indexed";
        /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
        readonly order?: components["parameters"]["order"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly incomplete_results: boolean;
            readonly items: readonly components["schemas"]["code-search-result-item"][];
          };
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden"];
      readonly 422: components["responses"]["validation_failed"];
      readonly 503: components["responses"]["service_unavailable"];
    };
  };
  /**
   * Find commits via various criteria on the default branch (usually `master`). This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
   *
   * When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
   * metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
   *
   * For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
   *
   * `q=repo:octocat/Spoon-Knife+css`
   */
  readonly "search/commits": {
    readonly parameters: {
      readonly query: {
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching commits](https://help.github.com/articles/searching-commits/)" for a detailed list of qualifiers. */
        readonly q: string;
        /** Sorts the results of your query by `author-date` or `committer-date`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */
        readonly sort?: "author-date" | "committer-date";
        /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
        readonly order?: components["parameters"]["order"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly incomplete_results: boolean;
            readonly items: readonly components["schemas"]["commit-search-result-item"][];
          };
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 415: components["responses"]["preview_header_missing"];
    };
  };
  /**
   * Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
   *
   * When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted
   * search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
   *
   * For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.
   *
   * `q=windows+label:bug+language:python+state:open&sort=created&order=asc`
   *
   * This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.
   *
   * **Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
   */
  readonly "search/issues-and-pull-requests": {
    readonly parameters: {
      readonly query: {
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching issues and pull requests](https://help.github.com/articles/searching-issues-and-pull-requests/)" for a detailed list of qualifiers. */
        readonly q: string;
        /** Sorts the results of your query by the number of `comments`, `reactions`, `reactions-+1`, `reactions--1`, `reactions-smile`, `reactions-thinking_face`, `reactions-heart`, `reactions-tada`, or `interactions`. You can also sort results by how recently the items were `created` or `updated`, Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */
        readonly sort?:
          | "comments"
          | "reactions"
          | "reactions-+1"
          | "reactions--1"
          | "reactions-smile"
          | "reactions-thinking_face"
          | "reactions-heart"
          | "reactions-tada"
          | "interactions"
          | "created"
          | "updated";
        /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
        readonly order?: components["parameters"]["order"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly incomplete_results: boolean;
            readonly items: readonly components["schemas"]["issue-search-result-item"][];
          };
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden"];
      readonly 422: components["responses"]["validation_failed"];
      readonly 503: components["responses"]["service_unavailable"];
    };
  };
  /**
   * Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
   *
   * When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
   *
   * For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
   *
   * `q=bug+defect+enhancement&repository_id=64778136`
   *
   * The labels that best match the query appear first in the search results.
   */
  readonly "search/labels": {
    readonly parameters: {
      readonly query: {
        /** The id of the repository. */
        readonly repository_id: number;
        /** The search keywords. This endpoint does not accept qualifiers in the query. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). */
        readonly q: string;
        /** Sorts the results of your query by when the label was `created` or `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */
        readonly sort?: "created" | "updated";
        /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
        readonly order?: components["parameters"]["order"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly incomplete_results: boolean;
            readonly items: readonly components["schemas"]["label-search-result-item"][];
          };
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  /**
   * Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
   *
   * When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
   *
   * For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
   *
   * `q=tetris+language:assembly&sort=stars&order=desc`
   *
   * This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
   *
   * When you include the `mercy` preview header, you can also search for multiple topics by adding more `topic:` instances. For example, your query might look like this:
   *
   * `q=topic:ruby+topic:rails`
   */
  readonly "search/repos": {
    readonly parameters: {
      readonly query: {
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching for repositories](https://help.github.com/articles/searching-for-repositories/)" for a detailed list of qualifiers. */
        readonly q: string;
        /** Sorts the results of your query by number of `stars`, `forks`, or `help-wanted-issues` or how recently the items were `updated`. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */
        readonly sort?: "stars" | "forks" | "help-wanted-issues" | "updated";
        /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
        readonly order?: components["parameters"]["order"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly incomplete_results: boolean;
            readonly items: readonly components["schemas"]["repo-search-result-item"][];
          };
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 422: components["responses"]["validation_failed"];
      readonly 503: components["responses"]["service_unavailable"];
    };
  };
  /**
   * Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). See "[Searching topics](https://help.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
   *
   * When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
   *
   * For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
   *
   * `q=ruby+is:featured`
   *
   * This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
   */
  readonly "search/topics": {
    readonly parameters: {
      readonly query: {
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). */
        readonly q: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly incomplete_results: boolean;
            readonly items: readonly components["schemas"]["topic-search-result-item"][];
          };
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 415: components["responses"]["preview_header_missing"];
    };
  };
  /**
   * Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
   *
   * When searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
   *
   * For example, if you're looking for a list of popular users, you might try this query:
   *
   * `q=tom+repos:%3E42+followers:%3E1000`
   *
   * This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
   */
  readonly "search/users": {
    readonly parameters: {
      readonly query: {
        /** The query contains one or more search keywords and qualifiers. Qualifiers allow you to limit your search to specific areas of GitHub. The REST API supports the same qualifiers as GitHub.com. To learn more about the format of the query, see [Constructing a search query](https://docs.github.com/rest/reference/search#constructing-a-search-query). See "[Searching users](https://help.github.com/articles/searching-users/)" for a detailed list of qualifiers. */
        readonly q: string;
        /** Sorts the results of your query by number of `followers` or `repositories`, or when the person `joined` GitHub. Default: [best match](https://docs.github.com/rest/reference/search#ranking-search-results) */
        readonly sort?: "followers" | "repositories" | "joined";
        /** Determines whether the first search result returned is the highest number of matches (`desc`) or lowest number of matches (`asc`). This parameter is ignored unless you provide `sort`. */
        readonly order?: components["parameters"]["order"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly incomplete_results: boolean;
            readonly items: readonly components["schemas"]["user-search-result-item"][];
          };
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 422: components["responses"]["validation_failed"];
      readonly 503: components["responses"]["service_unavailable"];
    };
  };
  /** **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint. */
  readonly "teams/get-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["team-full"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/reference/teams#delete-a-team) endpoint.
   *
   * To delete a team, the authenticated user must be an organization owner or team maintainer.
   *
   * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
   */
  readonly "teams/delete-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/reference/teams#update-a-team) endpoint.
   *
   * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
   *
   * **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.
   */
  readonly "teams/update-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["team-full"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The name of the team. */
          readonly name: string;
          /** The description of the team. */
          readonly description?: string;
          /**
           * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:
           * **For a non-nested team:**
           * \* `secret` - only visible to organization owners and members of this team.
           * \* `closed` - visible to all members of this organization.
           * **For a parent or child team:**
           * \* `closed` - visible to all members of this organization.
           */
          readonly privacy?: "secret" | "closed";
          /**
           * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
           * \* `pull` - team members can pull, but not push to or administer newly-added repositories.
           * \* `push` - team members can pull and push, but not administer newly-added repositories.
           * \* `admin` - team members can pull, push and administer newly-added repositories.
           */
          readonly permission?: "pull" | "push" | "admin";
          /** The ID of a team to set as the parent team. */
          readonly parent_team_id?: number | null;
        };
      };
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/reference/teams#list-discussions) endpoint.
   *
   * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   */
  readonly "teams/list-discussions-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
      };
      readonly query: {
        /** One of `asc` (ascending) or `desc` (descending). */
        readonly direction?: components["parameters"]["direction"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["team-discussion"][];
        };
      };
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/reference/teams#create-a-discussion) endpoint.
   *
   * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
   */
  readonly "teams/create-discussion-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["team-discussion"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The discussion post's title. */
          readonly title: string;
          /** The discussion post's body text. */
          readonly body: string;
          /** Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post. */
          readonly private?: boolean;
        };
      };
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint.
   *
   * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   */
  readonly "teams/get-discussion-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
        readonly discussion_number: components["parameters"]["discussion-number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["team-discussion"];
        };
      };
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/reference/teams#delete-a-discussion) endpoint.
   *
   * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   */
  readonly "teams/delete-discussion-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
        readonly discussion_number: components["parameters"]["discussion-number"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/reference/teams#update-a-discussion) endpoint.
   *
   * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   */
  readonly "teams/update-discussion-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
        readonly discussion_number: components["parameters"]["discussion-number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["team-discussion"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The discussion post's title. */
          readonly title?: string;
          /** The discussion post's body text. */
          readonly body?: string;
        };
      };
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint.
   *
   * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   */
  readonly "teams/list-discussion-comments-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
        readonly discussion_number: components["parameters"]["discussion-number"];
      };
      readonly query: {
        /** One of `asc` (ascending) or `desc` (descending). */
        readonly direction?: components["parameters"]["direction"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["team-discussion-comment"][];
        };
      };
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/reference/teams#create-a-discussion-comment) endpoint.
   *
   * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in abuse rate limiting. See "[Abuse rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#abuse-rate-limits)" and "[Dealing with abuse rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
   */
  readonly "teams/create-discussion-comment-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
        readonly discussion_number: components["parameters"]["discussion-number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["team-discussion-comment"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The discussion comment's body text. */
          readonly body: string;
        };
      };
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint.
   *
   * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   */
  readonly "teams/get-discussion-comment-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
        readonly discussion_number: components["parameters"]["discussion-number"];
        readonly comment_number: components["parameters"]["comment-number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["team-discussion-comment"];
        };
      };
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment) endpoint.
   *
   * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   */
  readonly "teams/delete-discussion-comment-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
        readonly discussion_number: components["parameters"]["discussion-number"];
        readonly comment_number: components["parameters"]["comment-number"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/reference/teams#update-a-discussion-comment) endpoint.
   *
   * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   */
  readonly "teams/update-discussion-comment-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
        readonly discussion_number: components["parameters"]["discussion-number"];
        readonly comment_number: components["parameters"]["comment-number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["team-discussion-comment"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The discussion comment's body text. */
          readonly body: string;
        };
      };
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
   *
   * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   */
  readonly "reactions/list-for-team-discussion-comment-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
        readonly discussion_number: components["parameters"]["discussion-number"];
        readonly comment_number: components["parameters"]["comment-number"];
      };
      readonly query: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion comment. */
        readonly content?:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["reaction"][];
        };
      };
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)" endpoint.
   *
   * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion comment.
   */
  readonly "reactions/create-for-team-discussion-comment-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
        readonly discussion_number: components["parameters"]["discussion-number"];
        readonly comment_number: components["parameters"]["comment-number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["reaction"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment. */
          readonly content:
            | "+1"
            | "-1"
            | "laugh"
            | "confused"
            | "heart"
            | "hooray"
            | "rocket"
            | "eyes";
        };
      };
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.
   *
   * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   */
  readonly "reactions/list-for-team-discussion-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
        readonly discussion_number: components["parameters"]["discussion-number"];
      };
      readonly query: {
        /** Returns a single [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types). Omit this parameter to list all reactions to a team discussion. */
        readonly content?:
          | "+1"
          | "-1"
          | "laugh"
          | "confused"
          | "heart"
          | "hooray"
          | "rocket"
          | "eyes";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["reaction"][];
        };
      };
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.
   *
   * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with a `Status: 200 OK` means that you already added the reaction type to this team discussion.
   */
  readonly "reactions/create-for-team-discussion-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
        readonly discussion_number: components["parameters"]["discussion-number"];
      };
    };
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["reaction"];
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion. */
          readonly content:
            | "+1"
            | "-1"
            | "laugh"
            | "confused"
            | "heart"
            | "hooray"
            | "rocket"
            | "eyes";
        };
      };
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/reference/teams#list-pending-team-invitations) endpoint.
   *
   * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
   */
  readonly "teams/list-pending-invitations-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["organization-invitation"][];
        };
      };
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint.
   *
   * Team members will include the members of child teams.
   */
  readonly "teams/list-members-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
      };
      readonly query: {
        /**
         * Filters members returned by their role in the team. Can be one of:
         * \* `member` - normal members of the team.
         * \* `maintainer` - team maintainers.
         * \* `all` - all members of the team.
         */
        readonly role?: "member" | "maintainer" | "all";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["simple-user"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * The "Get team member" endpoint (described below) is deprecated.
   *
   * We recommend using the [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
   *
   * To list members in a team, the team must be visible to the authenticated user.
   */
  readonly "teams/get-member-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** Response if user is a member */
      readonly 204: never;
      /** Response if user is not a member */
      readonly 404: unknown;
    };
  };
  /**
   * The "Add team member" endpoint (described below) is deprecated.
   *
   * We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.
   *
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.
   *
   * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   *
   * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
   */
  readonly "teams/add-member-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 403: components["responses"]["forbidden"];
      /** Response if team synchronization is set up */
      readonly 404: unknown;
      /** response */
      readonly 422: {
        readonly content: {
          readonly "application/json": {
            readonly message?: string;
            readonly errors?: readonly {
              readonly code?: string;
              readonly field?: string;
              readonly resource?: string;
            }[];
            readonly documentation_url?: string;
          };
        };
      };
    };
  };
  /**
   * The "Remove team member" endpoint (described below) is deprecated.
   *
   * We recommend using the [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.
   *
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
   *
   * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   */
  readonly "teams/remove-member-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      /** Response if team synchronization is setup */
      readonly 404: unknown;
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint.
   *
   * Team members will include the members of child teams.
   *
   * To get a user's membership with a team, the team must be visible to the authenticated user.
   *
   * **Note:** The `role` for organization owners returns as `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
   */
  readonly "teams/get-membership-for-user-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["team-membership"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.
   *
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.
   *
   * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   *
   * If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.
   *
   * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
   */
  readonly "teams/add-or-update-membership-for-user-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["team-membership"];
        };
      };
      /** Response if team synchronization is set up */
      readonly 403: unknown;
      readonly 404: components["responses"]["not_found"];
      /** Response if you attempt to add an organization to a team */
      readonly 422: {
        readonly content: {
          readonly "application/json": {
            readonly message?: string;
            readonly errors?: readonly {
              readonly code?: string;
              readonly field?: string;
              readonly resource?: string;
            }[];
            readonly documentation_url?: string;
          };
        };
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /**
           * The role that this user should have in the team. Can be one of:
           * \* `member` - a normal member of the team.
           * \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.
           */
          readonly role?: "member" | "maintainer";
        };
      };
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint.
   *
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
   *
   * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   */
  readonly "teams/remove-membership-for-user-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      /** Response if team synchronization is set up */
      readonly 403: unknown;
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint.
   *
   * Lists the organization projects for a team.
   */
  readonly "teams/list-projects-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["team-project"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 415: components["responses"]["preview_header_missing"];
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project) endpoint.
   *
   * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
   */
  readonly "teams/check-permissions-for-project-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
        readonly project_id: components["parameters"]["project-id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["team-project"];
        };
      };
      /** Response if project is not managed by this team */
      readonly 404: unknown;
      readonly 415: components["responses"]["preview_header_missing"];
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions) endpoint.
   *
   * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
   */
  readonly "teams/add-or-update-project-permissions-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
        readonly project_id: components["parameters"]["project-id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      /** Response if the project is not owned by the organization */
      readonly 403: {
        readonly content: {
          readonly "application/json": {
            readonly message?: string;
            readonly documentation_url?: string;
          };
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 415: components["responses"]["preview_header_missing"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /**
           * The permission to grant to the team for this project. Can be one of:
           * \* `read` - team members can read, but not write to or administer this project.
           * \* `write` - team members can read and write, but not administer this project.
           * \* `admin` - team members can read, write and administer this project.
           * Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
           */
          readonly permission?: "read" | "write" | "admin";
        };
      };
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team) endpoint.
   *
   * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
   */
  readonly "teams/remove-project-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
        readonly project_id: components["parameters"]["project-id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 404: components["responses"]["not_found"];
      readonly 415: components["responses"]["preview_header_missing"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  /** **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint. */
  readonly "teams/list-repos-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["minimal-repository"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * **Note**: Repositories inherited through a parent team will also be checked.
   *
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.
   *
   * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
   */
  readonly "teams/check-permissions-for-repo-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** Alternative response with extra repository information */
      readonly 200: {
        readonly content: {
          readonly "application/vnd.github.v3.repository+json": components["schemas"]["team-repository"];
        };
      };
      /** Response if repository is managed by this team */
      readonly 204: never;
      /** Response if repository is not managed by this team */
      readonly 404: unknown;
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions)" endpoint.
   *
   * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.
   *
   * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
   */
  readonly "teams/add-or-update-repo-permissions-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 403: components["responses"]["forbidden"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /**
           * The permission to grant the team on this repository. Can be one of:
           * \* `pull` - team members can pull, but not push to or administer this repository.
           * \* `push` - team members can pull and push, but not administer this repository.
           * \* `admin` - team members can pull, push and administer this repository.
           *
           * If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
           */
          readonly permission?: "pull" | "push" | "admin";
        };
      };
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team) endpoint.
   *
   * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
   */
  readonly "teams/remove-repo-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List IdP groups for a team`](https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team) endpoint.
   *
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * List IdP groups connected to a team on GitHub.
   */
  readonly "teams/list-idp-groups-for-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["group-mapping"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create or update IdP group connections`](https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections) endpoint.
   *
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
   */
  readonly "teams/create-or-update-idp-group-connections-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["group-mapping"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove. */
          readonly groups: readonly {
            /** ID of the IdP group. */
            readonly group_id: string;
            /** Name of the IdP group. */
            readonly group_name: string;
            /** Description of the IdP group. */
            readonly group_description: string;
            readonly id?: string;
            readonly name?: string;
            readonly description?: string;
          }[];
          readonly synced_at?: string;
        };
      };
    };
  };
  /** **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint. */
  readonly "teams/list-child-legacy": {
    readonly parameters: {
      readonly path: {
        readonly team_id: components["parameters"]["team-id"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** Response if child teams exist */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["team"][];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  /**
   * If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.
   *
   * If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.
   */
  readonly "users/get-authenticated": {
    readonly parameters: {};
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json":
            | components["schemas"]["private-user"]
            | components["schemas"]["public-user"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
    };
  };
  /** **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API. */
  readonly "users/update-authenticated": {
    readonly parameters: {};
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["private-user"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The new name of the user. */
          readonly name?: string;
          /** The publicly visible email address of the user. */
          readonly email?: string;
          /** The new blog URL of the user. */
          readonly blog?: string;
          /** The new Twitter username of the user. */
          readonly twitter_username?: string | null;
          /** The new company of the user. */
          readonly company?: string;
          /** The new location of the user. */
          readonly location?: string;
          /** The new hiring availability of the user. */
          readonly hireable?: boolean;
          /** The new short biography of the user. */
          readonly bio?: string;
        };
      };
    };
  };
  /** List the users you've blocked on your personal account. */
  readonly "users/list-blocked-by-authenticated": {
    readonly parameters: {};
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["simple-user"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 415: components["responses"]["preview_header_missing"];
    };
  };
  readonly "users/check-blocked": {
    readonly parameters: {
      readonly path: {
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** If the user is blocked: */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      /** If the user is not blocked: */
      readonly 404: {
        readonly content: {
          readonly "application/json": components["schemas"]["basic-error"];
        };
      };
    };
  };
  readonly "users/block": {
    readonly parameters: {
      readonly path: {
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  readonly "users/unblock": {
    readonly parameters: {
      readonly path: {
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Sets the visibility for your primary email addresses. */
  readonly "users/set-primary-email-visibility-for-authenticated": {
    readonly parameters: {};
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["email"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** An email address associated with the GitHub user account to manage. */
          readonly email: string;
          /** Denotes whether an email is publically visible. */
          readonly visibility: "public" | "private";
        };
      };
    };
  };
  /** Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope. */
  readonly "users/list-emails-for-authenticated": {
    readonly parameters: {
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["email"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** This endpoint is accessible with the `user` scope. */
  readonly "users/add-email-for-authenticated": {
    readonly parameters: {};
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["email"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json":
          | {
              /** Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key. */
              readonly emails: readonly string[];
            }
          | readonly string[]
          | string;
      };
    };
  };
  /** This endpoint is accessible with the `user` scope. */
  readonly "users/delete-email-for-authenticated": {
    readonly parameters: {};
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json":
          | {
              /** Email addresses associated with the GitHub user account. */
              readonly emails: readonly string[];
            }
          | readonly string[]
          | string;
      };
    };
  };
  /** Lists the people following the authenticated user. */
  readonly "users/list-followers-for-authenticated-user": {
    readonly parameters: {
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["simple-user"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
    };
  };
  /** Lists the people who the authenticated user follows. */
  readonly "users/list-followed-by-authenticated": {
    readonly parameters: {
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["simple-user"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
    };
  };
  readonly "users/check-person-is-followed-by-authenticated": {
    readonly parameters: {
      readonly path: {
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** Response if the person is followed by the authenticated user */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      /** Response if the person is not followed by the authenticated user */
      readonly 404: {
        readonly content: {
          readonly "application/json": components["schemas"]["basic-error"];
        };
      };
    };
  };
  /**
   * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
   *
   * Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
   */
  readonly "users/follow": {
    readonly parameters: {
      readonly path: {
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope. */
  readonly "users/unfollow": {
    readonly parameters: {
      readonly path: {
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
  readonly "users/list-gpg-keys-for-authenticated": {
    readonly parameters: {
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["gpg-key"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
  readonly "users/create-gpg-key-for-authenticated": {
    readonly parameters: {};
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["gpg-key"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** A GPG key in ASCII-armored format. */
          readonly armored_public_key: string;
        };
      };
    };
  };
  /** View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
  readonly "users/get-gpg-key-for-authenticated": {
    readonly parameters: {
      readonly path: {
        /** gpg_key_id parameter */
        readonly gpg_key_id: components["parameters"]["gpg_key_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["gpg-key"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
  readonly "users/delete-gpg-key-for-authenticated": {
    readonly parameters: {
      readonly path: {
        /** gpg_key_id parameter */
        readonly gpg_key_id: components["parameters"]["gpg_key_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  /**
   * Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
   *
   * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
   *
   * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
   *
   * You can find the permissions for the installation under the `permissions` key.
   */
  readonly "apps/list-installations-for-authenticated-user": {
    readonly parameters: {
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** You can find the permissions for the installation under the `permissions` key. */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly installations: readonly components["schemas"]["installation"][];
          };
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 415: components["responses"]["preview_header_missing"];
    };
  };
  /**
   * List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
   *
   * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
   *
   * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
   *
   * The access the user has to each repository is included in the hash under the `permissions` key.
   */
  readonly "apps/list-installation-repos-for-authenticated-user": {
    readonly parameters: {
      readonly path: {
        /** installation_id parameter */
        readonly installation_id: components["parameters"]["installation_id"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** The access the user has to each repository is included in the hash under the `permissions` key. */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": {
            readonly total_count: number;
            readonly repository_selection?: string;
            readonly repositories: readonly components["schemas"]["repository"][];
          };
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Add a single repository to an installation. The authenticated user must have admin access to the repository.
   *
   * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
   */
  readonly "apps/add-repo-to-installation": {
    readonly parameters: {
      readonly path: {
        /** installation_id parameter */
        readonly installation_id: components["parameters"]["installation_id"];
        readonly repository_id: components["parameters"]["repository_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Remove a single repository from an installation. The authenticated user must have admin access to the repository.
   *
   * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
   */
  readonly "apps/remove-repo-from-installation": {
    readonly parameters: {
      readonly path: {
        /** installation_id parameter */
        readonly installation_id: components["parameters"]["installation_id"];
        readonly repository_id: components["parameters"]["repository_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Shows which type of GitHub user can interact with your public repositories and when the restriction expires. If there are no restrictions, you will see an empty response. */
  readonly "interactions/get-restrictions-for-authenticated-user": {
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["interaction-limit-response"];
        };
      };
    };
  };
  /** Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user. */
  readonly "interactions/set-restrictions-for-authenticated-user": {
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["interaction-limit-response"];
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": components["schemas"]["interaction-limit"];
      };
    };
  };
  /** Removes any interaction restrictions from your public repositories. */
  readonly "interactions/remove-restrictions-for-authenticated-user": {
    readonly responses: {
      /** Empty response */
      readonly 204: never;
    };
  };
  /**
   * List issues across owned and member repositories assigned to the authenticated user.
   *
   * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
   * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
   * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
   * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
   */
  readonly "issues/list-for-authenticated-user": {
    readonly parameters: {
      readonly query: {
        /**
         * Indicates which sorts of issues to return. Can be one of:
         * \* `assigned`: Issues assigned to you
         * \* `created`: Issues created by you
         * \* `mentioned`: Issues mentioning you
         * \* `subscribed`: Issues you're subscribed to updates for
         * \* `all`: All issues the authenticated user can see, regardless of participation or creation
         */
        readonly filter?:
          | "assigned"
          | "created"
          | "mentioned"
          | "subscribed"
          | "all";
        /** Indicates the state of the issues to return. Can be either `open`, `closed`, or `all`. */
        readonly state?: "open" | "closed" | "all";
        /** A list of comma separated label names. Example: `bug,ui,@high` */
        readonly labels?: components["parameters"]["labels"];
        /** What to sort results by. Can be either `created`, `updated`, `comments`. */
        readonly sort?: "created" | "updated" | "comments";
        /** One of `asc` (ascending) or `desc` (descending). */
        readonly direction?: components["parameters"]["direction"];
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components["parameters"]["since"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["issue"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
  readonly "users/list-public-ssh-keys-for-authenticated": {
    readonly parameters: {
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["key"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
  readonly "users/create-public-ssh-key-for-authenticated": {
    readonly parameters: {};
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["key"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** A descriptive name for the new key. */
          readonly title?: string;
          /** The public SSH key to add to your GitHub account. */
          readonly key: string;
        };
      };
    };
  };
  /** View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
  readonly "users/get-public-ssh-key-for-authenticated": {
    readonly parameters: {
      readonly path: {
        /** key_id parameter */
        readonly key_id: components["parameters"]["key_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["key"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). */
  readonly "users/delete-public-ssh-key-for-authenticated": {
    readonly parameters: {
      readonly path: {
        /** key_id parameter */
        readonly key_id: components["parameters"]["key_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/). */
  readonly "apps/list-subscriptions-for-authenticated-user": {
    readonly parameters: {
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["user-marketplace-purchase"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/). */
  readonly "apps/list-subscriptions-for-authenticated-user-stubbed": {
    readonly parameters: {
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["user-marketplace-purchase"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
    };
  };
  readonly "orgs/list-memberships-for-authenticated-user": {
    readonly parameters: {
      readonly query: {
        /** Indicates the state of the memberships to return. Can be either `active` or `pending`. If not specified, the API returns both active and pending memberships. */
        readonly state?: "active" | "pending";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["org-membership"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  readonly "orgs/get-membership-for-authenticated-user": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["org-membership"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  readonly "orgs/update-membership-for-authenticated-user": {
    readonly parameters: {
      readonly path: {
        readonly org: components["parameters"]["org"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["org-membership"];
        };
      };
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The state that the membership should be in. Only `"active"` will be accepted. */
          readonly state: "active";
        };
      };
    };
  };
  /** Lists all migrations a user has started. */
  readonly "migrations/list-for-authenticated-user": {
    readonly parameters: {
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["migration"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
    };
  };
  /** Initiates the generation of a user migration archive. */
  readonly "migrations/start-for-authenticated-user": {
    readonly parameters: {};
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["migration"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Lock the repositories being migrated at the start of the migration */
          readonly lock_repositories?: boolean;
          /** Do not include attachments in the migration */
          readonly exclude_attachments?: boolean;
          /** Exclude attributes from the API response to improve performance */
          readonly exclude?: readonly "repositories"[];
          readonly repositories: readonly string[];
        };
      };
    };
  };
  /**
   * Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:
   *
   * *   `pending` - the migration hasn't started yet.
   * *   `exporting` - the migration is in progress.
   * *   `exported` - the migration finished successfully.
   * *   `failed` - the migration failed.
   *
   * Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/reference/migrations#download-a-user-migration-archive).
   */
  readonly "migrations/get-status-for-authenticated-user": {
    readonly parameters: {
      readonly path: {
        /** migration_id parameter */
        readonly migration_id: components["parameters"]["migration_id"];
      };
      readonly query: {
        readonly exclude?: readonly string[];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["migration"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
   *
   * *   attachments
   * *   bases
   * *   commit\_comments
   * *   issue\_comments
   * *   issue\_events
   * *   issues
   * *   milestones
   * *   organizations
   * *   projects
   * *   protected\_branches
   * *   pull\_request\_reviews
   * *   pull\_requests
   * *   releases
   * *   repositories
   * *   review\_comments
   * *   schema
   * *   users
   *
   * The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
   */
  readonly "migrations/get-archive-for-authenticated-user": {
    readonly parameters: {
      readonly path: {
        /** migration_id parameter */
        readonly migration_id: components["parameters"]["migration_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 302: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
    };
  };
  /** Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/reference/migrations#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/reference/migrations#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted. */
  readonly "migrations/delete-archive-for-authenticated-user": {
    readonly parameters: {
      readonly path: {
        /** migration_id parameter */
        readonly migration_id: components["parameters"]["migration_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/reference/migrations#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/reference/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked. */
  readonly "migrations/unlock-repo-for-authenticated-user": {
    readonly parameters: {
      readonly path: {
        /** migration_id parameter */
        readonly migration_id: components["parameters"]["migration_id"];
        /** repo_name parameter */
        readonly repo_name: components["parameters"]["repo_name"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Lists all the repositories for this user migration. */
  readonly "migrations/list-repos-for-user": {
    readonly parameters: {
      readonly path: {
        /** migration_id parameter */
        readonly migration_id: components["parameters"]["migration_id"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["minimal-repository"][];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * List organizations for the authenticated user.
   *
   * **OAuth scope requirements**
   *
   * This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.
   */
  readonly "orgs/list-for-authenticated-user": {
    readonly parameters: {
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["organization-simple"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
    };
  };
  /**
   * Gets a specific package for a package owned by the authenticated user.
   *
   * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
   * If `package_type` is not `container`, your token must also include the `repo` scope.
   */
  readonly "packages/get-package-for-authenticated-user": {
    readonly parameters: {
      readonly path: {
        /** The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`. */
        readonly package_type: components["parameters"]["package_type"];
        /** The name of the package. */
        readonly package_name: components["parameters"]["package_name"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["package"];
        };
      };
    };
  };
  /**
   * Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 25 downloads. In this scenario, contact GitHub support for further assistance.
   *
   * To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:delete` scope.
   * If `package_type` is not `container`, your token must also include the `repo` scope.
   */
  readonly "packages/delete-package-for-authenticated-user": {
    readonly parameters: {
      readonly path: {
        /** The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`. */
        readonly package_type: components["parameters"]["package_type"];
        /** The name of the package. */
        readonly package_name: components["parameters"]["package_name"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Restores a package owned by the authenticated user.
   *
   * You can restore a deleted package under the following conditions:
   *   - The package was deleted within the last 30 days.
   *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
   *
   * To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:write` scope. If `package_type` is not `container`, your token must also include the `repo` scope.
   */
  readonly "packages/restore-package-for-authenticated-user": {
    readonly parameters: {
      readonly path: {
        /** The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`. */
        readonly package_type: components["parameters"]["package_type"];
        /** The name of the package. */
        readonly package_name: components["parameters"]["package_name"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Returns all package versions for a package owned by the authenticated user.
   *
   * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
   * If `package_type` is not `container`, your token must also include the `repo` scope.
   */
  readonly "packages/get-all-package-versions-for-a-package-owned-by-the-authenticated-user": {
    readonly parameters: {
      readonly path: {
        /** The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`. */
        readonly package_type: components["parameters"]["package_type"];
        /** The name of the package. */
        readonly package_name: components["parameters"]["package_name"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["package-version"][];
        };
      };
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Gets a specific package version for a package owned by the authenticated user.
   *
   * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
   * If `package_type` is not `container`, your token must also include the `repo` scope.
   */
  readonly "packages/get-package-version-for-authenticated-user": {
    readonly parameters: {
      readonly path: {
        /** The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`. */
        readonly package_type: components["parameters"]["package_type"];
        /** The name of the package. */
        readonly package_name: components["parameters"]["package_name"];
        /** Unique identifier of the package version. */
        readonly package_version_id: components["parameters"]["package_version_id"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["package-version"];
        };
      };
    };
  };
  /**
   * Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 25 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
   *
   * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` scope.
   * If `package_type` is not `container`, your token must also include the `repo` scope.
   */
  readonly "packages/delete-package-version-for-authenticated-user": {
    readonly parameters: {
      readonly path: {
        /** The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`. */
        readonly package_type: components["parameters"]["package_type"];
        /** The name of the package. */
        readonly package_name: components["parameters"]["package_name"];
        /** Unique identifier of the package version. */
        readonly package_version_id: components["parameters"]["package_version_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Restores a package version owned by the authenticated user.
   *
   * You can restore a deleted package version under the following conditions:
   *   - The package was deleted within the last 30 days.
   *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
   *
   * To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:write` scope. If `package_type` is not `container`, your token must also include the `repo` scope.
   */
  readonly "packages/restore-package-version-for-authenticated-user": {
    readonly parameters: {
      readonly path: {
        /** The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`. */
        readonly package_type: components["parameters"]["package_type"];
        /** The name of the package. */
        readonly package_name: components["parameters"]["package_name"];
        /** Unique identifier of the package version. */
        readonly package_version_id: components["parameters"]["package_version_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  readonly "projects/create-for-authenticated-user": {
    readonly parameters: {};
    readonly responses: {
      /** response */
      readonly 201: {
        readonly content: {
          readonly "application/json": components["schemas"]["project"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 415: components["responses"]["preview_header_missing"];
      readonly 422: components["responses"]["validation_failed_simple"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** Name of the project */
          readonly name: string;
          /** Body of the project */
          readonly body?: string | null;
        };
      };
    };
  };
  /** Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope. */
  readonly "users/list-public-emails-for-authenticated": {
    readonly parameters: {
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["email"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
   *
   * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
   */
  readonly "repos/list-for-authenticated-user": {
    readonly parameters: {
      readonly query: {
        /** Can be one of `all`, `public`, or `private`. */
        readonly visibility?: "all" | "public" | "private";
        /**
         * Comma-separated list of values. Can include:
         * \* `owner`: Repositories that are owned by the authenticated user.
         * \* `collaborator`: Repositories that the user has been added to as a collaborator.
         * \* `organization_member`: Repositories that the user has access to through being a member of an organization. This includes every repository on every team that the user is on.
         */
        readonly affiliation?: string;
        /**
         * Can be one of `all`, `owner`, `public`, `private`, `member`. Default: `all`
         *
         * Will cause a `422` error if used in the same request as **visibility** or **affiliation**. Will cause a `422` error if used in the same request as **visibility** or **affiliation**.
         */
        readonly type?: "all" | "owner" | "public" | "private" | "member";
        /** Can be one of `created`, `updated`, `pushed`, `full_name`. */
        readonly sort?: "created" | "updated" | "pushed" | "full_name";
        /** Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc` */
        readonly direction?: "asc" | "desc";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components["parameters"]["since"];
        /** Only show notifications updated before the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly before?: components["parameters"]["before"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["repository"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  /**
   * Creates a new repository for the authenticated user.
   *
   * **OAuth scope requirements**
   *
   * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
   *
   * *   `public_repo` scope or `repo` scope to create a public repository
   * *   `repo` scope to create a private repository
   */
  readonly "repos/create-for-authenticated-user": {
    readonly parameters: {};
    readonly responses: {
      /** response */
      readonly 201: {
        readonly headers: {
          readonly Location?: string;
        };
        readonly content: {
          readonly "application/json": components["schemas"]["repository"];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 400: components["responses"]["bad_request"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          /** The name of the repository. */
          readonly name: string;
          /** A short description of the repository. */
          readonly description?: string;
          /** A URL with more information about the repository. */
          readonly homepage?: string;
          /** Whether the repository is private or public. */
          readonly private?: boolean;
          /** Whether issues are enabled. */
          readonly has_issues?: boolean;
          /** Whether projects are enabled. */
          readonly has_projects?: boolean;
          /** Whether the wiki is enabled. */
          readonly has_wiki?: boolean;
          /** The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization. */
          readonly team_id?: number;
          /** Whether the repository is initialized with a minimal README. */
          readonly auto_init?: boolean;
          /** The desired language or platform to apply to the .gitignore. */
          readonly gitignore_template?: string;
          /** The license keyword of the open source license for this repository. */
          readonly license_template?: string;
          /** Whether to allow squash merges for pull requests. */
          readonly allow_squash_merge?: boolean;
          /** Whether to allow merge commits for pull requests. */
          readonly allow_merge_commit?: boolean;
          /** Whether to allow rebase merges for pull requests. */
          readonly allow_rebase_merge?: boolean;
          /** Whether to delete head branches when pull requests are merged */
          readonly delete_branch_on_merge?: boolean;
          /** Whether downloads are enabled. */
          readonly has_downloads?: boolean;
          /** Whether this repository acts as a template that can be used to generate new repositories. */
          readonly is_template?: boolean;
        };
      };
    };
  };
  /** When authenticating as a user, this endpoint will list all currently open repository invitations for that user. */
  readonly "repos/list-invitations-for-authenticated-user": {
    readonly parameters: {
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["repository-invitation"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  readonly "repos/decline-invitation": {
    readonly parameters: {
      readonly path: {
        /** invitation_id parameter */
        readonly invitation_id: components["parameters"]["invitation_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 409: components["responses"]["conflict"];
    };
  };
  readonly "repos/accept-invitation": {
    readonly parameters: {
      readonly path: {
        /** invitation_id parameter */
        readonly invitation_id: components["parameters"]["invitation_id"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
      readonly 409: components["responses"]["conflict"];
    };
  };
  /**
   * Lists repositories the authenticated user has starred.
   *
   * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
   */
  readonly "activity/list-repos-starred-by-authenticated-user": {
    readonly parameters: {
      readonly query: {
        /** One of `created` (when the repository was starred) or `updated` (when it was last pushed to). */
        readonly sort?: components["parameters"]["sort"];
        /** One of `asc` (ascending) or `desc` (descending). */
        readonly direction?: components["parameters"]["direction"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["repository"][];
          readonly "application/vnd.github.v3.star+json": readonly components["schemas"]["starred-repository"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
    };
  };
  readonly "activity/check-repo-is-starred-by-authenticated-user": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** Response if this repository is starred by you */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      /** Response if this repository is not starred by you */
      readonly 404: {
        readonly content: {
          readonly "application/json": components["schemas"]["basic-error"];
        };
      };
    };
  };
  /** Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)." */
  readonly "activity/star-repo-for-authenticated-user": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  readonly "activity/unstar-repo-for-authenticated-user": {
    readonly parameters: {
      readonly path: {
        readonly owner: components["parameters"]["owner"];
        readonly repo: components["parameters"]["repo"];
      };
    };
    readonly responses: {
      /** Empty response */
      readonly 204: never;
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** Lists repositories the authenticated user is watching. */
  readonly "activity/list-watched-repos-for-authenticated-user": {
    readonly parameters: {
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["minimal-repository"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
    };
  };
  /** List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/). */
  readonly "teams/list-for-authenticated-user": {
    readonly parameters: {
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["team-full"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.
   *
   * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.
   */
  readonly "users/list": {
    readonly parameters: {
      readonly query: {
        /** A user ID. Only return users with an ID greater than this ID. */
        readonly since?: components["parameters"]["since-user"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {
          readonly Link?: string;
        };
        readonly content: {
          readonly "application/json": readonly components["schemas"]["simple-user"][];
        };
      };
      readonly 304: components["responses"]["not_modified"];
    };
  };
  /**
   * Provides publicly available information about someone with a GitHub account.
   *
   * GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see 'Response with GitHub plan information' below"
   *
   * The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/overview/resources-in-the-rest-api#authentication).
   *
   * The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/rest/reference/users#emails)".
   */
  readonly "users/get-by-username": {
    readonly parameters: {
      readonly path: {
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json":
            | components["schemas"]["private-user"]
            | components["schemas"]["public-user"];
        };
      };
      readonly 404: components["responses"]["not_found"];
    };
  };
  /** If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events. */
  readonly "activity/list-events-for-authenticated-user": {
    readonly parameters: {
      readonly path: {
        readonly username: components["parameters"]["username"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["event"][];
        };
      };
    };
  };
  /** This is the user's organization dashboard. You must be authenticated as the user to view this. */
  readonly "activity/list-org-events-for-authenticated-user": {
    readonly parameters: {
      readonly path: {
        readonly username: components["parameters"]["username"];
        readonly org: components["parameters"]["org"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["event"][];
        };
      };
    };
  };
  readonly "activity/list-public-events-for-user": {
    readonly parameters: {
      readonly path: {
        readonly username: components["parameters"]["username"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["event"][];
        };
      };
    };
  };
  /** Lists the people following the specified user. */
  readonly "users/list-followers-for-user": {
    readonly parameters: {
      readonly path: {
        readonly username: components["parameters"]["username"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["simple-user"][];
        };
      };
    };
  };
  /** Lists the people who the specified user follows. */
  readonly "users/list-following-for-user": {
    readonly parameters: {
      readonly path: {
        readonly username: components["parameters"]["username"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["simple-user"][];
        };
      };
    };
  };
  readonly "users/check-following-for-user": {
    readonly parameters: {
      readonly path: {
        readonly username: components["parameters"]["username"];
        readonly target_user: string;
      };
    };
    readonly responses: {
      /** Response if the user follows the target user */
      readonly 204: never;
      /** Response if the user does not follow the target user */
      readonly 404: unknown;
    };
  };
  /** Lists public gists for the specified user: */
  readonly "gists/list-for-user": {
    readonly parameters: {
      readonly path: {
        readonly username: components["parameters"]["username"];
      };
      readonly query: {
        /** Only show notifications updated after the given time. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. */
        readonly since?: components["parameters"]["since"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["base-gist"][];
        };
      };
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  /** Lists the GPG keys for a user. This information is accessible by anyone. */
  readonly "users/list-gpg-keys-for-user": {
    readonly parameters: {
      readonly path: {
        readonly username: components["parameters"]["username"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["gpg-key"][];
        };
      };
    };
  };
  /**
   * Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
   *
   * The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:
   *
   * ```shell
   *  curl -u username:token
   *   https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
   * ```
   */
  readonly "users/get-context-for-user": {
    readonly parameters: {
      readonly path: {
        readonly username: components["parameters"]["username"];
      };
      readonly query: {
        /** Identifies which additional information you'd like to receive about the person's hovercard. Can be `organization`, `repository`, `issue`, `pull_request`. **Required** when using `subject_id`. */
        readonly subject_type?:
          | "organization"
          | "repository"
          | "issue"
          | "pull_request";
        /** Uses the ID for the `subject_type` you specified. **Required** when using `subject_type`. */
        readonly subject_id?: string;
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["hovercard"];
        };
      };
      readonly 404: components["responses"]["not_found"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  /**
   * Enables an authenticated GitHub App to find the user’s installation information.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   */
  readonly "apps/get-user-installation": {
    readonly parameters: {
      readonly path: {
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["installation"];
        };
      };
    };
  };
  /** Lists the _verified_ public SSH keys for a user. This is accessible by anyone. */
  readonly "users/list-public-keys-for-user": {
    readonly parameters: {
      readonly path: {
        readonly username: components["parameters"]["username"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["key-simple"][];
        };
      };
    };
  };
  /**
   * List [public organization memberships](https://help.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
   *
   * This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
   */
  readonly "orgs/list-for-user": {
    readonly parameters: {
      readonly path: {
        readonly username: components["parameters"]["username"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["organization-simple"][];
        };
      };
    };
  };
  /**
   * Gets a specific package metadata for a public package owned by a user.
   *
   * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
   * If `package_type` is not `container`, your token must also include the `repo` scope.
   */
  readonly "packages/get-package-for-user": {
    readonly parameters: {
      readonly path: {
        /** The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`. */
        readonly package_type: components["parameters"]["package_type"];
        /** The name of the package. */
        readonly package_name: components["parameters"]["package_name"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["package"];
        };
      };
    };
  };
  /**
   * Returns all package versions for a public package owned by a specified user.
   *
   * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
   * If `package_type` is not `container`, your token must also include the `repo` scope.
   */
  readonly "packages/get-all-package-versions-for-package-owned-by-user": {
    readonly parameters: {
      readonly path: {
        /** The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`. */
        readonly package_type: components["parameters"]["package_type"];
        /** The name of the package. */
        readonly package_name: components["parameters"]["package_name"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["package-version"][];
        };
      };
      readonly 401: components["responses"]["requires_authentication"];
      readonly 403: components["responses"]["forbidden"];
      readonly 404: components["responses"]["not_found"];
    };
  };
  /**
   * Gets a specific package version for a public package owned by a specified user.
   *
   * At this time, to use this endpoint, you must authenticate using an access token with the `packages:read` scope.
   * If `package_type` is not `container`, your token must also include the `repo` scope.
   */
  readonly "packages/get-package-version-for-user": {
    readonly parameters: {
      readonly path: {
        /** The type of supported package. Can be one of `npm`, `maven`, `rubygems`, `nuget`, `docker`, or `container`. For Docker images that use the package namespace `https://ghcr.io/owner/package-name`, use `container`. */
        readonly package_type: components["parameters"]["package_type"];
        /** The name of the package. */
        readonly package_name: components["parameters"]["package_name"];
        /** Unique identifier of the package version. */
        readonly package_version_id: components["parameters"]["package_version_id"];
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["package-version"];
        };
      };
    };
  };
  readonly "projects/list-for-user": {
    readonly parameters: {
      readonly path: {
        readonly username: components["parameters"]["username"];
      };
      readonly query: {
        /** Indicates the state of the projects to return. Can be either `open`, `closed`, or `all`. */
        readonly state?: "open" | "closed" | "all";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["project"][];
        };
      };
      readonly 415: components["responses"]["preview_header_missing"];
      readonly 422: components["responses"]["validation_failed"];
    };
  };
  /** These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events. */
  readonly "activity/list-received-events-for-user": {
    readonly parameters: {
      readonly path: {
        readonly username: components["parameters"]["username"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["event"][];
        };
      };
    };
  };
  readonly "activity/list-received-public-events-for-user": {
    readonly parameters: {
      readonly path: {
        readonly username: components["parameters"]["username"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": readonly components["schemas"]["event"][];
        };
      };
    };
  };
  /** Lists public repositories for the specified user. */
  readonly "repos/list-for-user": {
    readonly parameters: {
      readonly path: {
        readonly username: components["parameters"]["username"];
      };
      readonly query: {
        /** Can be one of `all`, `owner`, `member`. */
        readonly type?: "all" | "owner" | "member";
        /** Can be one of `created`, `updated`, `pushed`, `full_name`. */
        readonly sort?: "created" | "updated" | "pushed" | "full_name";
        /** Can be one of `asc` or `desc`. Default: `asc` when using `full_name`, otherwise `desc` */
        readonly direction?: "asc" | "desc";
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["minimal-repository"][];
        };
      };
    };
  };
  /**
   * Gets the summary of the free and paid GitHub Actions minutes used.
   *
   * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
   *
   * Access tokens must have the `user` scope.
   */
  readonly "billing/get-github-actions-billing-user": {
    readonly parameters: {
      readonly path: {
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["actions-billing-usage"];
        };
      };
    };
  };
  /**
   * Gets the free and paid storage used for GitHub Packages in gigabytes.
   *
   * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
   *
   * Access tokens must have the `user` scope.
   */
  readonly "billing/get-github-packages-billing-user": {
    readonly parameters: {
      readonly path: {
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["packages-billing-usage"];
        };
      };
    };
  };
  /**
   * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
   *
   * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
   *
   * Access tokens must have the `user` scope.
   */
  readonly "billing/get-shared-storage-billing-user": {
    readonly parameters: {
      readonly path: {
        readonly username: components["parameters"]["username"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "application/json": components["schemas"]["combined-billing-usage"];
        };
      };
    };
  };
  /**
   * Lists repositories a user has starred.
   *
   * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
   */
  readonly "activity/list-repos-starred-by-user": {
    readonly parameters: {
      readonly path: {
        readonly username: components["parameters"]["username"];
      };
      readonly query: {
        /** One of `created` (when the repository was starred) or `updated` (when it was last pushed to). */
        readonly sort?: components["parameters"]["sort"];
        /** One of `asc` (ascending) or `desc` (descending). */
        readonly direction?: components["parameters"]["direction"];
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["repository"][];
          readonly "application/vnd.github.v3.star+json": readonly components["schemas"]["starred-repository"][];
        };
      };
    };
  };
  /** Lists repositories a user is watching. */
  readonly "activity/list-repos-watched-by-user": {
    readonly parameters: {
      readonly path: {
        readonly username: components["parameters"]["username"];
      };
      readonly query: {
        /** Results per page (max 100). */
        readonly per_page?: components["parameters"]["per_page"];
        /** Page number of the results to fetch. */
        readonly page?: components["parameters"]["page"];
      };
    };
    readonly responses: {
      /** response */
      readonly 200: {
        readonly headers: {};
        readonly content: {
          readonly "application/json": readonly components["schemas"]["minimal-repository"][];
        };
      };
    };
  };
  /** Get a random sentence from the Zen of GitHub */
  readonly "meta/get-zen": {
    readonly responses: {
      /** response */
      readonly 200: {
        readonly content: {
          readonly "text/plain": string;
        };
      };
    };
  };
}

export interface external {}
